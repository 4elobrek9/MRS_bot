from aiogram import Router, types, Bot, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from aiogram.utils.markdown import hlink
import logging

from core.group.stat.manager import ProfileManager
from core.group.stat.shop_config import ShopConfig # –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–æ–Ω–∞—Ö
from aiogram.enums import ParseMode  # ‚Üê –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É

logger = logging.getLogger(__name__)

rpg_router = Router(name="rpg_router")

@rpg_router.message(F.text.lower() == "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
async def show_inventory(message: types.Message, profile_manager: ProfileManager):
    logger.info(f"Received '–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å' command from user {message.from_user.id}.")
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = await profile_manager.get_user_profile(message.from_user)
    active_background_key = user_profile.get('active_background', 'default')

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ–Ω—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_backgrounds = await profile_manager.get_user_backgrounds_inventory(user_id)
    
    builder = InlineKeyboardBuilder()
    text = "üéí **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å** üéí\n\n"
    
    # –†–∞–∑–¥–µ–ª "–§–æ–Ω—ã"
    text += "üñºÔ∏è **–§–æ–Ω—ã:**\n"
    if user_backgrounds:
        for bg_key in user_backgrounds:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ñ–æ–Ω–æ–≤
            if bg_key.startswith("custom:"):
                bg_name = "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω"
                status = " ‚úÖ (–ê–∫—Ç–∏–≤–Ω–æ)" if bg_key == active_background_key else ""
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ–æ–Ω–∞
                builder.row(InlineKeyboardButton(
                    text=f"üé® {bg_name}{status}", 
                    callback_data=f"activate_bg:{bg_key}"
                ))
            else:
                bg_info = ShopConfig.SHOP_BACKGROUNDS.get(bg_key)
                bg_name = bg_info['name'] if bg_info else bg_key
                status = " ‚úÖ (–ê–∫—Ç–∏–≤–Ω–æ)" if bg_key == active_background_key else ""
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ–æ–Ω–∞
                builder.row(InlineKeyboardButton(
                    text=f"üé® {bg_name}{status}", 
                    callback_data=f"activate_bg:{bg_key}"
                ))
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ–Ω–æ–≤. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ /–º–∞–≥–∞–∑–∏–Ω!\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Ñ–æ–Ω—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    default_status = " ‚úÖ (–ê–∫—Ç–∏–≤–Ω–æ)" if active_background_key == 'default' else ""
    builder.row(InlineKeyboardButton(
        text=f"üîô –í–µ—Ä–Ω—É—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ–Ω{default_status}", 
        callback_data="reset_bg_to_default"
    ))
    
    builder.adjust(1)
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.MARKDOWN)
    logger.info(f"Inventory list sent to user {user_id}.")


@rpg_router.callback_query(F.data.startswith("activate_bg:"))
async def process_activate_background(callback: types.CallbackQuery, profile_manager: ProfileManager):
    user_id = callback.from_user.id
    background_key_to_activate = callback.data.split(":")[1]

    logger.info(f"User {user_id} attempting to activate background: '{background_key_to_activate}'.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_backgrounds_inventory = await profile_manager.get_user_backgrounds_inventory(user_id)

    if background_key_to_activate in user_backgrounds_inventory:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–æ–Ω
        await profile_manager.set_user_background(user_id, background_key_to_activate)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ–Ω–µ
        bg_info = ShopConfig.SHOP_BACKGROUNDS.get(background_key_to_activate)
        bg_name = bg_info['name'] if bg_info else background_key_to_activate

        logger.info(f"User {user_id} successfully activated background '{bg_name}'.")
        await callback.message.edit_text(
            f"‚úÖ –§–æ–Ω '{bg_name}' —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
            reply_markup=None
        )
    else:
        logger.warning(f"User {user_id} tried to activate background '{background_key_to_activate}' not in inventory.")
        await callback.message.edit_text(
            "‚ùå –≠—Ç–æ–≥–æ —Ñ–æ–Ω–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.",
            reply_markup=None
        )


@rpg_router.callback_query(F.data == "reset_bg_to_default")
async def process_reset_background_to_default(callback: types.CallbackQuery, profile_manager: ProfileManager):
    user_id = callback.from_user.id

    logger.info(f"User {user_id} attempting to reset background to default.")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await profile_manager.set_user_background(user_id, 'default')
    
    logger.info(f"User {user_id} successfully reset background to default.")
    await callback.message.edit_text(
        "‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
        reply_markup=None
    )


def setup_rpg_handlers(main_dp: Router):
    main_dp.include_router(rpg_router)
    logger.info("RPG router included in Dispatcher.")
