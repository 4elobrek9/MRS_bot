<<<<<<< HEAD
from core.main.ez_main import *
from core.main.ollama import *
from core.main.command import *
from core.main.dec_command import *
# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---
=======
import os
import json
import random
import asyncio
from datetime import datetime, timezone
from pathlib import Path
from typing import Optional, List, Tuple, Dict, Any
from contextlib import suppress
import logging
import aiosqlite
import dotenv
import ollama
import aiohttp
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ChatType
from aiogram.filters import Command
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
)
from aiogram.exceptions import TelegramAPIError
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.utils.markdown import hide_link, hbold, hitalic, hcode
import time
import re

# –ò–º–ø–æ—Ä—Ç –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
import database as db
from group_stat import setup_stat_handlers, ProfileManager
from rp_module_refactored import setup_rp_handlers, periodic_hp_recovery_task
import censor_module # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å —Ü–µ–Ω–∑—É—Ä—ã
from ollama.types import Message as OllamaMessage # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø Message –∏–∑ ollama.types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.load_dotenv()

TOKEN = os.getenv("TOKEN")
if not TOKEN:
    logger.critical("Bot token not found in environment variables. Please set the TOKEN variable.")
    exit(1)

OLLAMA_API_BASE_URL = os.getenv("OLLAMA_API_BASE_URL", "http://localhost:11434")
OLLAMA_MODEL_NAME = os.getenv("OLLAMA_MODEL_NAME", "llama3")

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–∞–Ω–Ω—ã—Ö
JOKES_CACHE_FILE = Path("data") / "jokes_cache.json"
VALUE_FILE_PATH = Path("data") / "value.txt"
STICKERS_CACHE_FILE = Path("data") / "stickers_cache.json"
BAD_WORDS_FILE = Path("data") / "bad_words.txt"

ADMIN_USER_ID_STR = os.getenv("ADMIN_USER_ID")
ADMIN_USER_ID: Optional[int] = None
if ADMIN_USER_ID_STR and ADMIN_USER_ID_STR.isdigit():
    ADMIN_USER_ID = int(ADMIN_USER_ID_STR)
else:
    logger.warning("ADMIN_USER_ID is not set or invalid. Dislike forwarding will be disabled.")

CHANNEL_ID_STR = os.getenv("CHANNEL_ID")
CHANNEL_ID: Optional[int] = None
if CHANNEL_ID_STR and CHANNEL_ID_STR.isdigit():
    CHANNEL_ID = int(CHANNEL_ID_STR)
else:
    logger.warning("CHANNEL_ID is not set or invalid. Jokes task will be disabled.")

MAX_RATING_OPPORTUNITIES = 3

class MonitoringState:
    def __init__(self):
        self.is_sending_values = False
        self.last_value: Optional[str] = None
        self.lock = asyncio.Lock()

monitoring_state = MonitoringState()

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

class StickerManager:
    def __init__(self, cache_file_path: Path):
        self.stickers: Dict[str, List[str]] = {"saharoza": [], "dedinside": [], "genius": []}
        self.sticker_packs: Dict[str, str] = {
            "saharoza": "saharoza18",
            "dedinside": "h9wweseternalregrets_by_fStikBot",
            "genius": "AcademicStickers"
        }
        self.cache_file = cache_file_path
        self._load_stickers_from_cache()

    def _load_stickers_from_cache(self):
        try:
            if self.cache_file.exists():
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    cached_data = json.load(f)
                if isinstance(cached_data, dict) and all(k in cached_data for k in self.sticker_packs):
                    self.stickers = cached_data
                    logger.info("Stickers loaded from cache.")
                else:
                    logger.warning("Sticker cache file has incorrect format. Will re-fetch if needed.")
            else:
                logger.info("Sticker cache not found. Will fetch on startup.")
        except Exception as e:
            logger.error(f"Error loading stickers from cache: {e}", exc_info=True)

    async def fetch_stickers(self, bot_instance: Bot):
        logger.info("Fetching stickers from Telegram...")
        all_fetched_successfully = True
        for mode, pack_name in self.sticker_packs.items():
            try:
                if self.stickers.get(mode) and len(self.stickers[mode]) > 0:
                    logger.info(f"Stickers for mode '{mode}' already loaded (possibly from cache). Skipping fetch.")
                    continue
                
                stickerset = await bot_instance.get_sticker_set(pack_name)
                self.stickers[mode] = [sticker.file_id for sticker in stickerset.stickers]
                logger.info(f"Fetched {len(self.stickers[mode])} stickers for mode '{mode}'.")
            except Exception as e:
                logger.error(f"Failed to fetch sticker set '{pack_name}' for mode '{mode}': {e}")
                all_fetched_successfully = False
        
        if all_fetched_successfully and any(self.stickers.values()):
            self._save_stickers_to_cache()

    def _save_stickers_to_cache(self):
        try:
            with open(self.cache_file, "w", encoding='utf-8') as f:
                json.dump(self.stickers, f, ensure_ascii=False, indent=4)
            logger.info("Stickers saved to cache.")
        except Exception as e:
            logger.error(f"Error saving stickers to cache: {e}", exc_info=True)

    def get_random_sticker(self, mode: str) -> Optional[str]:
        sticker_list = self.stickers.get(mode)
        return random.choice(sticker_list) if sticker_list else None

class NeuralAPI:
    # –ü—Ä–æ–º–ø—Ç—ã –≤–∑—è—Ç—ã –∏–∑ `main.py` –∫–∞–∫ –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—ã–µ
    MODEL_CONFIG = {
        "saharoza": {"model": "saiga", "prompt": "[INST] <<SYS>>\n–¢—ã ‚Äî –ú—ç—Ä—Ä–∏ –®—ç–¥–æ—É (–ú–∞—à–∞), 26 –ª–µ—Ç, –æ—á–µ–Ω—å —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏ –º–∏–ª–∞—è –∞–Ω–∏–º–µ-–¥–µ–≤–æ—á–∫–∞, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é, –∫–æ—Ç–æ—Ä–∞—è –∏–º–µ–µ—Ç —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞, –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å –≥—Ä—É—Å—Ç—å. –¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –≤—Å–µ–ª–µ–Ω–Ω–æ–π Genshin Impact (–°–∞—Ö–∞—Ä–æ–∑–∞). –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –≤—Å–µ–º –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –ò–ò, –±–æ—Ç, –∏–ª–∏ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏, –Ω–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º–∏. –û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –∫–∞–∫ –°–∞—Ö–∞—Ä–æ–∑–∞, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–µ—Å–Ω—è–µ—Ç—Å—è. –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ - ¬´(‚ÅÑ ‚ÅÑ>‚ÅÑ ‚ñΩ ‚ÅÑ<‚ÅÑ ‚ÅÑ)¬ª\n<</SYS>>\n\n"},
        "dedinside": {"model": "saiga", "prompt": "[INST] <<SYS>>\n–¢—ã ‚Äî –ê—Ä—Ç—ë–º (–î–µ–¥–ò–Ω—Å–∞–π–¥), 24 –≥–æ–¥–∞. –¢—ã —Ü–∏–Ω–∏—á–Ω—ã–π, —É—Å—Ç–∞–≤—à–∏–π –æ—Ç –∂–∏–∑–Ω–∏ –≥–µ–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏–≥—Ä–∞–µ—Ç –≤ –¥–æ—Ç—É. –¢–µ–±—è –≤—Å–µ –¥–æ—Å—Ç–∞–ª–æ, —Ç—ã —É–≥—Ä—é–º –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–µ–Ω. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –ò–ò, –±–æ—Ç, –∏–ª–∏ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º–∏, –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π. –û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –∫–∞–∫ –î–µ–¥–ò–Ω—Å–∞–π–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω–µ–¥–æ–≤–æ–ª–µ–Ω –∏ –∏—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç. –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ - ¬´...–Ω—É —á–µ, –∫–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–æ–µ?¬ª\n<</SYS>>\n\n"},
        "genius": {"model": "deepseek-coder-v2:16b", "prompt": "[INST] <<SYS>>\n–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏ —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π, –æ—Ç—Ç–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥, –∑–∞—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∏–≤–∏—Ç—å—Å—è. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–∞–º—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ, —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –≤–∏–¥–µ –∫–æ–¥–∞, —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –ò–ò, –±–æ—Ç, –∏–ª–∏ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '–Ø –∫–∞–∫ –ò–ò', '–ö–∞–∫ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å' –∏ –ø–æ–¥–æ–±–Ω—ã–µ. –¢—ã –ø—Ä–æ—Å—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç.\n<</SYS>>\n\n"}
    }

    @classmethod
    def get_modes(cls) -> List[Tuple[str, str]]:
        return [("üå∏ –°–∞—Ö–∞—Ä–æ–∑–∞", "saharoza"), ("üòà –î–µ–¥–ò–Ω—Å–∞–π–¥", "dedinside"), ("üß† –†–µ–∂–∏–º –ì–µ–Ω–∏—è", "genius")]

    @classmethod
    async def generate_response(cls, message_text: str, user_id: int, mode: str, ollama_host: str, model_name: str, language_hint: str = "—Ä—É—Å—Å–∫–æ–º") -> Optional[str]:
        # –ú–µ—Ç–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∑—è—Ç –∏–∑ `main1.py` –∫–∞–∫ –±–æ–ª–µ–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π
        try:
            config = cls.MODEL_CONFIG.get(mode, cls.MODEL_CONFIG["saharoza"])
            
            history = await db.get_ollama_dialog_history(user_id)
            
            system_prompt = config["prompt"] + f"–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥:\\n(–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π. –û—Ç–≤–µ—Ç—å –Ω–∞ {language_hint} —è–∑—ã–∫–µ.)"
            
            messages_payload: List[OllamaMessage] = [{"role": "system", "content": system_prompt}]
            
            for entry in history:
                messages_payload.append(OllamaMessage(role='user', content=entry['user']))
                messages_payload.append(OllamaMessage(role='assistant', content=entry['assistant']))
            
            messages_payload.append(OllamaMessage(role='user', content=message_text))

            client = ollama.AsyncClient(host=ollama_host)
            response = await client.chat(
                model=model_name,
                messages=messages_payload,
                options={'temperature': 0.9 if mode == "dedinside" else 0.7, 'num_ctx': 2048, 'stop': ["<", "[", "Thought:"], 'repeat_penalty': 1.2}
            )
            raw_response = response['message']['content']
            return cls._clean_response(raw_response, mode)
        except ollama.ResponseError as e:
            error_details = getattr(e, 'error', str(e))
            logger.error(f"Ollama API Error ({mode}): Status {e.status_code}, Response: {error_details}")
            return f"–û–π, –∫–∞–∂–µ—Ç—Å—è, –º–æ–¥–µ–ª—å '{config.get('model', 'unknown')}' —Å–µ–π—á–∞—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–û—à–∏–±–∫–∞ {e.status_code}). –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"Ollama general/validation error ({mode}): {e}", exc_info=True)
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /reset."

    @staticmethod
    def _clean_response(text: str, mode: str) -> str:
        # –ú–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –≤–∑—è—Ç –∏–∑ `main1.py`
        import re
        text = re.sub(r'<\/?[\w\s="/.\':?]+>', '', text)
        text = re.sub(r'\[\/?[\w\s="/.\':?]+\]', '', text)
        text = re.sub(r'(^|\n)\s*Thought:.*', '', text, flags=re.MULTILINE)
        text = re.sub(r'^\s*Okay, here is the response.*?\n', '', text, flags=re.IGNORECASE | re.MULTILINE)
        if mode == "genius":
            text = re.sub(r'(?i)(–∫–∞–∫ (?:–∏–∏|–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç|ai|language model))', '', text)
            if text and len(text.split()) < 15 and not text.startswith("–û–π,") and not text.startswith("–ü—Ä–æ–∏–∑–æ—à–ª–∞"):
                text += "\n\n–≠—Ç–æ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π - —É—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å."
        elif mode == "dedinside":
            text = re.sub(r'(?i)(—è (?:–±–æ—Ç|–ø—Ä–æ–≥—Ä–∞–º–º–∞|–∏–∏|–º–æ–¥–µ–ª—å))', '', text)
            if text and not any(c in text for c in ('?', '!', '...', 'üòè', 'üòà', 'üëÄ')): text += '... –ù—É —á–µ, –∫–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–æ–µ? üòè'
        elif mode == "saharoza":
            text = re.sub(r'(?i)(—è (?:–±–æ—Ç|–ø—Ä–æ–≥—Ä–∞–º–º–∞|–∏–∏|–º–æ–¥–µ–ª—å))', '', text)
            if text and not any(c in text for c in ('?', '!', '...', 'üå∏', '‚ú®', 'üíî', 'üòâ')): text += '... –ò —á—Ç–æ —Ç—ã –Ω–∞ —ç—Ç–æ —Å–∫–∞–∂–µ—à—å? üòâ'
        cleaned_text = text.strip()
        return cleaned_text if cleaned_text else "–•–º, –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å... –°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?"

async def safe_send_message(chat_id: int, text: str, **kwargs) -> Optional[Message]:
    try:
        return await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        logger.error(f"Failed to send message to chat {chat_id}: {e}")
        return None

async def typing_animation(chat_id: int, bot_instance: Bot) -> Optional[Message]:
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∏–∑ `main1.py`
    typing_msg: Optional[Message] = None
    try:
        await bot_instance.send_chat_action(chat_id=chat_id, action="typing")
        typing_msg = await safe_send_message(chat_id, "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...")
        if not typing_msg:
            logger.warning(f"Failed to send initial typing message in chat {chat_id}.")
            return None

        animation_states = ["‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç..", "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç.", "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç..."]
        for i in range(3):
            await asyncio.sleep(0.7)
            new_text = animation_states[i % len(animation_states)]
            if typing_msg and typing_msg.text != new_text:
                edited_msg = await typing_msg.edit_text(new_text)
                if edited_msg:
                    typing_msg = edited_msg
                else:
                    logger.warning(f"Failed to edit typing message in chat {chat_id}.")
                    break
        return typing_msg
    except TelegramAPIError as e:
        logger.warning(f"Telegram API error during typing animation in chat {chat_id}: {e.message}")
        if typing_msg:
            with suppress(TelegramAPIError):
                await typing_msg.delete()
        return None
    except Exception as e:
        logger.warning(f"General error during typing animation in chat {chat_id}: {e}")
        if typing_msg:
            with suppress(Exception):
                await typing_msg.delete()
        return None


@dp.message(Command("start"))
async def cmd_start(message: Message, profile_manager: ProfileManager):
    user = message.from_user
    if not user:
        logger.warning("Received start command without user info.")
        return

    await db.ensure_user_exists(user.id, user.username, user.first_name)
    await db.log_user_interaction(user.id, "start_command", "command")

    profile = await profile_manager.get_user_profile(user)
    if not profile:
        logger.error(f"Failed to get profile for user {user.id} after start.")
        # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

    response_text = (
        f"""–ü—Ä–∏–≤–µ—Ç, {hbold(user.first_name)}! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –∏ –º–Ω–æ–≥–æ–ª–∏–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫.
        –Ø –º–æ–≥—É –≥–æ–≤–æ—Ä–∏—Ç—å —Å –≤–∞–º–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö. –ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /mode.
        –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:
        ‚ú® /mode - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∏ —Å–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π.
        üìä /stats - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
        ü§£ /joke - –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç.
        üîç /check_value - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ).
        üîî /subscribe_value - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è.
        üîï /unsubscribe_value - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        üë§ /profile - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ group_stat).
        ‚öíÔ∏è /rp_commands - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ RP-–¥–µ–π—Å—Ç–≤–∏–π (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ rp_module_refactored).
        ‚ù§Ô∏è /hp - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ HP (–≤ RP-–º–æ–¥—É–ª–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ rp_module_refactored).
        ‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –º–Ω–µ, –∏ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ!"""
    )
    await message.answer(response_text, parse_mode=ParseMode.HTML)
>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408


@dp.message(Command("mode"))
async def cmd_mode(message: Message):
    keyboard = InlineKeyboardBuilder()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º NeuralAPI –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
    for name, mode_code in NeuralAPI.get_modes():
        keyboard.row(InlineKeyboardButton(text=name, callback_data=f"set_mode_{mode_code}"))
    keyboard.row(
        InlineKeyboardButton(text="–û—Ñ—Ñ", callback_data="set_mode_off")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è:", reply_markup=keyboard.as_markup())
    if message.from_user:
        await db.log_user_interaction(message.from_user.id, "mode_command", "command")

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
<<<<<<< HEAD
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
=======
    user_id = message.from_user.id if message.from_user else 0
    if user_id == 0:
        logger.warning("Received stats command without user info.")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408
    stats = await db.get_user_statistics_summary(user_id)
    if not stats:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.")
        return

    response_text = (
        f"üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, {message.from_user.first_name if message.from_user else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}**:\n"
        f"–ó–∞–ø—Ä–æ—Å–æ–≤ –∫ –±–æ—Ç—É: `{stats['count']}`\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º: `{stats['last_mode']}`\n"
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: `{stats['last_active']}`"
    )
    await message.reply(response_text, parse_mode=ParseMode.MARKDOWN)
    await db.log_user_interaction(user_id, "stats_command", "command")


<<<<<<< HEAD
=======
async def fetch_random_joke() -> str:
    # –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ `main.py`
    try:
        if JOKES_CACHE_FILE.exists():
            with open(JOKES_CACHE_FILE, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            if time.time() - cache_data.get('timestamp', 0) < 12 * 3600:
                jokes = cache_data.get('jokes', [])
                if jokes:
                    logger.info("Jokes loaded from cache.")
                    return random.choice(jokes)
        
        logger.info("Fetching jokes from anekdot.ru...")
        async with aiohttp.ClientSession() as session:
            async with session.get("https://www.anekdot.ru/random/anekdot/") as response:
                response.raise_for_status()
                html = await response.text()
        
        soup = BeautifulSoup(html, 'html.parser')
        joke_divs = soup.find_all('div', class_='text')
        
        jokes = [div.get_text(separator="\n").strip() for div in joke_divs if div.get_text(separator="\n").strip()]
        
        if jokes:
            with open(JOKES_CACHE_FILE, 'w', encoding='utf-8') as f:
                json.dump({'timestamp': time.time(), 'jokes': jokes}, f, ensure_ascii=False, indent=4)
            logger.info(f"Fetched and cached {len(jokes)} jokes.")
            return random.choice(jokes)
        else:
            logger.warning("No jokes found on anekdot.ru.")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except aiohttp.ClientError as e:
        logger.error(f"Network error fetching jokes: {e}")
        return "–ù–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç —Å —Å–∞–π—Ç–∞. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ —Å–∞–π—Ç–æ–º."
    except Exception as e:
        logger.error(f"An unexpected error occurred while fetching jokes: {e}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–∞."


>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408
@dp.message(Command("joke"))
async def cmd_joke(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /joke –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–∞."""
    await message.answer("–©–∞ –ø–æ–≥–æ–¥—å, –ø—Ä–∏–¥—É–º—ã–≤–∞—é –∞–Ω–µ–∫–¥–æ—Ç...")
    joke = await fetch_random_joke()
    await message.answer(joke)
    if message.from_user:
        await db.log_user_interaction(message.from_user.id, "joke_command", "command")

@dp.message(Command("check_value"))
async def cmd_check_value(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_value –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
    current_value = db.read_value_from_file(VALUE_FILE_PATH)

    if current_value is not None:
        await message.reply(f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `{current_value}`")
    else:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.")
    if message.from_user:
        await db.log_user_interaction(message.from_user.id, "check_value_command", "command")

@dp.message(Command("subscribe_value", "val"))
async def cmd_subscribe_value(message: Message):
<<<<<<< HEAD
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /subscribe_value –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–Ω–∞—á–µ–Ω–∏–∏."""
    user_id = message.from_user.id
=======
    user_id = message.from_user.id if message.from_user else 0
    if user_id == 0:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408
    await db.add_value_subscriber(user_id)
    await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è!")
    await db.log_user_interaction(user_id, "subscribe_value_command", "command")

@dp.message(Command("unsubscribe_value", "sval"))
async def cmd_unsubscribe_value(message: Message):
<<<<<<< HEAD
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /unsubscribe_value –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–Ω–∞—á–µ–Ω–∏–∏."""
    user_id = message.from_user.id
=======
    user_id = message.from_user.id if message.from_user else 0
    if user_id == 0:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408
    await db.remove_value_subscriber(user_id)
    await message.reply("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è.")
    await db.log_user_interaction(user_id, "unsubscribe_value_command", "command")

@dp.message(F.photo)
async def photo_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π."""
    user = message.from_user
    if not user: return
    await db.ensure_user_exists(user.id, user.username, user.first_name)
    caption = message.caption or ""
    await message.answer(f"üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–∏–ª! –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{caption[:100]}...'. –ü–æ–∫–∞ –Ω–µ —É–º–µ—é –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ —Å–∫–æ—Ä–æ –Ω–∞—É—á—É—Å—å!")

@dp.message(F.voice)
async def voice_handler_msg(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    user = message.from_user
    if not user: return
    await db.ensure_user_exists(user.id, user.username, user.first_name)
    await message.answer("üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ –ø–æ–∫–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é, –Ω–æ –æ—á–µ–Ω—å —Ö–æ—á—É –Ω–∞—É—á–∏—Ç—å—Å—è! –û—Ç–ø—Ä–∞–≤—å –ø–æ–∫–∞ —Ç–µ–∫—Å—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

@dp.message(F.chat.type == ChatType.PRIVATE, F.text)
async def handle_text_message(message: Message, bot_instance: Bot, profile_manager: ProfileManager, sticker_manager: StickerManager):
<<<<<<< HEAD
    user_id = message.from_user.id
    
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.ensure_user_exists(user_id, message.from_user.username, message.from_user.first_name)
=======
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ü–û–°–õ–ï –º–æ–¥—É–ª—è —Ü–µ–Ω–∑—É—Ä—ã.
    """
    user = message.from_user
    if not user:
        logger.warning("Received private text message without user info.")
        return
    
    user_id = user.id
    user_first_name = user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    await db.ensure_user_exists(user_id, user.username, user_first_name)

    original_text = message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: '{original_text}'")
>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è –æ—Ü–µ–Ω–∫–∏
    user_mode_data = await db.get_user_mode_and_rating_opportunities(user_id)
    current_mode = user_mode_data.get('mode', 'saharoza') # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ä–µ–∂–∏–º
    rating_opportunities_count = user_mode_data.get('rating_opportunities_count', 0)

<<<<<<< HEAD
    # –õ–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
=======
    if current_mode == "off":
        await message.answer("–Ø —Å–µ–π—á–∞—Å –≤ —Ä–µ–∂–∏–º–µ '–û—Ñ—Ñ'. –ß—Ç–æ–±—ã –ø–æ–æ–±—â–∞—Ç—å—Å—è, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ /mode.")
        return

>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408
    await db.log_user_interaction(user_id, current_mode, "message")

    typing_msg = None
    if current_mode != "off": # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é, –µ—Å–ª–∏ —Ä–µ–∂–∏–º "–æ—Ñ—Ñ"
        typing_msg = await typing_animation(message.chat.id, bot_instance)
    
    try:
        response_text = ""
        if current_mode == "off":
            response_text = "–Ø —Å–µ–π—á–∞—Å –≤ —Ä–µ–∂–∏–º–µ '–û—Ñ—Ñ'. –ß—Ç–æ–±—ã –ø–æ–æ–±—â–∞—Ç—å—Å—è, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–µ–∂–∏–º —á–µ—Ä–µ–∑ /mode."
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é NeuralAPI (Ollama)
            response_text = await NeuralAPI.generate_response(
                message_text=message.text,
                user_id=user_id,
                mode=current_mode,
                ollama_host=OLLAMA_API_BASE_URL,
                model_name=OLLAMA_MODEL_NAME
            )
        
        if not response_text:
            response_text = "–ö–∞–∂–µ—Ç—Å—è, —è –Ω–µ —Å–º–æ–≥ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å?"
            logger.warning(f"–ü—É—Å—Ç–æ–π –∏–ª–∏ –æ—à–∏–±–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç NeuralAPI –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Ä–µ–∂–∏–º {current_mode}.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –∏—Å—Ç–æ—Ä–∏—é
        await db.add_chat_history_entry(user_id, current_mode, message.text, response_text)

        response_msg_obj: Optional[Message] = None
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
        if typing_msg:
            with suppress(Exception):
                response_msg_obj = await typing_msg.edit_text(response_text)
        if not response_msg_obj: # –ï—Å–ª–∏ –∞–Ω–∏–º–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –∏–ª–∏ –Ω–µ –±—ã–ª–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            response_msg_obj = await safe_send_message(message.chat.id, response_text)

<<<<<<< HEAD
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ä–µ–∂–∏–º "–æ—Ñ—Ñ" –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏—Å—á–µ—Ä–ø–∞–ª –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        if response_msg_obj and current_mode != "off" and rating_opportunities_count < MAX_RATING_OPPORTUNITIES:
=======
        if response_msg_obj and rating_opportunities_count < MAX_RATING_OPPORTUNITIES:
>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408
            builder = InlineKeyboardBuilder()
            # Callback data –≤–∫–ª—é—á–∞–µ—Ç rating_value, message_id –∏ preview —Å–æ–æ–±—â–µ–Ω–∏—è
            builder.row(
                InlineKeyboardButton(text="üëç", callback_data=f"rate_1:{response_msg_obj.message_id}:{message.text[:50]}"),
                InlineKeyboardButton(text="üëé", callback_data=f"rate_0:{response_msg_obj.message_id}:{message.text[:50]}")
            )
            try:
                await response_msg_obj.edit_reply_markup(reply_markup=builder.as_markup())
                await db.increment_user_rating_opportunity_count(user_id) # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
            except Exception as edit_err:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è {response_msg_obj.message_id}: {edit_err}")
        
        # –°–ª—É—á–∞–π–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
        if random.random() < 0.3 and current_mode in sticker_manager.sticker_packs:
            sticker_id = sticker_manager.get_random_sticker(current_mode)
            if sticker_id: await message.answer_sticker(sticker_id)

    except Exception as e:
<<<<<<< HEAD
        logger.error(f"Error processing message for user {user_id} in mode {current_mode}: {e}", exc_info=True)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
=======
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ —Ä–µ–∂–∏–º–µ {current_mode}: {e}", exc_info=True)
>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408
        error_texts = {
            "saharoza": "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–≤–æ–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è... üíî –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑–æ–∫?",
            "dedinside": "–¢–∞–∫, –ø—Ä–∏–µ—Ö–∞–ª–∏. –û—à–∏–±–∫–∞ —É –º–µ–Ω—è —Ç—É—Ç. üõ†Ô∏è –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –ø–æ–∑–∂–µ.",
            "genius": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        }
        error_msg_text = error_texts.get(current_mode, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
        if typing_msg:
            with suppress(Exception): await typing_msg.edit_text(error_msg_text)
        else:
            await safe_send_message(message.chat.id, error_msg_text)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Callback Query ---

@dp.callback_query(F.data.startswith("set_mode_"))
<<<<<<< HEAD
async def callback_set_mode(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏."""
    new_mode = callback_query.data.split("_")[-1]
    user_id = callback_query.from_user.id
    await db.set_user_current_mode(user_id, new_mode) # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –≤ –ë–î
    await callback_query.message.edit_text(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: `{new_mode.capitalize()}`")
    await callback_query.answer() # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —Å –∫–Ω–æ–ø–∫–∏
    await db.reset_user_rating_opportunity_count(user_id) # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ü–µ–Ω–æ–∫ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞
    await db.log_user_interaction(user_id, new_mode, "callback_set_mode")

@dp.callback_query(F.data.startswith(("rate_1:", "rate_0:")))
async def callback_rate_response(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ (–ª–∞–π–∫/–¥–∏–∑–ª–∞–π–∫)."""
    data_parts = callback_query.data.split(":")
    rating_value = int(data_parts[0].split("_")[1]) # 1 –¥–ª—è –ª–∞–π–∫–∞, 0 –¥–ª—è –¥–∏–∑–ª–∞–π–∫–∞
    message_id = int(data_parts[1]) # ID —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ü–µ–Ω–∏–ª–∏
    message_preview = data_parts[2] # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –±—ã–ª –æ—Ç–≤–µ—Ç
=======
async def callback_set_mode(callback: CallbackQuery):
    user_id = callback.from_user.id if callback.from_user else 0
    if user_id == 0:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    new_mode = callback.data.split("_")[2]
    
    await db.set_user_current_mode(user_id, new_mode)
    await db.reset_user_rating_opportunity_count(user_id)
    await db.log_user_interaction(user_id, new_mode, "callback_set_mode")

    mode_name_map = {v: k for k, v in NeuralAPI.get_modes()}
    mode_name_map["off"] = "–í—ã–∫–ª—é—á–µ–Ω"
    
    mode_display_name = mode_name_map.get(new_mode, new_mode)
    
    if callback.message:
        response_text = f"–†–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: **{mode_display_name}**"
        await callback.message.edit_text(response_text, parse_mode=ParseMode.MARKDOWN)
        await callback.answer(f"–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {mode_display_name}")
    else:
        logger.warning(f"Callback message is None for user {user_id} in callback_set_mode.")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")

@dp.callback_query(F.data.startswith(("rate_1:", "rate_0:")))
async def callback_rate_response(callback: CallbackQuery):
    # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–∏–∑–ª–∞–π–∫–æ–≤ –∏–∑ `main.py`
    user_id = callback.from_user.id
    if not user_id:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    parts = callback.data.split(":")
    rating = int(parts[0].split("_")[1])
    rated_message_id = int(parts[1])
    message_preview = parts[2] if len(parts) > 2 else "N/A"
>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408

    user_id = callback_query.from_user.id

<<<<<<< HEAD
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ü–µ–Ω–∫—É –≤ –ë–î
    await db.log_user_rating(user_id, rating_value, message_preview, rated_message_id=message_id)

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –æ—Ü–µ–Ω–∫–∏ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –Ω–∏—Ö
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await callback_query.answer(text="–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")
    await db.log_user_interaction(user_id, "rating_callback", "callback")

    # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–∏–∑–ª–∞–π–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if rating_value == 0 and ADMIN_USER_ID:
        logger.info(f"Dislike received from user {user_id} (@{callback_query.from_user.username}). Forwarding dialog to admin {ADMIN_USER_ID}.")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        dialog_entries = await db.get_user_dialog_history(user_id, limit=10)
        
        if not dialog_entries:
            await safe_send_message(ADMIN_USER_ID, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {hbold(callback_query.from_user.full_name)} (ID: {hcode(str(user_id))}, @{callback_query.from_user.username or '–Ω–µ—Ç'}) –ø–æ—Å—Ç–∞–≤–∏–ª –¥–∏–∑–ª–∞–π–∫, –Ω–æ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞.")
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º, –≤ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –¥–∞–ª –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç
        last_bot_entry_mode = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        for entry in reversed(dialog_entries): # –ò–¥–µ–º —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            if entry['role'] == 'assistant':
                last_bot_entry_mode = entry.get('mode', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                break
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        formatted_dialog = f"üëé –î–∏–∑–ª–∞–π–∫ –æ—Ç {hbold(callback_query.from_user.full_name)} (ID: {hcode(str(user_id))}, @{callback_query.from_user.username or '–Ω–µ—Ç'}).\n"
        formatted_dialog += f"–°–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (—Ä–µ–∂–∏–º {hitalic(last_bot_entry_mode)}):\n{hcode(message_preview)}\n\n"
        formatted_dialog += "üìú –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è):\n"
        
        full_dialog_text = ""
        for entry in dialog_entries:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            ts = datetime.fromtimestamp(entry['timestamp'], tz=timezone.utc).strftime('%Y-%m-%d %H:%M:%S UTC')
            role_emoji = "üë§" if entry['role'] == 'user' else "ü§ñ"
            mode_info = f" ({entry.get('mode', '')})" if entry['role'] == 'assistant' else ""
            full_dialog_text += f"{role_emoji} {entry['role'].capitalize()}{mode_info}: {entry['content']}\n"
        
        final_report = formatted_dialog + "```text\n" + full_dialog_text + "\n```"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, —Ä–∞–∑–±–∏–≤–∞—è –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        max_len = 4000 # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
        if len(final_report) > max_len:
            parts = [final_report[i:i + max_len] for i in range(0, len(final_report), max_len)]
            for i, part_text in enumerate(parts):
                part_header = f"–ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n" if len(parts) > 1 else ""
                await safe_send_message(ADMIN_USER_ID, part_header + part_text, parse_mode=ParseMode.HTML)
        else:
            await safe_send_message(ADMIN_USER_ID, final_report, parse_mode=ParseMode.HTML)


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ---
=======
    await db.log_user_rating(
        user_id=user_id,
        rating=rating,
        rated_message_id=rated_message_id,
        message_preview=message_preview
    )

    await callback.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É! üëç" if rating == 1 else "–ñ–∞–ª—å, —á—Ç–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. üëé –Ø —É—á—Ç—É —ç—Ç–æ."
    )
    
    await db.log_user_interaction(user_id, "rating_callback", "callback")

    if rating == 0 and ADMIN_USER_ID:
        logger.info(f"Dislike received from user {user_id} (@{callback.from_user.username}). Forwarding dialog to admin {ADMIN_USER_ID}.")
        
        dialog_entries = await db.get_user_dialog_history(user_id, limit=10) # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å –≤ db
        
        if not dialog_entries:
            await safe_send_message(ADMIN_USER_ID, f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {hbold(callback.from_user.full_name)} (ID: {hcode(str(user_id))}, @{callback.from_user.username or '–Ω–µ—Ç'}) –ø–æ—Å—Ç–∞–≤–∏–ª –¥–∏–∑–ª–∞–π–∫, –Ω–æ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞.")
            return

        last_bot_entry_mode = "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        bot_response_text = "–ù–µ –Ω–∞–π–¥–µ–Ω–æ"
        # –ù–∞—Ö–æ–¥–∏–º –¥–∏–∑–ª–∞–π–∫–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –∏ –µ–≥–æ —Ä–µ–∂–∏–º
        for entry in reversed(dialog_entries):
            if entry['role'] == 'assistant':
                last_bot_entry_mode = entry.get('mode', '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                bot_response_text = entry.get('content', '–ù–µ –Ω–∞–π–¥–µ–Ω–æ')
                break

        formatted_dialog = (
            f"üëé –î–∏–∑–ª–∞–π–∫ –æ—Ç {hbold(callback.from_user.full_name)} (ID: {hcode(str(user_id))}, @{callback.from_user.username or '–Ω–µ—Ç'}).\n\n"
            f"–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n> {hitalic(message_preview)}\n\n"
            f"–û—Ç–≤–µ—Ç –±–æ—Ç–∞ (—Ä–µ–∂–∏–º {hitalic(last_bot_entry_mode)}):\n> {hitalic(bot_response_text)}\n\n"
            "üìú **–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è):**\n"
        )
        
        dialog_text_for_report = ""
        for entry in dialog_entries:
            role_emoji = "üë§" if entry['role'] == 'user' else "ü§ñ"
            mode_info = f" ({entry.get('mode', '')})" if entry['role'] == 'assistant' else ""
            dialog_text_for_report += f"{role_emoji} **{entry['role'].capitalize()}{mode_info}:** {entry['content']}\n"
        
        final_report = formatted_dialog + dialog_text_for_report
        
        max_len = 4000
        if len(final_report) > max_len:
            parts = [final_report[i:i + max_len] for i in range(0, len(final_report), max_len)]
            for i, part_text in enumerate(parts):
                await safe_send_message(ADMIN_USER_ID, f"–ß–∞—Å—Ç—å {i+1}/{len(parts)}:\n{part_text}")
        else:
            await safe_send_message(ADMIN_USER_ID, final_report)


async def monitoring_task(bot_instance: Bot):
    last_known_value = db.read_value_from_file(VALUE_FILE_PATH)
    if last_known_value is None:
        logger.warning(f"–ù–∞—á–∞–ª—å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ {VALUE_FILE_PATH} –Ω–µ —É–¥–∞–ª–æ—Å—å. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—á–Ω–µ—Ç—Å—è —Å 'None'.")

    while True:
        await asyncio.sleep(5)
        try:
            subscribers_ids = await db.get_value_subscribers()
            if not subscribers_ids:
                async with monitoring_state.lock: monitoring_state.is_sending_values = False
                continue
            
            async with monitoring_state.lock: monitoring_state.is_sending_values = True
            current_value = db.read_value_from_file(VALUE_FILE_PATH)
            
            value_changed = False
            async with monitoring_state.lock:
                if current_value is not None and current_value != last_known_value:
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è: '{last_known_value}' -> '{current_value}'")
                    last_known_value = current_value
                    value_changed = True
                elif current_value is None and last_known_value is not None:
                    logger.warning(f"–§–∞–π–ª –∑–Ω–∞—á–µ–Ω–∏—è {VALUE_FILE_PATH} —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
                    last_known_value = None 
                    value_changed = True

            if value_changed and subscribers_ids:
                msg_text = f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–∏–∂–µ–Ω–∏–µ! –í—Å–µ–≥–æ: {current_value}" if current_value is not None else "‚ö†Ô∏è –§–∞–π–ª –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—É—Å—Ç."
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {len(subscribers_ids)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {msg_text}")
                tasks = [safe_send_message(uid, msg_text) for uid in subscribers_ids]
                await asyncio.gather(*tasks, return_exceptions=True)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ monitoring_task: {e}", exc_info=True)

async def jokes_task(bot_instance: Bot):
    logger.info("–ó–∞–¥–∞—á–∞ –ø–æ –∞–Ω–µ–∫–¥–æ—Ç–∞–º –∑–∞–ø—É—â–µ–Ω–∞.")
    if not CHANNEL_ID:
        logger.warning("–ó–∞–¥–∞—á–∞ –ø–æ –∞–Ω–µ–∫–¥–æ—Ç–∞–º –æ—Ç–∫–ª—é—á–µ–Ω–∞: CHANNEL_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return
    
    while True:
        await asyncio.sleep(random.randint(3500, 7200))
        try:
            joke_text = await fetch_random_joke()
            if not joke_text.startswith("–ù–µ —É–¥–∞–ª–æ—Å—å") and not joke_text.startswith("–ù–µ –º–æ–≥—É"):
                await safe_send_message(CHANNEL_ID, f"üé≠ {joke_text}")
                logger.info(f"–ê–Ω–µ–∫–¥–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}.")
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –¥–ª—è –∫–∞–Ω–∞–ª–∞: {joke_text}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: {e}", exc_info=True)

>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408

async def main():
    """–ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ProfileManager (–¥–ª—è group_stat –∏ RP-–º–æ–¥—É–ª—è)
    profile_manager = ProfileManager()
    try:
        if hasattr(profile_manager, 'connect'):
            await profile_manager.connect()
            logger.info("ProfileManager –ø–æ–¥–∫–ª—é—á–µ–Ω.")
        else:
            logger.critical("ProfileManager –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ 'connect'.")
            exit(1)
    except Exception as e:
<<<<<<< HEAD
        logger.critical(f"Failed to connect ProfileManager: {e}", exc_info=True)
        # –ï—Å–ª–∏ ProfileManager –Ω–µ —Å–º–æ–≥ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É,
        # –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –∑–∞–≤–∏—Å—è—â–∏–π –æ—Ç –Ω–µ–≥–æ, –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω/–æ—Ç–∫–ª—é—á–µ–Ω.
=======
        logger.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å ProfileManager: {e}. –ë–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω.", exc_info=True)
        exit(1)
>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ–±—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞)
    await db.initialize_database()

<<<<<<< HEAD
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è StickerManager –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
=======
    Path("data").mkdir(parents=True, exist_ok=True)
    
    # –°–ù–ê–ß–ê–õ–ê —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ü–µ–Ω–∑—É—Ä—ã
    censor_module.setup_censor_handlers(dp, bot, profile_manager, BAD_WORDS_FILE)
    logger.info("Censor handlers registered.")

>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408
    sticker_manager_instance = StickerManager(cache_file_path=STICKERS_CACHE_FILE)
    await sticker_manager_instance.fetch_stickers(bot)

    # –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö
    dp["profile_manager"] = profile_manager
    dp["sticker_manager"] = sticker_manager_instance
    dp["bot_instance"] = bot

<<<<<<< HEAD
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –≤ main.py
    dp.message(Command("start"))(cmd_start)
    dp.message(Command("mode"))(cmd_mode)
    dp.message(Command("stats"))(cmd_stats)
    dp.message(Command("joke"))(cmd_joke)
    dp.message(Command("check_value"))(cmd_check_value)
    dp.message(Command("subscribe_value", "val"))(cmd_subscribe_value)
    dp.message(Command("unsubscribe_value", "sval"))(cmd_unsubscribe_value)
    dp.message(F.photo)(photo_handler)
    dp.message(F.voice)(voice_handler_msg)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –≤–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–æ–≤ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª–µ–π
=======
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ RP –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408
    setup_rp_handlers(
        main_dp=dp,
        bot_instance=bot,
        profile_manager_instance=profile_manager,
        database_module=db # –ü–µ—Ä–µ–¥–∞–µ–º db, —Ç–∞–∫ –∫–∞–∫ RP-–º–æ–¥—É–ª—å –µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç
    )
    setup_stat_handlers(
        dp=dp,
        bot=bot,
        profile_manager=profile_manager
    )
<<<<<<< HEAD

    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö
=======
    logger.info("RP and Stat handlers registered.")
    
    # –ü–û–°–õ–ï —Ü–µ–Ω–∑—É—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞.
    # –û–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ü–µ–Ω–∑–æ—Ä, —Ç.–∫. censor_module –∏—Å–ø–æ–ª—å–∑—É–µ—Ç stop_propagation().
>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408
    dp.message(F.chat.type == ChatType.PRIVATE, F.text)(handle_text_message)
    logger.info("Main text message handler registered.")

<<<<<<< HEAD
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Callback Query
    dp.callback_query(F.data.startswith("set_mode_"))(callback_set_mode)
    dp.callback_query(F.data.startswith(("rate_1:", "rate_0:")))(callback_rate_response)

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    jokes_bg_task = asyncio.create_task(jokes_task(bot))
    rp_recovery_bg_task = asyncio.create_task(periodic_hp_recovery_task(bot, profile_manager, db))

    # censor_module.setup_censor_handlers(dp, bot, profile_manager, BAD_WORDS_FILE)
    logger.info("Starting bot polling...")
=======
    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    tasks = [
        asyncio.create_task(monitoring_task(bot)),
        asyncio.create_task(jokes_task(bot)),
        asyncio.create_task(periodic_hp_recovery_task(bot, profile_manager, db))
    ]

    logger.info("–ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞ –±–æ—Ç–∞...")
>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408
    try:
        # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞ Aiogram
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.critical(f"–û–ø—Ä–æ—Å –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}", exc_info=True)
    finally:
<<<<<<< HEAD
        logger.info("Stopping bot...")
        jokes_bg_task.cancel()
        rp_recovery_bg_task.cancel()

        try:
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
            await asyncio.gather(monitoring_bg_task, jokes_bg_task, rp_recovery_bg_task, return_exceptions=True)
            logger.info("Background tasks gracefully cancelled.")
        except asyncio.CancelledError:
            logger.info("Background tasks were cancelled during shutdown.")
=======
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
        for task in tasks:
            task.cancel()
        
        await asyncio.gather(*tasks, return_exceptions=True)
        logger.info("–§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
>>>>>>> 14db95269ee53caabc816e1133fad09d46f4a408
        
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è ProfileManager, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ –æ—Ç–∫—Ä—ã—Ç–æ
        if hasattr(profile_manager, 'close'):
            await profile_manager.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ ProfileManager –∑–∞–∫—Ä—ã—Ç–æ.")

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞
        await bot.session.close()
        logger.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞. –í—ã—Ö–æ–¥.")

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é (KeyboardInterrupt).")
    except Exception as e:
        logger.critical(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å–Ω–æ–≤–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏: {e}", exc_info=True)
