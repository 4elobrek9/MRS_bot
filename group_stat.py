from core.group.stat.smain import *
from core.group.stat.config import *
from core.group.stat.manager import ProfileManager
from core.group.stat.shop_config import *
import string # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç string
import time # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç time
import random # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç random
from database import add_item_to_inventory, set_user_active_background, get_user_rp_stats, update_user_rp_stats
import asyncio  # –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞
import aiosqlite  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç —Ç–æ–∂–µ –µ—Å—Ç—å
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
from urllib.parse import urlparse
# –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∏–º–ø–æ—Ä—Ç—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç:
from aiogram.enums import ChatType
from database import set_group_censor_setting, get_group_censor_setting, get_group_admins
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, BufferedInputFile
from aiogram.utils.markdown import hlink
from aiogram.enums import ParseMode # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç ParseMode
from core.group.stat.config import WorkConfig, ProfileConfig

import logging
logger = logging.getLogger(__name__)

formatter = string.Formatter()

stat_router = Router(name="stat_router")

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
from urllib.parse import urlparse

__all__ = [
    'show_profile', 
    'do_work', 
    'show_shop', 
    'show_top',
    'manage_censor',
    'show_admins', 
    'group_stats'
]

class CustomBackgroundStates(StatesGroup):
    waiting_for_url = State()

custom_bg_purchases = {}

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞
@stat_router.callback_query(F.data == "buy_bg:custom")
async def process_buy_custom_background(callback: types.CallbackQuery, profile_manager: ProfileManager, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"User {user_id} attempting to buy custom background.")

    available_backgrounds = profile_manager.get_available_backgrounds()
    bg_info = available_backgrounds.get("custom")

    if not bg_info:
        await callback.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ–Ω.", reply_markup=None)
        return

    bg_price = bg_info.get('price', 10000)
    user_lumcoins = await profile_manager.get_lumcoins(user_id)

    if user_lumcoins >= bg_price:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ
        custom_bg_purchases[user_id] = {
            "message_id": callback.message.message_id,
            "price": bg_price,
            "lumcoins_before": user_lumcoins
        }
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è URL
        await state.set_state(CustomBackgroundStates.waiting_for_url)
        
        await callback.message.edit_text(
            "üñºÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞.\n\n"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG –∏–ª–∏ GIF\n"
            "‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: 21:9 (—à–∏—Ä–æ–∫–æ—Ñ–æ—Ä–º–∞—Ç–Ω–æ–µ)\n"
            "‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1680√ó720\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
            reply_markup=None
        )
    else:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Lumcoins –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞. –ù—É–∂–Ω–æ {bg_price} Lumcoins, —É –≤–∞—Å {user_lumcoins}.",
            reply_markup=None
        )

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL
@stat_router.message(CustomBackgroundStates.waiting_for_url)
async def process_custom_bg_url(message: types.Message, profile_manager: ProfileManager, state: FSMContext, bot: Bot):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–º–µ–Ω—É
    if message.text and message.text.lower() in ["/cancel", "–æ—Ç–º–µ–Ω–∞", "cancel"]:
        await state.clear()
        if user_id in custom_bg_purchases:
            del custom_bg_purchases[user_id]
        await message.answer("‚ùå –ü–æ–∫—É–ø–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç URL
    url = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ URL
    if not re.match(r'^https?://', url):
        await message.answer("‚ùå –≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π URL. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    parsed_url = urlparse(url)
    path = parsed_url.path.lower()
    valid_extensions = ['.jpg', '.jpeg', '.png', '.gif', '.webp']
    if not any(path.endswith(ext) for ext in valid_extensions):
        await message.answer(
            "‚ùå URL –¥–æ–ª–∂–µ–Ω –≤–µ—Å—Ç–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (JPG, PNG, GIF –∏–ª–∏ WebP).\n\n"
            "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .jpg, .jpeg, .png, .gif, .webp\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ
    purchase_info = custom_bg_purchases.get(user_id)
    if not purchase_info:
        await state.clear()
        await message.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_custom_bg:{url}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_custom_bg")
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(custom_bg_url=url)
    
    await message.answer(
        f"üì∏ **–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞**\n"
        f"üîó –°—Å—ã–ª–∫–∞: {url}\n\n"
        f"üíé –¶–µ–Ω–∞: {purchase_info['price']} Lumcoins\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {purchase_info['lumcoins_before']} ‚Üí {purchase_info['lumcoins_before'] - purchase_info['price']} Lumcoins\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ –ø–æ–∫—É–ø–∫—É?",
        reply_markup=builder.as_markup(),
        disable_web_page_preview=False
    )
# –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –ø–æ–∫—É–ø–æ–∫
async def cleanup_old_purchases():
    """–û—á–∏—â–∞–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–æ–∫—É–ø–∫–∞—Ö"""
    global custom_bg_purchases
    current_time = time.time()
    # –£–¥–∞–ª—è–µ–º –ø–æ–∫—É–ø–∫–∏ —Å—Ç–∞—Ä—à–µ 1 —á–∞—Å–∞
    custom_bg_purchases = {k: v for k, v in custom_bg_purchases.items() 
                          if current_time - v.get('timestamp', 0) < 3600}


# –û–±–Ω–æ–≤–∏–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫—É–ø–∫–∏ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å timestamp
@stat_router.callback_query(F.data == "buy_bg:custom")
async def process_buy_custom_background(callback: types.CallbackQuery, profile_manager: ProfileManager, state: FSMContext):
    user_id = callback.from_user.id
    logger.info(f"User {user_id} attempting to buy custom background.")

    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∫—É–ø–∫–∏
    await cleanup_old_purchases()

    available_backgrounds = profile_manager.get_available_backgrounds()
    bg_info = available_backgrounds.get("custom")

    if not bg_info:
        await callback.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ–Ω.", reply_markup=None)
        return

    bg_price = bg_info.get('price', 10000)
    user_lumcoins = await profile_manager.get_lumcoins(user_id)

    if user_lumcoins >= bg_price:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ
        custom_bg_purchases[user_id] = {
            "message_id": callback.message.message_id,
            "price": bg_price,
            "lumcoins_before": user_lumcoins,
            "timestamp": time.time()  # –î–æ–±–∞–≤–ª—è–µ–º timestamp
        }
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è URL
        await state.set_state(CustomBackgroundStates.waiting_for_url)
        
        await callback.message.edit_text(
            "üñºÔ∏è **–ü–æ–∫—É–ø–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ñ–æ–Ω–∞.\n\n"
            "üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:\n"
            "‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG, PNG, GIF –∏–ª–∏ WebP\n"
            "‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: 21:9 (—à–∏—Ä–æ–∫–æ—Ñ–æ—Ä–º–∞—Ç–Ω–æ–µ)\n"
            "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1680√ó720 –∏–ª–∏ –≤—ã—à–µ\n\n"
            "‚ùå –°—Å—ã–ª–∫–∏ –Ω–∞ —Å–∞–π—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, Google Drive, Dropbox) –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è\n"
            "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä—è–º—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel",
            reply_markup=None
        )
    else:
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Lumcoins –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞.\n\n"
            f"–ù—É–∂–Ω–æ: {bg_price} Lumcoins\n"
            f"–£ –≤–∞—Å: {user_lumcoins} Lumcoins\n\n"
            f"–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å Lumcoins –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π '—Ä–∞–±–æ—Ç–∞—Ç—å'",
            reply_markup=None
        )

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
@stat_router.callback_query(F.data.startswith("confirm_custom_bg:"))
async def process_confirm_custom_bg(callback: types.CallbackQuery, profile_manager: ProfileManager, state: FSMContext):
    user_id = callback.from_user.id
    url = callback.data.split(":", 1)[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–∫—É–ø–∫–µ
    purchase_info = custom_bg_purchases.get(user_id)
    if not purchase_info:
        await callback.message.edit_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º Lumcoins
    await profile_manager.update_lumcoins(user_id, -purchase_info['price'])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    await add_item_to_inventory(user_id, f"custom:{user_id}", 'background')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º URL –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    async with aiosqlite.connect('profiles.db') as conn:
        await conn.execute('''
            CREATE TABLE IF NOT EXISTS custom_backgrounds (
                user_id INTEGER PRIMARY KEY,
                background_url TEXT NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await conn.execute('''
            INSERT OR REPLACE INTO custom_backgrounds (user_id, background_url)
            VALUES (?, ?)
        ''', (user_id, url))
        await conn.commit()
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ñ–æ–Ω
    await profile_manager.set_user_background(user_id, f"custom:{user_id}")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    if user_id in custom_bg_purchases:
        del custom_bg_purchases[user_id]
    
    await callback.message.edit_text(
        f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
        f"–°—Å—ã–ª–∫–∞: {url}\n"
        f"–°–ø–∏—Å–∞–Ω–æ: {purchase_info['price']} Lumcoins\n"
        f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {await profile_manager.get_lumcoins(user_id)} Lumcoins",
        disable_web_page_preview=True
    )

# –î–æ–±–∞–≤–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã
@stat_router.callback_query(F.data == "cancel_custom_bg")
async def process_cancel_custom_bg(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    
    if user_id in custom_bg_purchases:
        del custom_bg_purchases[user_id]
    
    await state.clear()
    await callback.message.edit_text("‚ùå –ü–æ–∫—É–ø–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–æ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—Å—Ç–æ–º–Ω—ã—Ö —Ñ–æ–Ω–æ–≤ –≤ —Ñ—É–Ω–∫—Ü–∏—é –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
@stat_router.callback_query(F.data.startswith("activate_bg:"))
async def process_activate_background(callback: types.CallbackQuery, profile_manager: ProfileManager):
    user_id = callback.from_user.id
    background_key_to_activate = callback.data.split(":")[1]

    logger.info(f"User {user_id} attempting to activate background: '{background_key_to_activate}'.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_backgrounds_inventory = await profile_manager.get_user_backgrounds_inventory(user_id)

    if background_key_to_activate in user_backgrounds_inventory:
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ
        if background_key_to_activate.startswith("custom:"):
            async with aiosqlite.connect('profiles.db') as conn:
                cursor = await conn.execute(
                    'SELECT background_url FROM custom_backgrounds WHERE user_id = ?',
                    (user_id,)
                )
                custom_bg = await cursor.fetchone()
                
                if not custom_bg:
                    await callback.message.edit_text(
                        "‚ùå –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
                        reply_markup=None
                    )
                    return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ ProfileManager –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ–Ω–∞
        await profile_manager.set_user_background(user_id, background_key_to_activate) 
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏
        if background_key_to_activate.startswith("custom:"):
            bg_name = "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω"
        else:
            bg_info = ShopConfig.SHOP_BACKGROUNDS.get(background_key_to_activate)
            bg_name = bg_info['name'] if bg_info else background_key_to_activate

        logger.info(f"User {user_id} successfully activated background '{bg_name}'.")
        await callback.message.edit_text(
            f"‚úÖ –§–æ–Ω '{bg_name}' —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
            reply_markup=None
        )
        
    else:
        logger.warning(f"User {user_id} tried to activate background '{background_key_to_activate}' not in inventory.")
        await callback.message.edit_text(
            "‚ùå –≠—Ç–æ–≥–æ —Ñ–æ–Ω–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.",
            reply_markup=None
        )

# –í —Ñ–∞–π–ª–µ group_stat.py
@stat_router.message(F.text.lower().startswith(("–ø—Ä–æ—Ñ–∏–ª—å", "/–ø—Ä–æ—Ñ–∏–ª—å")))
async def show_profile(message: types.Message, profile_manager: ProfileManager, bot: Bot):
    logger.info(f"DEBUG: show_profile handler entered for user {message.from_user.id} with text '{message.text}'.")
    
    await ensure_user_exists(message.from_user.id, message.from_user.username, message.from_user.first_name)

    profile = await profile_manager.get_user_profile(message.from_user)
    if not profile:
        logger.error(f"Failed to load profile for user {message.from_user.id} after /profile command.")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å!")
        return
    
    from database import get_user_rp_stats
    rp_stats = await get_user_rp_stats(message.from_user.id)
    if rp_stats:
        profile['hp'] = rp_stats.get('hp', 100)
    
    logger.debug(f"Generating profile image for user {message.from_user.id}.")
    image_bytes = await ProfileManager.generate_profile_image(profile_manager, message.from_user, profile, bot)


    
    if image_bytes is None:
        logger.error(f"Failed to generate profile image for user {message.from_user.id}.")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è!")
        return
    
    logger.info(f"Sending profile image to user {message.from_user.id}.")
    await message.reply_photo(BufferedInputFile(image_bytes.getvalue(), filename="profile.png"))


@stat_router.message(F.text.lower().startswith(("–ª–µ—á–∏—Ç—å", "/–ª–µ—á–∏—Ç—å")))
async def heal_hp(message: types.Message, profile_manager: ProfileManager):
    user_id = message.from_user.id
    logger.info(f"Received '–ª–µ—á–∏—Ç—å' command from user {user_id}.")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ HP –∏–∑ RP-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    rp_stats = await get_user_rp_stats(user_id)
    if not rp_stats:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–¥–æ—Ä–æ–≤—å–µ.")
        return

    current_hp = rp_stats.get('hp', 100)
    max_hp = ProfileConfig.MAX_HP

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ª–µ—á–µ–Ω–∏–µ
    if current_hp >= max_hp:
        await message.reply("‚ù§Ô∏è –í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ —É–∂–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å Lumcoins
    lumcoins = await profile_manager.get_lumcoins(user_id)
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ª–µ—á–µ–Ω–∏—è (10 LUM –∑–∞ 10 HP)
    hp_needed = max_hp - current_hp
    heal_amount = min(hp_needed, 10)  # –ú–∞–∫—Å–∏–º—É–º 10 HP –∑–∞ —Ä–∞–∑
    cost = 10  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å 10 LUM

    if lumcoins < cost:
        await message.reply(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Lumcoins –¥–ª—è –ª–µ—á–µ–Ω–∏—è. –ù—É–∂–Ω–æ {cost} LUM, —É –≤–∞—Å {lumcoins} LUM.")
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ª–µ—á–µ–Ω–∏–µ
    new_hp = current_hp + heal_amount
    await update_user_rp_stats(user_id, hp=new_hp)
    await profile_manager.update_lumcoins(user_id, -cost)

    await message.reply(
        f"‚úÖ –í—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ {heal_amount} HP –∑–∞ {cost} LUM!\n"
        f"‚ù§Ô∏è –¢–µ–∫—É—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ: {new_hp}/{max_hp}\n"
        f"üí∞ –û—Å—Ç–∞–ª–æ—Å—å Lumcoins: {lumcoins - cost}"
    )
    logger.info(f"User {user_id} healed {heal_amount} HP for {cost} Lumcoins.")

@stat_router.message(F.text.lower().startswith(("—Ä–∞–±–æ—Ç–∞—Ç—å", "/—Ä–∞–±–æ—Ç–∞—Ç—å")))
async def do_work(message: types.Message, profile_manager: ProfileManager):
    user_id = message.from_user.id
    logger.info(f"Received '—Ä–∞–±–æ—Ç–∞—Ç—å' command from user {user_id}.")

    last_work_time = await profile_manager.get_last_work_time(user_id)
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if current_time - last_work_time < WorkConfig.COOLDOWN_SECONDS:
        remaining_time = int(WorkConfig.COOLDOWN_SECONDS - (current_time - last_work_time))
        minutes, seconds = divmod(remaining_time, 60)
        await message.reply(f"‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω. {seconds} —Å–µ–∫.")
        return

    # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–≥—Ä–∞–¥—ã
    task_name, lumcoins_reward = random.choice(list(WorkConfig.WORK_TASKS.items()))

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Lumcoins –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã
    await profile_manager.update_lumcoins(user_id, lumcoins_reward)
    await profile_manager.update_last_work_time(user_id, current_time)

    await message.reply(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ {task_name} –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {lumcoins_reward} Lumcoins!")
    logger.info(f"User {user_id} successfully worked, earned {lumcoins_reward} Lumcoins. Task: '{task_name}'.")


@stat_router.message(F.text.lower().startswith(("–º–∞–≥–∞–∑–∏–Ω", "/–º–∞–≥–∞–∑–∏–Ω")))
async def show_shop(message: types.Message, profile_manager: ProfileManager):
    user_id = message.from_user.id
    logger.info(f"Received '–º–∞–≥–∞–∑–∏–Ω' command from user {user_id}.")

    user_lumcoins = await profile_manager.get_lumcoins(user_id)
    available_backgrounds = profile_manager.get_available_backgrounds()
    user_backgrounds_inventory = await profile_manager.get_user_backgrounds_inventory(user_id)

    builder = InlineKeyboardBuilder()
    text = f"üõçÔ∏è **–ú–∞–≥–∞–∑–∏–Ω —Ñ–æ–Ω–æ–≤** üõçÔ∏è\n\n–í–∞—à–∏ Lumcoins: {user_lumcoins} LUM\n\n"
    text += "üñºÔ∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ–Ω—ã:**\n"

    for key, bg_info in available_backgrounds.items():
        name = bg_info['name']
        price = bg_info.get('price', 0) 
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω
        has_custom = any(bg.startswith("custom:") for bg in user_backgrounds_inventory)
        
        status = ""
        if key == "custom" and has_custom:
            status = " (–ö—É–ø–ª–µ–Ω–æ)"
            user_profile = await profile_manager.get_user_profile(message.from_user) 
            if any(bg.startswith("custom:") and bg == user_profile.get('active_background', 'default') for bg in user_backgrounds_inventory):
                status = " (–ê–∫—Ç–∏–≤–Ω–æ)"
            builder.add(InlineKeyboardButton(text=f"‚úÖ {name}{status}", callback_data=f"activate_bg:custom:{user_id}"))
        elif key in user_backgrounds_inventory or (key == "custom" and has_custom):
            status = " (–ö—É–ø–ª–µ–Ω–æ)"
            user_profile = await profile_manager.get_user_profile(message.from_user) 
            if key == user_profile.get('active_background', 'default'):
                status = " (–ê–∫—Ç–∏–≤–Ω–æ)"
            builder.add(InlineKeyboardButton(text=f"‚úÖ {name}{status}", callback_data=f"activate_bg:{key}"))
        else:
            builder.add(InlineKeyboardButton(text=f"üí∞ {name} ({price} LUM)", callback_data=f"buy_bg:{key}"))
    
    builder.adjust(1)
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.MARKDOWN)
    logger.info(f"Shop list with inline buttons sent to user {user_id}.")

@stat_router.callback_query(F.data.startswith("buy_bg:"))
async def process_buy_background(callback: types.CallbackQuery, profile_manager: ProfileManager):
    user_id = callback.from_user.id
    background_key_to_buy = callback.data.split(":")[1]

    logger.info(f"User {user_id} attempting to buy background: '{background_key_to_buy}'.")

    available_backgrounds = profile_manager.get_available_backgrounds()
    bg_info = available_backgrounds.get(background_key_to_buy)

    if not bg_info:
        logger.warning(f"User {user_id} tried to buy unknown background '{background_key_to_buy}'.")
        await callback.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ–Ω.", reply_markup=None)
        return

    bg_name = bg_info['name']
    bg_price = bg_info.get('price', 0)
    user_lumcoins = await profile_manager.get_lumcoins(user_id)
    user_backgrounds_inventory = await profile_manager.get_user_backgrounds_inventory(user_id)

    if background_key_to_buy in user_backgrounds_inventory:
        logger.info(f"User {user_id} already owns background '{bg_name}'.")
        await callback.message.edit_text(f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ–æ–Ω '{bg_name}'.", reply_markup=None)
        return

    if user_lumcoins >= bg_price:
        # –°–Ω–∞—á–∞–ª–∞ —Å–ø–∏—Å—ã–≤–∞–µ–º Lumcoins
        await profile_manager.update_lumcoins(user_id, -bg_price)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        await add_item_to_inventory(user_id, background_key_to_buy, 'background')
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–æ–Ω —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä
        await profile_manager.set_user_background(user_id, background_key_to_buy)
        
        logger.info(f"User {user_id} successfully bought and activated background '{bg_name}'.")
        await callback.message.edit_text(
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ñ–æ–Ω '{bg_name}' –∑–∞ {bg_price} Lumcoins!",
            reply_markup=None
        )
    else:
        logger.info(f"User {user_id} tried to buy background '{bg_name}' but has insufficient Lumcoins ({user_lumcoins}/{bg_price}).")
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Lumcoins –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ñ–æ–Ω–∞ '{bg_name}'. –í–∞–º –Ω—É–∂–Ω–æ {bg_price} Lumcoins, —É –≤–∞—Å {user_lumcoins}.",
            reply_markup=None
        )

@stat_router.callback_query(F.data.startswith("activate_bg:"))
async def process_activate_background(callback: types.CallbackQuery, profile_manager: ProfileManager):
    user_id = callback.from_user.id
    background_key_to_activate = callback.data.split(":")[1]

    logger.info(f"User {user_id} attempting to activate background: '{background_key_to_activate}'.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_backgrounds_inventory = await profile_manager.get_user_backgrounds_inventory(user_id)

    if background_key_to_activate in user_backgrounds_inventory:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ ProfileManager –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ–Ω–∞
        await profile_manager.set_user_background(user_id, background_key_to_activate) 
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏
        bg_info = ShopConfig.SHOP_BACKGROUNDS.get(background_key_to_activate)
        bg_name = bg_info['name'] if bg_info else background_key_to_activate

        logger.info(f"User {user_id} successfully activated background '{bg_name}'.")
        await callback.message.edit_text(
            f"‚úÖ –§–æ–Ω '{bg_name}' —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
            reply_markup=None
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        await asyncio.sleep(1)
        try:
            user_profile = await profile_manager.get_user_profile(callback.from_user)
            if user_profile:
                image_bytes = await profile_manager.generate_profile_image(callback.from_user, user_profile, bot)
            from core.main.ez_main import bot
            await bot.send_photo(callback.message.chat.id, BufferedInputFile(image_bytes.getvalue(), filename="profile_updated.png"))
        except Exception as e:
            logger.error(f"Error showing updated profile: {e}")
    else:
        logger.warning(f"User {user_id} tried to activate background '{background_key_to_activate}' not in inventory.")
        await callback.message.edit_text(
            "‚ùå –≠—Ç–æ–≥–æ —Ñ–æ–Ω–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ.",
            reply_markup=None
        )


@stat_router.message(F.text.lower().startswith(("—Ç–æ–ø", "/—Ç–æ–ø")))
async def show_top(message: types.Message, profile_manager: ProfileManager):
    user_id = message.from_user.id
    logger.info(f"Received '—Ç–æ–ø' command from user {user_id}.")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—é
    top_users_level = await profile_manager.get_top_users_by_level(limit=10)
    
    response_text = "üèÜ **–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é:** üèÜ\n\n"
    if top_users_level:
        for i, user_data in enumerate(top_users_level):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'username' –∏–ª–∏ 'first_name' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # 'username' –º–æ–∂–µ—Ç –±—ã—Ç—å None, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –ø–µ—Ä–≤—ã–º
            display_name = user_data.get('username') or user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            response_text += f"{i+1}. {display_name} - –£—Ä–æ–≤–µ–Ω—å: {user_data['level']}, EXP: {user_data['exp']}\n"
    else:
        response_text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞ –ø–æ —É—Ä–æ–≤–Ω—é.\n"

    response_text += "\nüí∞ **–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ Lumcoins:** üí∞\n\n"
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ Lumcoins
    top_users_lumcoins = await profile_manager.get_top_users_by_lumcoins(limit=10)
    if top_users_lumcoins:
        for i, user_data in enumerate(top_users_lumcoins):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'username' –∏–ª–∏ 'first_name' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            display_name = user_data.get('username') or user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            response_text += f"{i+1}. {display_name} - Lumcoins: {user_data['lumcoins']}\n"
    else:
        response_text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞ –ø–æ Lumcoins.\n"

    await message.answer(response_text, parse_mode=ParseMode.MARKDOWN)
    logger.info(f"Top players list sent to user {user_id}.")


async def ensure_user_exists(user_id: int, username: Optional[str], first_name: str, last_name: Optional[str] = None):
    """
    –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
    """
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –±–æ—Ç–∞
    try:
        main_db_conn = await aiosqlite.connect('bot_database.db')
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
        cursor = await main_db_conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
        table_exists = await cursor.fetchone()
        
        if not table_exists:
            # –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ—ë
            await main_db_conn.execute('''
                CREATE TABLE users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT NOT NULL,
                    last_active_ts REAL DEFAULT 0
                )
            ''')
            await main_db_conn.commit()
            
        # –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        await main_db_conn.execute('''
            INSERT INTO users (user_id, username, first_name, last_active_ts)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
                username = excluded.username,
                first_name = excluded.first_name,
                last_active_ts = excluded.last_active_ts
        ''', (user_id, username, first_name, time.time()))
        await main_db_conn.execute('''
            INSERT OR IGNORE INTO user_modes (user_id, mode, rating_opportunities_count)
            VALUES (?, 'saharoza', 0)
        ''', (user_id,))
        await main_db_conn.execute('''
            INSERT OR IGNORE INTO rp_user_stats (user_id) VALUES (?)
        ''', (user_id,))
        await main_db_conn.commit()
        logger.debug(f"User {user_id} ensured in main bot database.")
    except Exception as e:
        logger.error(f"Error ensuring user {user_id} in main bot database: {e}", exc_info=True)
    finally:
        await main_db_conn.close()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
    profiles_db_conn = await aiosqlite.connect('profiles.db')
    try:
        await profiles_db_conn.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name))
        await profiles_db_conn.execute('''
            INSERT OR IGNORE INTO user_profiles (user_id, active_background)
            VALUES (?, 'default')
        ''', (user_id,))
        await profiles_db_conn.commit()
        logger.debug(f"User {user_id} ensured in profiles database.")
    except Exception as e:
        logger.error(f"Error ensuring user {user_id} in profiles database: {e}", exc_info=True)
    finally:
        if main_db_conn:
            await main_db_conn.close()


def setup_stat_handlers(main_dp: Router):
    main_dp.include_router(stat_router)
    logger.info("Registering stat router handlers.")
    logger.info("Stat router included in Dispatcher.")

@stat_router.message(F.text.lower().startswith(("—Ü–µ–Ω–∑—É—Ä–∞", "/—Ü–µ–Ω–∑—É—Ä–∞")))
async def manage_censor(message: types.Message, bot: Bot):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Ü–µ–Ω–∑—É—Ä—ã –≤ –≥—Ä—É–ø–ø–µ"""
    user_id = message.from_user.id
    chat_id = message.chat.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admins = await get_group_admins(chat_id)
    if user_id not in admins:
        await message.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –≥—Ä—É–ø–ø—ã.")
        return
        
    text = message.text.lower().split()
    if len(text) < 2:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ü–µ–Ω–∑—É—Ä—ã
        is_enabled = await get_group_censor_setting(chat_id)
        status = "–≤–∫–ª—é—á–µ–Ω–∞" if is_enabled else "–≤—ã–∫–ª—é—á–µ–Ω–∞"
        await message.reply(f"üîß –¶–µ–Ω–∑—É—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ {status}.\n\n"
                          "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                          "‚Ä¢ `—Ü–µ–Ω–∑—É—Ä–∞ –≤–∫–ª` - –≤–∫–ª—é—á–∏—Ç—å\n"
                          "‚Ä¢ `—Ü–µ–Ω–∑—É—Ä–∞ –≤—ã–∫–ª` - –≤—ã–∫–ª—é—á–∏—Ç—å")
        return
        
    action = text[1]
    if action in ["–≤–∫–ª", "on", "enable"]:
        await set_group_censor_setting(chat_id, True)
        await message.reply("‚úÖ –¶–µ–Ω–∑—É—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –ø–ª–æ—Ö–∏–º–∏ —Å–ª–æ–≤–∞–º–∏!")
    elif action in ["–≤—ã–∫–ª", "off", "disable"]:
        await set_group_censor_setting(chat_id, False)
        await message.reply("‚ùå –¶–µ–Ω–∑—É—Ä–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞. –ú–æ–≥—É —Ä—É–≥–∞—Ç—å—Å—è —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ!")
    else:
        await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `—Ü–µ–Ω–∑—É—Ä–∞ –≤–∫–ª` –∏–ª–∏ `—Ü–µ–Ω–∑—É—Ä–∞ –≤—ã–∫–ª`")