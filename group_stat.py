from core.group.stat.smain import *
from core.group.stat.config import *
from core.group.stat.manager import ProfileManager
import string # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç string
import time # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç time
import random # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç random

from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, BufferedInputFile
from aiogram.utils.markdown import hlink
from aiogram.enums import ParseMode # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç ParseMode

formatter = string.Formatter()

stat_router = Router(name="stat_router")

@stat_router.message(F.text.lower().startswith(("–ø—Ä–æ—Ñ–∏–ª—å", "/–ø—Ä–æ—Ñ–∏–ª—å")))
async def show_profile(message: types.Message, profile_manager: ProfileManager, bot: Bot):
    logger.info(f"DEBUG: show_profile handler entered for user {message.from_user.id} with text '{message.text}'.")
    
    await ensure_user_exists(message.from_user.id, message.from_user.username, message.from_user.first_name)

    profile = await profile_manager.get_user_profile(message.from_user)
    if not profile:
        logger.error(f"Failed to load profile for user {message.from_user.id} after /profile command.")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å!")
        return
    
    logger.debug(f"Generating profile image for user {message.from_user.id}.")
    image_bytes = await profile_manager.generate_profile_image(message.from_user, profile, bot)
    
    logger.info(f"Sending profile image to user {message.from_user.id}.")
    await message.reply_photo(BufferedInputFile(image_bytes.getvalue(), filename="profile.png"))


@stat_router.message(F.text.lower().startswith(("—Ä–∞–±–æ—Ç–∞—Ç—å", "/—Ä–∞–±–æ—Ç–∞—Ç—å")))
async def do_work(message: types.Message, profile_manager: ProfileManager):
    user_id = message.from_user.id
    logger.info(f"Received '—Ä–∞–±–æ—Ç–∞—Ç—å' command from user {user_id}.")

    last_work_time = await profile_manager.get_last_work_time(user_id)
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
    if current_time - last_work_time < WorkConfig.COOLDOWN_SECONDS:
        remaining_time = int(WorkConfig.COOLDOWN_SECONDS - (current_time - last_work_time))
        minutes, seconds = divmod(remaining_time, 60)
        await message.reply(f"‚è≥ –í—ã —Å–º–æ–∂–µ—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω. {seconds} —Å–µ–∫.")
        return

    # –í—ã–±–æ—Ä —Å–ª—É—á–∞–π–Ω–æ–π –∑–∞–¥–∞—á–∏ –∏ –Ω–∞–≥—Ä–∞–¥—ã
    task_name, lumcoins_reward = random.choice(list(WorkConfig.WORK_TASKS.items()))

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Lumcoins –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞–±–æ—Ç—ã
    await profile_manager.update_lumcoins(user_id, lumcoins_reward)
    await profile_manager.update_last_work_time(user_id, current_time)

    await message.reply(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ {task_name} –∏ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {lumcoins_reward} Lumcoins!")
    logger.info(f"User {user_id} successfully worked, earned {lumcoins_reward} Lumcoins. Task: '{task_name}'.")


@stat_router.message(F.text.lower().startswith(("–º–∞–≥–∞–∑–∏–Ω", "/–º–∞–≥–∞–∑–∏–Ω")))
async def show_shop(message: types.Message, profile_manager: ProfileManager):
    user_id = message.from_user.id
    logger.info(f"Received '–º–∞–≥–∞–∑–∏–Ω' command from user {user_id}.")

    user_lumcoins = await profile_manager.get_lumcoins(user_id)
    available_backgrounds = profile_manager.get_available_backgrounds()
    user_backgrounds_inventory = await profile_manager.get_user_backgrounds_inventory(user_id)

    builder = InlineKeyboardBuilder()
    text = f"üõçÔ∏è **–ú–∞–≥–∞–∑–∏–Ω —Ñ–æ–Ω–æ–≤** üõçÔ∏è\n\n–í–∞—à–∏ Lumcoins: {user_lumcoins} LUM\n\n"
    text += "üñºÔ∏è **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ–Ω—ã:**\n"

    for key, bg_info in available_backgrounds.items():
        name = bg_info['name']
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã, –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0
        price = bg_info.get('price', 0) 
        
        status = ""
        if key in user_backgrounds_inventory:
            status = " (–ö—É–ø–ª–µ–Ω–æ)"
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–Ω—É—Ç—Ä–∏ —Ü–∏–∫–ª–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ get_user_profile
            user_profile = await profile_manager.get_user_profile(message.from_user) 
            if key == user_profile.get('active_background', 'default'):
                status = " (–ê–∫—Ç–∏–≤–Ω–æ)"
            builder.add(InlineKeyboardButton(text=f"‚úÖ {name}{status}", callback_data=f"activate_bg:{key}"))
        else:
            builder.add(InlineKeyboardButton(text=f"üí∞ {name} ({price} LUM)", callback_data=f"buy_bg:{key}"))
    
    builder.adjust(1) # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
    await message.answer(text, reply_markup=builder.as_markup(), parse_mode=ParseMode.MARKDOWN)
    logger.info(f"Shop list with inline buttons sent to user {user_id}.")


@stat_router.callback_query(F.data.startswith("buy_bg:"))
async def process_buy_background(callback: types.CallbackQuery, profile_manager: ProfileManager):
    user_id = callback.from_user.id
    background_key_to_buy = callback.data.split(":")[1]

    logger.info(f"User {user_id} attempting to buy background: '{background_key_to_buy}'.")

    available_backgrounds = profile_manager.get_available_backgrounds()
    bg_info = available_backgrounds.get(background_key_to_buy)

    if not bg_info:
        logger.warning(f"User {user_id} tried to buy unknown background '{background_key_to_buy}'.")
        await callback.message.edit_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ–Ω.", reply_markup=None)
        return

    bg_name = bg_info['name']
    bg_price = bg_info.get('price', 0) # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã
    user_lumcoins = await profile_manager.get_lumcoins(user_id)
    user_backgrounds_inventory = await profile_manager.get_user_backgrounds_inventory(user_id)

    if background_key_to_buy in user_backgrounds_inventory:
        logger.info(f"User {user_id} already owns background '{bg_name}'.")
        await callback.message.edit_text(f"‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ñ–æ–Ω '{bg_name}'.", reply_markup=None)
        return

    if user_lumcoins >= bg_price:
        await profile_manager.update_lumcoins(user_id, -bg_price) # –°–ø–∏—Å—ã–≤–∞–µ–º Lumcoins
        # set_user_background —É–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç add_item_to_inventory –≤–Ω—É—Ç—Ä–∏
        await profile_manager.set_user_background(user_id, background_key_to_buy) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º
        
        logger.info(f"User {user_id} successfully bought and activated background '{bg_name}'.")
        await callback.message.edit_text(
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —Ñ–æ–Ω '{bg_name}' –∑–∞ {bg_price} Lumcoins! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ-–Ω–æ–≤–æ–º—É.",
            reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏
        )
    else:
        logger.info(f"User {user_id} tried to buy background '{bg_name}' but has insufficient Lumcoins ({user_lumcoins}/{bg_price}).")
        await callback.message.edit_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Lumcoins –¥–ª—è –ø–æ–∫—É–ø–∫–∏ —Ñ–æ–Ω–∞ '{bg_name}'. –í–∞–º –Ω—É–∂–Ω–æ {bg_price} Lumcoins, —É –≤–∞—Å {user_lumcoins}.",
            reply_markup=None
        )


@stat_router.callback_query(F.data.startswith("activate_bg:"))
async def process_activate_background(callback: types.CallbackQuery, profile_manager: ProfileManager):
    user_id = callback.from_user.id
    background_key_to_activate = callback.data.split(":")[1]

    logger.info(f"User {user_id} attempting to activate background: '{background_key_to_activate}'.")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_backgrounds_inventory = await profile_manager.get_user_backgrounds_inventory(user_id)

    if background_key_to_activate in user_backgrounds_inventory:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ ProfileManager –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ñ–æ–Ω–∞
        await profile_manager.set_user_background(user_id, background_key_to_activate) 
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ–Ω–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏
        bg_info = ShopConfig.SHOP_BACKGROUNDS.get(background_key_to_activate)
        bg_name = bg_info['name'] if bg_info else background_key_to_activate

        logger.info(f"User {user_id} successfully activated background '{bg_name}'.")
        await callback.message.edit_text(
            f"‚úÖ –§–æ–Ω '{bg_name}' —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–ø–µ—Ä—å –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ-–Ω–æ–≤–æ–º—É.",
            reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        )
    else:
        logger.warning(f"User {user_id} tried to activate background '{background_key_to_activate}' not in inventory.")
        await callback.message.edit_text(
            "‚ùå –≠—Ç–æ–≥–æ —Ñ–æ–Ω–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.",
            reply_markup=None
        )


@stat_router.message(F.text.lower().startswith(("—Ç–æ–ø", "/—Ç–æ–ø")))
async def show_top(message: types.Message, profile_manager: ProfileManager):
    user_id = message.from_user.id
    logger.info(f"Received '—Ç–æ–ø' command from user {user_id}.")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —É—Ä–æ–≤–Ω—é
    top_users_level = await profile_manager.get_top_users_by_level(limit=10)
    
    response_text = "üèÜ **–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é:** üèÜ\n\n"
    if top_users_level:
        for i, user_data in enumerate(top_users_level):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'username' –∏–ª–∏ 'first_name' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # 'username' –º–æ–∂–µ—Ç –±—ã—Ç—å None, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –ø–µ—Ä–≤—ã–º
            display_name = user_data.get('username') or user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            response_text += f"{i+1}. {display_name} - –£—Ä–æ–≤–µ–Ω—å: {user_data['level']}, EXP: {user_data['exp']}\n"
    else:
        response_text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞ –ø–æ —É—Ä–æ–≤–Ω—é.\n"

    response_text += "\nüí∞ **–¢–æ–ø 10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ Lumcoins:** üí∞\n\n"
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ Lumcoins
    top_users_lumcoins = await profile_manager.get_top_users_by_lumcoins(limit=10)
    if top_users_lumcoins:
        for i, user_data in enumerate(top_users_lumcoins):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'username' –∏–ª–∏ 'first_name' –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            display_name = user_data.get('username') or user_data.get('first_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
            response_text += f"{i+1}. {display_name} - Lumcoins: {user_data['lumcoins']}\n"
    else:
        response_text += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–æ–ø–∞ –ø–æ Lumcoins.\n"

    await message.answer(response_text, parse_mode=ParseMode.MARKDOWN)
    logger.info(f"Top players list sent to user {user_id}.")


async def ensure_user_exists(user_id: int, username: Optional[str], first_name: str, last_name: Optional[str] = None):
    """
    –£–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π.
    –°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.
    """
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –ë–î –±–æ—Ç–∞
    main_db_conn = await aiosqlite.connect('bot_database.db')
    try:
        await main_db_conn.execute('''
            INSERT INTO users (user_id, username, first_name, last_active_ts)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET
                username = excluded.username,
                first_name = excluded.first_name,
                last_active_ts = excluded.last_active_ts
        ''', (user_id, username, first_name, time.time()))
        await main_db_conn.execute('''
            INSERT OR IGNORE INTO user_modes (user_id, mode, rating_opportunities_count)
            VALUES (?, 'saharoza', 0)
        ''', (user_id,))
        await main_db_conn.execute('''
            INSERT OR IGNORE INTO rp_user_stats (user_id) VALUES (?)
        ''', (user_id,))
        await main_db_conn.commit()
        logger.debug(f"User {user_id} ensured in main bot database.")
    except Exception as e:
        logger.error(f"Error ensuring user {user_id} in main bot database: {e}", exc_info=True)
    finally:
        await main_db_conn.close()

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π
    profiles_db_conn = await aiosqlite.connect('profiles.db')
    try:
        await profiles_db_conn.execute('''
            INSERT OR IGNORE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user_id, username, first_name, last_name))
        await profiles_db_conn.execute('''
            INSERT OR IGNORE INTO user_profiles (user_id, active_background)
            VALUES (?, 'default')
        ''', (user_id,))
        await profiles_db_conn.commit()
        logger.debug(f"User {user_id} ensured in profiles database.")
    except Exception as e:
        logger.error(f"Error ensuring user {user_id} in profiles database: {e}", exc_info=True)
    finally:
        await profiles_db_conn.close()


def setup_stat_handlers(main_dp: Router):
    main_dp.include_router(stat_router)
    logger.info("Registering stat router handlers.")
    logger.info("Stat router included in Dispatcher.")
