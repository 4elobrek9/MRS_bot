import asyncio
import time
import random
import logging
from typing import Dict, Any, Optional, List, Tuple, Set
import aiosqlite
from aiogram import Router, types, F, Bot
from aiogram.enums import ChatType, ParseMode, MessageEntityType
from aiogram.filters import Command
from aiogram.exceptions import TelegramAPIError
from contextlib import suppress
import database as db

try:
    from group_stat import ProfileManager as RealProfileManager
    HAS_PROFILE_MANAGER = True
except ImportError:
    logging.critical("CRITICAL: Module 'group_stat' or 'ProfileManager' not found. RP functionality will be severely impaired or non-functional.")
    HAS_PROFILE_MANAGER = False
    # –ó–∞–≥–ª—É—à–∫–∞ ProfileManager, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É RealProfileManager
    class RealProfileManager:
        async def get_user_rp_stats(self, user_id: int) -> Dict[str, Any]:
            return {'hp': 100, 'recovery_end_ts': 0.0, 'heal_cooldown_ts': 0.0}
        async def update_user_rp_stats(self, user_id: int, **kwargs: Any) -> None:
            pass
        async def get_user_profile(self, user: types.User) -> Optional[Dict[str, Any]]:
            return None
        async def connect(self) -> None:
            pass
        async def close(self) -> None:
            pass

# –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º ProfileManager –ª–∏–±–æ —Ä–µ–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å, –ª–∏–±–æ –∑–∞–≥–ª—É—à–∫—É
ProfileManager = RealProfileManager

logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è RP-–º–æ–¥—É–ª—è. –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –≥—Ä—É–ø–ø –∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø.
rp_router = Router(name="rp_module")
rp_router.message.filter(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))

class RPConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è RP-—Å–∏—Å—Ç–µ–º—ã."""
    DEFAULT_HP: int = 100
    MAX_HP: int = 150
    MIN_HP: int = 0 # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ HP, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —Å—á–∏—Ç–∞–µ—Ç—Å—è "–±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è"
    HEAL_COOLDOWN_SECONDS: int = 120 
    HP_RECOVERY_TIME_SECONDS: int = 600 # 10 –º–∏–Ω—É—Ç –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –Ω–æ–∫–∞—É—Ç–∞
    HP_RECOVERY_AMOUNT: int = 25 # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ HP, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–µ –∑–∞ —Ä–∞–∑

class RPActions:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è RP-–¥–µ–π—Å—Ç–≤–∏–π –∏ –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –Ω–∞ HP."""
    INTIMATE_ACTIONS: Dict[str, Dict[str, Dict[str, int]]] = {
        "–¥–æ–±—Ä—ã–µ": {
            "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å": {"hp_change_target": +10, "hp_change_sender": +1},
            "–æ–±–Ω—è—Ç—å": {"hp_change_target": +15, "hp_change_sender": +5},
            "–ø–æ–≥–ª–∞–¥–∏—Ç—å": {"hp_change_target": +5, "hp_change_sender": +2},
            "—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ü–µ–ª—É–π": {"hp_change_target": +20, "hp_change_sender": +10},
            "—Ç—Ä–∞—Ö–Ω—É—Ç—å": {"hp_change_target": +30, "hp_change_sender": +15},
            "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å –≤ —â—ë—á–∫—É": {"hp_change_target": +7, "hp_change_sender": +3},
            "–ø—Ä–∏–∂–∞—Ç—å –∫ —Å–µ–±–µ": {"hp_change_target": +12, "hp_change_sender": +6},
            "–ø–æ–∫–æ—Ä–º–∏—Ç—å": {"hp_change_target": +9, "hp_change_sender": -2},
            "–Ω–∞–ø–æ–∏—Ç—å": {"hp_change_target": +6, "hp_change_sender": -1},
            "—Å–¥–µ–ª–∞—Ç—å –º–∞—Å—Å–∞–∂": {"hp_change_target": +15, "hp_change_sender": +3},
            "—Å–ø–µ—Ç—å –ø–µ—Å–Ω—é": {"hp_change_target": +5, "hp_change_sender": +1},
            "–ø–æ–¥–∞—Ä–∏—Ç—å —Ü–≤–µ—Ç—ã": {"hp_change_target": +12, "hp_change_sender": -12},
            "–ø–æ–¥—Ä–æ—á–∏—Ç—å": {"hp_change_target": +12, "hp_change_sender": 0},
            "–ø–æ–ª–µ—á–∏—Ç—å": {"hp_change_target": +25, "hp_change_sender": -5},
        },
        "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ": {
            "—Ç–æ–ª–∫–Ω—É—Ç—å": {"hp_change_target": 0, "hp_change_sender": 0},
            "—Å—Ö–≤–∞—Ç–∏—Ç—å": {"hp_change_target": 0, "hp_change_sender": 0},
            "–ø–æ–º–∞—Ö–∞—Ç—å": {"hp_change_target": 0, "hp_change_sender": 0},
            "–∫–∏–≤–Ω—É—Ç—å": {"hp_change_target": 0, "hp_change_sender": 0},
            "–ø–æ—Ö–ª–æ–ø–∞—Ç—å": {"hp_change_target": 0, "hp_change_sender": 0},
            "–ø–æ—Å—Ç—É—á–∞—Ç—å": {"hp_change_target": 0, "hp_change_sender": 0},
            "–ø–æ–ø—Ä–æ—â–∞—Ç—å—Å—è": {"hp_change_target": 0, "hp_change_sender": 0},
            "—à–µ–ø–Ω—É—Ç—å": {"hp_change_target": 0, "hp_change_sender": 0},
            "–ø–æ—á–µ—Å–∞—Ç—å —Å–ø–∏–Ω–∫—É": {"hp_change_target": +5, "hp_change_sender": 0},
            "—É—Å–ø–æ–∫–æ–∏—Ç—å": {"hp_change_target": +5, "hp_change_sender": +1},
            "–∑–∞–ø–ª–∞–∫–∞—Ç—å": {}, "–∑–∞—Å–º–µ—è—Ç—å—Å—è": {}, "—É–¥–∏–≤–∏—Ç—å—Å—è": {}, "–ø–æ–¥–º–∏–≥–Ω—É—Ç—å": {},
        },
        "–∑–ª—ã–µ": {
            "—É–µ–±–∞—Ç—å": {"hp_change_target": -20, "hp_change_sender": -2},
            "—Å—Ö–≤–∞—Ç–∏—Ç—å –∑–∞ —à–µ—é": {"hp_change_target": -25, "hp_change_sender": -3},
            "—É–¥–∞—Ä–∏—Ç—å": {"hp_change_target": -10, "hp_change_sender": -1},
            "—É–∫—É—Å–∏—Ç—å": {"hp_change_target": -15, "hp_change_sender": 0},
            "—à–ª–µ–ø–Ω—É—Ç—å": {"hp_change_target": -8, "hp_change_sender": 0},
            "–ø–æ—â–µ—á–∏–Ω–∞": {"hp_change_target": -12, "hp_change_sender": -1},
            "–ø–Ω—É—Ç—å": {"hp_change_target": -10, "hp_change_sender": 0},
            "—É—â–∏–ø–Ω—É—Ç—å": {"hp_change_target": -7, "hp_change_sender": 0},
            "—Ç–æ–ª–∫–Ω—É—Ç—å —Å–∏–ª—å–Ω–æ": {"hp_change_target": -9, "hp_change_sender": -1},
            "–æ–±–æ–∑–≤–∞—Ç—å": {"hp_change_target": -5, "hp_change_sender": 0},
            "–ø–ª—é–Ω—É—Ç—å": {"hp_change_target": -6, "hp_change_sender": 0},
            "–ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å": {"hp_change_target": -80, "hp_change_sender": -10},
            "–æ–±–∏–¥–µ—Ç—å": {"hp_change_target": -7, "hp_change_sender": 0},
            "—Ä–∞–∑–æ–∑–ª–∏—Ç—å—Å—è": {"hp_change_target": -2, "hp_change_sender": -1},
            "–∏—Å–ø—É–≥–∞—Ç—å—Å—è": {"hp_change_target": -1, "hp_change_sender": 0},
            "–∏–∑–¥–µ–≤–∞—Ç—å—Å—è": {"hp_change_target": -10, "hp_change_sender": -1},
        }
    }
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤ –æ–¥–∏–Ω —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    ALL_ACTION_DATA: Dict[str, Dict[str, int]] = {
        action: data if data else {}
        for category_actions in INTIMATE_ACTIONS.values()
        for action, data in category_actions.items()
    }
    # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –¥–ª–∏–Ω–µ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ (–¥–ª–∏–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–≤—ã–º–∏)
    SORTED_COMMANDS_FOR_PARSING: List[str] = sorted(
        ALL_ACTION_DATA.keys(), key=len, reverse=True
    )
    # –î–µ–π—Å—Ç–≤–∏—è, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–∞–Ω–¥
    ALL_ACTIONS_LIST_BY_CATEGORY: Dict[str, List[str]] = {
        "–î–æ–±—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è ‚ù§Ô∏è": list(INTIMATE_ACTIONS["–¥–æ–±—Ä—ã–µ"].keys()),
        "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è üòê": list(INTIMATE_ACTIONS["–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ"].keys()),
        "–ó–ª—ã–µ –¥–µ–π—Å—Ç–≤–∏—è üíÄ": list(INTIMATE_ACTIONS["–∑–ª—ã–µ"].keys())
    }

def get_user_display_name(user: types.User) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
    –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç username, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª–Ω–æ–µ –∏–º—è.
    """
    name = f"@{user.username}" if user.username else user.full_name
    return name

async def _update_user_hp(
    profile_manager: ProfileManager,
    user_id: int,
    hp_change: int
) -> Tuple[int, bool]:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ç–µ—Ä—è–ª –ª–∏ –æ–Ω —Å–æ–∑–Ω–∞–Ω–∏–µ.
    –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ—Ç HP, —á—Ç–æ–±—ã –æ–Ω–æ –æ—Å—Ç–∞–≤–∞–ª–æ—Å—å –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö (MIN_HP –¥–æ MAX_HP).

    Args:
        profile_manager (ProfileManager): –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ RP-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ.
        user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        hp_change (int): –ò–∑–º–µ–Ω–µ–Ω–∏–µ HP (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º).

    Returns:
        Tuple[int, bool]: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ HP –∏ —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –ø–æ—Ç–µ—Ä—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–Ω–∞–Ω–∏–µ.
    """
    stats = await db.get_user_rp_stats(user_id) # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ db.get_user_rp_stats
    current_hp = stats.get('hp', RPConfig.DEFAULT_HP)
    new_hp = max(RPConfig.MIN_HP, min(RPConfig.MAX_HP, current_hp + hp_change))
    knocked_out_this_time = False
    update_fields = {'hp': new_hp}

    # –ï—Å–ª–∏ HP —É–ø–∞–ª–æ –¥–æ –∏–ª–∏ –Ω–∏–∂–µ –Ω—É–ª—è, –∏ —ç—Ç–æ –Ω–µ –±—ã–ª–æ —Ç–∞–∫ —Ä–∞–Ω–µ–µ
    if new_hp <= RPConfig.MIN_HP and current_hp > RPConfig.MIN_HP:
        recovery_ts = time.time() + RPConfig.HP_RECOVERY_TIME_SECONDS
        update_fields['recovery_end_ts'] = recovery_ts
        knocked_out_this_time = True
        logger.info(f"User {user_id} HP dropped to {new_hp}. Recovery timer set for {RPConfig.HP_RECOVERY_TIME_SECONDS}s.")
    # –ï—Å–ª–∏ HP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –≤—ã—à–µ –Ω—É–ª—è
    elif new_hp > RPConfig.MIN_HP and stats.get('recovery_end_ts', 0.0) > 0 :
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è
        update_fields['recovery_end_ts'] = 0.0
        logger.info(f"User {user_id} HP recovered above {RPConfig.MIN_HP}. Recovery timer reset.")

    await db.update_user_rp_stats(user_id, **update_fields) # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ db.update_user_rp_stats
    return new_hp, knocked_out_this_time

def get_command_from_text(text: Optional[str]) -> Tuple[Optional[str], str]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç RP-–∫–æ–º–∞–Ω–¥—É –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –ò—â–µ—Ç —Å–∞–º—É—é –¥–ª–∏–Ω–Ω—É—é —Å–æ–≤–ø–∞–¥–∞—é—â—É—é –∫–æ–º–∞–Ω–¥—É –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏.

    Args:
        text (Optional[str]): –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.

    Returns:
        Tuple[Optional[str], str]: –ù–∞–π–¥–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ (–∏–ª–∏ None) –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–π —Ç–µ–∫—Å—Ç.
    """
    if not text:
        return None, ""
    text_lower = text.lower()
    for cmd in RPActions.SORTED_COMMANDS_FOR_PARSING:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ª–∏–±–æ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –ª–∏–±–æ –∑–∞ –Ω–µ–π –∏–¥–µ—Ç –ø—Ä–æ–±–µ–ª
        if text_lower.startswith(cmd) and \
           (len(text_lower) == len(cmd) or text_lower[len(cmd)].isspace()):
            additional_text = text[len(cmd):].strip()
            return cmd, additional_text
    return None, ""

def format_timedelta(seconds: float) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (–º–∏–Ω/—Å–µ–∫).

    Args:
        seconds (float): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–∏.
    """
    if seconds <= 0:
        return "—É–∂–µ –º–æ–∂–Ω–æ"
    total_seconds = int(seconds)
    minutes = total_seconds // 60
    secs = total_seconds % 60
    if minutes > 0 and secs > 0:
        return f"{minutes} –º–∏–Ω {secs} —Å–µ–∫"
    elif minutes > 0:
        return f"{minutes} –º–∏–Ω"
    return f"{secs} —Å–µ–∫"

async def check_and_notify_rp_state(
    user: types.User,
    bot: Bot,
    profile_manager: ProfileManager,
    message_to_delete_on_block: Optional[types.Message] = None
) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å RP-–¥–µ–π—Å—Ç–≤–∏—è
    –∏–∑-–∑–∞ –Ω–∏–∑–∫–æ–≥–æ HP –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.

    Args:
        user (types.User): –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        profile_manager (ProfileManager): –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π.
        message_to_delete_on_block (Optional[types.Message]): –°–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å,
                                                              –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RP-–∫–æ–º–∞–Ω–¥–∞).

    Returns:
        bool: True, –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ HP), False –∏–Ω–∞—á–µ.
    """
    if not HAS_PROFILE_MANAGER:
        logger.error(f"Cannot check RP state for user {user.id} due to missing ProfileManager.")
        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ –º–æ–¥—É–ª—è
            await bot.send_message(user.id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å –º–æ–¥—É–ª–µ–º –ø—Ä–æ—Ñ–∏–ª–µ–π, RP-–¥–µ–π—Å—Ç–≤–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        except TelegramAPIError:
            pass # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å PM, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        if message_to_delete_on_block:
             with suppress(TelegramAPIError): await message_to_delete_on_block.delete()
        return True # –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ

    stats = await db.get_user_rp_stats(user.id) # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ db.get_user_rp_stats
    current_hp = stats.get('hp', RPConfig.DEFAULT_HP)
    recovery_ts = stats.get('recovery_end_ts', 0.0)
    now = time.time()

    if current_hp <= RPConfig.MIN_HP:
        if recovery_ts > 0.0 and now < recovery_ts:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è, –∏ —Ç–∞–π–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –µ—â–µ –Ω–µ –∏—Å—Ç–µ–∫
            remaining_recovery = recovery_ts - now
            time_str = format_timedelta(remaining_recovery)
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(
                    user.id,
                    f"–í—ã —Å–µ–π—á–∞—Å –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å RP-–¥–µ–π—Å—Ç–≤–∏—è (HP: {current_hp}).\n"
                    f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ {RPConfig.HP_RECOVERY_AMOUNT} HP —á–µ—Ä–µ–∑: {time_str}."
                )
            except TelegramAPIError as e:
                # –ï—Å–ª–∏ PM –Ω–µ —É–¥–∞–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
                logger.warning(f"Could not send RP state PM to user {user.id}: {e}")
                if message_to_delete_on_block:
                    await message_to_delete_on_block.reply(
                        f"{get_user_display_name(user)}, –≤—ã –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å (HP: {current_hp}). "
                        f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {time_str}."
                    )
            if message_to_delete_on_block:
                with suppress(TelegramAPIError): await message_to_delete_on_block.delete()
            return True # –î–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ
        elif recovery_ts == 0.0 or now >= recovery_ts:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è, –Ω–æ —Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HP.
            recovered_hp, _ = await _update_user_hp(profile_manager, user.id, RPConfig.HP_RECOVERY_AMOUNT)
            logger.info(f"User {user.id} HP auto-recovered to {recovered_hp} upon action attempt.")
            try:
                await bot.send_message(user.id, f"–í–∞—à–µ HP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {recovered_hp}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å RP-–¥–µ–π—Å—Ç–≤–∏—è.")
            except TelegramAPIError:
                pass # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            return False # –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
    return False # –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ (HP –≤ –Ω–æ—Ä–º–µ)

async def _process_rp_action(
    message: types.Message,
    bot: Bot,
    profile_manager: ProfileManager,
    command_text_payload: str
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç RP-–¥–µ–π—Å—Ç–≤–∏–µ, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, —Ü–µ–ª—å, –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è HP,
    –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    Args:
        message (types.Message): –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
        bot (Bot): –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
        profile_manager (ProfileManager): –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π.
        command_text_payload (str): –¢–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥—ã RP (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å @username").
    """
    if not HAS_PROFILE_MANAGER:
        await message.reply("‚ö†Ô∏è RP-–º–æ–¥—É–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–∑-–∑–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –æ—à–∏–±–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        return
    sender_user = message.from_user
    if not sender_user:
        logger.warning("Cannot identify sender for an RP action.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è HP –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –¥–µ–π—Å—Ç–≤–∏—è
    if await check_and_notify_rp_state(sender_user, bot, profile_manager, message_to_delete_on_block=message):
        return

    target_user: Optional[types.User] = None
    # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª—å –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message and message.reply_to_message.from_user:
        target_user = message.reply_to_message.from_user
    else:
        # –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª—å –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        entities = message.entities or []
        for entity in entities:
            if entity.type == MessageEntityType.TEXT_MENTION and entity.user:
                target_user = entity.user
                break

    if not target_user:
        await message.reply(
            "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª—å: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–ø–æ–º—è–Ω–∏—Ç–µ –µ–≥–æ (@–ò–º—è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –∫–ª–∏–∫–∞–±–µ–ª–µ–Ω)."
        )
        return

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    command, additional_text = get_command_from_text(command_text_payload)
    if not command:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (—á–µ–≥–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å, —Ç–∞–∫ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–ª), –≤—ã—Ö–æ–¥–∏–º
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ–±–µ, –±–æ—Ç–∞—Ö
    if target_user.id == sender_user.id:
        await message.reply("ü§¶ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å RP-–∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ–±–µ!")
        with suppress(TelegramAPIError): await message.delete()
        return
    if target_user.id == bot.id:
        await message.reply(f"ü§ñ –ù–µ–ª—å–∑—è –ø—Ä–∏–º–µ–Ω—è—Ç—å RP-–¥–µ–π—Å—Ç–≤–∏—è –∫–æ –º–Ω–µ, {sender_user.first_name}!")
        with suppress(TelegramAPIError): await message.delete()
        return
    if target_user.is_bot:
        await message.reply("üëª –î–µ–π—Å—Ç–≤–∏—è –Ω–∞ –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤ –Ω–µ –∏–º–µ—é—Ç —Å–º—ã—Å–ª–∞.")
        with suppress(TelegramAPIError): await message.delete()
        return

    sender_name = get_user_display_name(sender_user)
    target_name = get_user_display_name(target_user)

    action_data = RPActions.ALL_ACTION_DATA.get(command, {})
    action_category = next((cat for cat, cmds in RPActions.INTIMATE_ACTIONS.items() if command in cmds), None)

    # –õ–æ–≥–∏–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞ –¥–ª—è "–¥–æ–±—Ä—ã—Ö" (–ª–µ—á–∞—â–∏—Ö) –¥–µ–π—Å—Ç–≤–∏–π
    if action_category == "–¥–æ–±—Ä—ã–µ" and action_data.get("hp_change_target", 0) > 0:
        sender_stats = await db.get_user_rp_stats(sender_user.id) # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ db.get_user_rp_stats
        heal_cd_ts = sender_stats.get('heal_cooldown_ts', 0.0)
        now = time.time()
        if now < heal_cd_ts:
            remaining_cd_str = format_timedelta(heal_cd_ts - now)
            await message.reply(
                f"{sender_name}, –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–µ—á–∞—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ {remaining_cd_str}."
            )
            with suppress(TelegramAPIError): await message.delete()
            return
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –∫—É–ª–¥–∞—É–Ω
            await db.update_user_rp_stats( # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ db.update_user_rp_stats
                sender_user.id, heal_cooldown_ts=now + RPConfig.HEAL_COOLDOWN_SECONDS
            )

    hp_change_target_val = action_data.get("hp_change_target", 0)
    hp_change_sender_val = action_data.get("hp_change_sender", 0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –ª–∏ –Ω–∞–Ω–µ—Å—Ç–∏ —É—Ä–æ–Ω —Ü–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è
    target_initial_stats = await db.get_user_rp_stats(target_user.id) # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ db.get_user_rp_stats
    target_current_hp_before_action = target_initial_stats.get('hp', RPConfig.DEFAULT_HP)
    if target_current_hp_before_action <= RPConfig.MIN_HP and \
       hp_change_target_val < 0 and \
       command != "–ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å": # "–ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å" –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º
        await message.reply(f"{target_name} —É–∂–µ –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è. –ó–∞—á–µ–º –∂–µ –µ–≥–æ –º—É—á–∏—Ç—å –µ—â–µ –±–æ–ª—å—à–µ?", parse_mode=ParseMode.HTML)
        with suppress(TelegramAPIError): await message.delete()
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP —Ü–µ–ª–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    new_target_hp, target_knocked_out = (target_current_hp_before_action, False) # –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if hp_change_target_val != 0: # –û–±–Ω–æ–≤–ª—è–µ–º HP —Ü–µ–ª–∏, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        new_target_hp, target_knocked_out = await _update_user_hp(profile_manager, target_user.id, hp_change_target_val)
    new_sender_hp, sender_knocked_out = await _update_user_hp(profile_manager, sender_user.id, hp_change_sender_val)


    # –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ—Å–ø–æ–ª—ã—Ö –æ–∫–æ–Ω—á–∞–Ω–∏–π
    # –ó–¥–µ—Å—å –º—ã –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ª–∏ –≥–ª–∞–≥–æ–ª –Ω–∞ "—Ç—å" –∏ –∑–∞–º–µ–Ω—è—Ç—å –µ–≥–æ –Ω–∞ "–ª(-–∞)"
    command_display = command
    if command.endswith("—Ç—å"):
        command_display = command[:-2] + "–ª(-–∞)" # –ù–∞–ø—Ä–∏–º–µ—Ä, "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å" -> "–ø–æ—Ü–µ–ª–æ–≤–∞–ª(-–∞)"
    elif command.endswith("—Ç—å—Å—è"):
        command_display = command[:-3] + "–ª(-–∞)—Å—è" # –ù–∞–ø—Ä–∏–º–µ—Ä, "–æ—Ç–º—ã—Ç—å—Å—è" -> "–æ—Ç–º—ã–ª(-–∞)—Å—è"


    response_text = f"{sender_name} {command_display} {target_name}"
    if additional_text:
        response_text += f" {additional_text}"

    hp_report_parts = []
    if hp_change_target_val > 0: hp_report_parts.append(f"{target_name} <b style='color:green;'>+{hp_change_target_val} HP</b>")
    elif hp_change_target_val < 0: hp_report_parts.append(f"{target_name} <b style='color:red;'>{hp_change_target_val} HP</b>")
    if hp_change_sender_val > 0: hp_report_parts.append(f"{sender_name} <b style='color:green;'>+{hp_change_sender_val} HP</b>")
    elif hp_change_sender_val < 0: hp_report_parts.append(f"{sender_name} <b style='color:red;'>{hp_change_sender_val} HP</b>")

    if hp_report_parts:
        response_text += f"\n({', '.join(hp_report_parts)})"

    status_lines = []
    if target_knocked_out:
        status_lines.append(f"üòµ {target_name} —Ç–µ—Ä—è–µ—Ç —Å–æ–∑–Ω–∞–Ω–∏–µ! (–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {format_timedelta(RPConfig.HP_RECOVERY_TIME_SECONDS)})")
    elif hp_change_target_val != 0 : # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HP —Ü–µ–ª–∏, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        status_lines.append(f"HP {target_name}: {new_target_hp}/{RPConfig.MAX_HP}")

    if hp_change_sender_val != 0 or new_sender_hp < RPConfig.MAX_HP : # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º HP –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –∏–ª–∏ –Ω–∏–∑–∫–æ–µ
        status_lines.append(f"HP {sender_name}: {new_sender_hp}/{RPConfig.MAX_HP}")

    if sender_knocked_out:
         status_lines.append(f"üòµ {sender_name} –ø–µ—Ä–µ—Å—Ç–∞—Ä–∞–ª—Å—è –∏ —Ç–µ—Ä—è–µ—Ç —Å–æ–∑–Ω–∞–Ω–∏–µ! (–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {format_timedelta(RPConfig.HP_RECOVERY_TIME_SECONDS)})")

    if status_lines:
        response_text += "\n\n" + "\n".join(status_lines)

    await message.reply(response_text, parse_mode=ParseMode.HTML)
    with suppress(TelegramAPIError): # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
        await message.delete()

@rp_router.message(F.text, lambda msg: get_command_from_text(msg.text)[0] is not None)
async def handle_rp_action_via_text(message: types.Message, bot: Bot, profile_manager: ProfileManager):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç RP-–¥–µ–π—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    command_text = message.text
    await _process_rp_action(message, bot, profile_manager, command_text)

@rp_router.message(Command("rp"))
async def handle_rp_action_via_command(message: types.Message, bot: Bot, profile_manager: ProfileManager):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç RP-–¥–µ–π—Å—Ç–≤–∏—è, –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥–æ–π /rp.
    """
    command_payload = message.text[len("/rp"):].strip()
    if not command_payload or get_command_from_text(command_payload)[0] is None:
        await message.reply(
            "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ <code>/rp</code>. –ù–∞–ø—Ä–∏–º–µ—Ä: <code>/rp –ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å</code>\n"
            "–ò –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏ –∏–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—å –µ—ë.\n"
            "–°–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π: /rp_commands", parse_mode=ParseMode.HTML
        )
        return
    await _process_rp_action(message, bot, profile_manager, command_payload)

@rp_router.message(F.text.lower().startswith((
    "–º–æ—ë —Ö–ø", "–º–æ–µ —Ö–ø", "–º–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ", "–º–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "—Ö–ø", "–∑–¥–æ—Ä–æ–≤—å–µ"
)))
@rp_router.message(Command("myhp", "hp"))
async def cmd_check_self_hp(message: types.Message, bot: Bot, profile_manager: ProfileManager):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–µ —Ç–µ–∫—É—â–µ–µ HP –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    if not message.from_user: return # –°–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if not HAS_PROFILE_MANAGER:
        await message.reply("‚ö†Ô∏è RP-–º–æ–¥—É–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    user = message.from_user
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å (–Ω–µ –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è)
    if await check_and_notify_rp_state(user, bot, profile_manager, message_to_delete_on_block=message):
        return

    stats = await db.get_user_rp_stats(user.id) # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ db.get_user_rp_stats
    current_hp = stats.get('hp', RPConfig.DEFAULT_HP)
    recovery_ts = stats.get('recovery_end_ts', 0.0)
    heal_cd_ts = stats.get('heal_cooldown_ts', 0.0)
    now = time.time()

    user_display_name = get_user_display_name(user)
    response_lines = [f"{user_display_name}, –≤–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:"]
    response_lines.append(f"‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤—å–µ: <b>{current_hp}/{RPConfig.MAX_HP}</b>")

    if current_hp <= RPConfig.MIN_HP and recovery_ts > now:
        response_lines.append(
            f"üòµ –í—ã –±–µ–∑ —Å–æ–∑–Ω–∞–Ω–∏—è. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {format_timedelta(recovery_ts - now)}"
        )
    elif recovery_ts > 0.0 and recovery_ts <= now and current_hp <= RPConfig.MIN_HP:
        # –≠—Ç–æ —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ç–∞–π–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫, –Ω–æ HP –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–∏–ª–æ—Å—å
        response_lines.append(f"‚è≥ HP –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")

    if heal_cd_ts > now:
        response_lines.append(f"üïí –ö—É–ª–¥–∞—É–Ω –ª–µ—á–∞—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π: {format_timedelta(heal_cd_ts - now)}")
    else:
        response_lines.append("‚úÖ –õ–µ—á–∞—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è: –≥–æ—Ç–æ–≤—ã!")

    await message.reply("\n".join(response_lines), parse_mode=ParseMode.HTML)

@rp_router.message(Command("rp_commands", "rphelp"))
@rp_router.message(F.text.lower().startswith(("—Å–ø–∏—Å–æ–∫ –¥–µ–π—Å—Ç–≤–∏–π", "—Ä–ø –¥–µ–π—Å—Ç–≤–∏—è", "—Å–ø–∏—Å–æ–∫ —Ä–ø", "–∫–æ–º–∞–Ω–¥—ã —Ä–ø")))
async def cmd_show_rp_actions_list(message: types.Message, bot: Bot):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö RP-–¥–µ–π—Å—Ç–≤–∏–π, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
    """
    response_parts = ["<b>üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ RP-–¥–µ–π—Å—Ç–≤–∏—è:</b>\n"]
    for category_name, actions in RPActions.ALL_ACTIONS_LIST_BY_CATEGORY.items():
        response_parts.append(f"<b>{category_name}:</b>")
        action_lines = [f"  ‚Ä¢ <code>{action}</code> (–∏–ª–∏ <code>/rp {action}</code>)" for action in actions]
        response_parts.append("\n".join(action_lines))
        response_parts.append("") # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π

    response_parts.append(
        "<i>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É (<code>–æ–±–Ω—è—Ç—å</code>) "
        "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ <code>/rp –æ–±–Ω—è—Ç—å</code>, —Ç–∞–∫–∂–µ –æ—Ç–≤–µ—á–∞—è –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞—è —Ü–µ–ª—å (@–Ω–∏–∫).</i>"
    )
    await message.reply("\n".join(response_parts), parse_mode=ParseMode.HTML, disable_web_page_preview=True)

@rp_router.message(F.text.lower().contains("—Å–ø–∞—Å–∏–±–æ"))
async def reaction_thanks(message: types.Message, bot: Bot, profile_manager: ProfileManager):
    """–ü—Ä–∏–º–µ—Ä: –†–µ–∞–∫—Ü–∏—è –Ω–∞ "—Å–ø–∞—Å–∏–±–æ"."""
    if not message.from_user: return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ HP –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
    if await check_and_notify_rp_state(message.from_user, bot, profile_manager, message): return
    await message.reply("–í—Å–µ–≥–¥–∞ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üòä")

@rp_router.message(F.text.lower().contains("–ª—é–±–ª—é"))
async def reaction_love(message: types.Message, bot: Bot, profile_manager: ProfileManager):
    """–ü—Ä–∏–º–µ—Ä: –†–µ–∞–∫—Ü–∏—è –Ω–∞ "–ª—é–±–ª—é"."""
    if not message.from_user: return
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ HP –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
    if await check_and_notify_rp_state(message.from_user, bot, profile_manager, message): return
    await message.reply("–ò —è –≤–∞—Å –ª—é–±–ª—é! ‚ù§Ô∏èü§°")


async def periodic_hp_recovery_task(bot: Bot, profile_manager: ProfileManager, db_module: Any):
    """
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –°–∫–∞–Ω–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ HP.
    """
    if not HAS_PROFILE_MANAGER:
        logger.error("Periodic HP recovery task cannot start: ProfileManager is missing.")
        return
    logger.info("Periodic HP recovery task started.")
    while True:
        await asyncio.sleep(60) # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        now = time.time()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ db_module (–¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
            if not hasattr(db_module, 'get_users_for_hp_recovery'):
                logger.error("Periodic HP recovery: db_module.get_users_for_hp_recovery function is missing!")
                continue
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è –≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ HP
            users_to_recover: List[Tuple[int, int]] = await db_module.get_users_for_hp_recovery(now, RPConfig.MIN_HP)

            if users_to_recover:
                logger.info(f"Periodic recovery: Found {len(users_to_recover)} users for HP recovery.")
                for user_id, current_hp_val in users_to_recover:
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HP –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                    new_hp, _ = await _update_user_hp(profile_manager, user_id, RPConfig.HP_RECOVERY_AMOUNT)
                    logger.info(f"Periodic recovery: User {user_id} HP auto-recovered from {current_hp_val} to {new_hp}.")
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ PM
                        await bot.send_message(
                            user_id,
                            f"‚úÖ –í–∞—à–µ HP –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {new_hp}/{RPConfig.MAX_HP}! –í—ã —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é."
                        )
                    except TelegramAPIError as e:
                        logger.warning(f"Periodic recovery: Could not send PM to user {user_id}: {e.message}")
        except Exception as e:
            logger.error(f"Error in periodic_hp_recovery_task: {e}", exc_info=True)

def setup_rp_handlers(main_dp: Router, bot_instance: Bot, profile_manager_instance: ProfileManager, database_module: Any):
    if not HAS_PROFILE_MANAGER:
        logging.error("Not setting up RP handlers because ProfileManager is missing.")
        return
    main_dp.include_router(rp_router)
    logger.info("RP router included and configured.")

