from core.group.RP.rmain import *
from core.group.RP.config import *
from core.group.RP.actions import *
from core.group.RP.more import *

rp_router = Router(name="rp_module")
rp_router.message.filter(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))
 
async def _update_user_hp(
    profile_manager: ProfileManager,
    user_id: int,
    hp_change: int
) -> Tuple[int, bool]:
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ–µ HP –∏ —Ñ–ª–∞–≥, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–∫–∞—É—Ç–∏—Ä–æ–≤–∞–Ω.
    """
    stats = await db.get_user_rp_stats(user_id)
    current_hp = stats.get('hp', RPConfig.DEFAULT_HP)
    new_hp = max(RPConfig.MIN_HP, min(RPConfig.MAX_HP, current_hp + hp_change))
    knocked_out_this_time = False
    update_fields = {'hp': new_hp}

    if new_hp <= RPConfig.MIN_HP and current_hp > RPConfig.MIN_HP:
        # –ï—Å–ª–∏ HP —É–ø–∞–ª–æ –¥–æ –∏–ª–∏ –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ, –∏ —Ä–∞–Ω—å—à–µ –±—ã–ª–æ –≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
        recovery_ts = time.time() + RPConfig.HP_RECOVERY_TIME_SECONDS
        update_fields['recovery_end_ts'] = recovery_ts
        knocked_out_this_time = True
        logger.info(f"User {user_id} HP dropped to {new_hp}. Recovery timer set for {RPConfig.HP_RECOVERY_TIME_SECONDS}s.")
    elif new_hp > RPConfig.MIN_HP and stats.get('recovery_end_ts', 0.0) > 0.0:
        # –ï—Å–ª–∏ HP –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å –≤—ã—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        update_fields['recovery_end_ts'] = 0.0
        logger.info(f"User {user_id} HP recovered above min. Recovery timer reset.")

    await profile_manager.update_user_rp_stats(user_id, **update_fields)
    return new_hp, knocked_out_this_time

async def handle_rp_action(
    message: types.Message, 
    bot: Bot, 
    profile_manager: ProfileManager,
    action_name: str,
    target_user: Optional[types.User] = None
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç RP-–¥–µ–π—Å—Ç–≤–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ—Ç HP —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    sender_id = message.from_user.id
    sender_name = get_user_display_name(message.from_user)
    action_data = RPActions.ALL_ACTION_DATA.get(action_name.lower())

    if not action_data:
        logger.warning(f"RP Action '{action_name}' not found in ALL_ACTION_DATA.")
        await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ RP-–¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    hp_change_sender = action_data.get("hp_change_sender", 0)
    hp_change_target = action_data.get("hp_change_target", 0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–∫–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if await is_user_knocked_out(profile_manager, sender_id, bot, message):
        logger.info(f"Sender {sender_id} is knocked out. Cannot perform RP action.")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    new_sender_hp, sender_knocked_out = await _update_user_hp(profile_manager, sender_id, hp_change_sender)

    if target_user:
        if target_user.id == sender_id:
            await message.reply("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å RP-–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return

        target_id = target_user.id
        target_name = get_user_display_name(target_user)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–∫–∞—É—Ç —Ü–µ–ª–∏ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–µ–±—è)
        if await is_user_knocked_out(profile_manager, target_id, bot, message):
            logger.info(f"Target {target_id} is knocked out. Cannot perform RP action on them.")
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP —Ü–µ–ª–∏
        new_target_hp, target_knocked_out = await _update_user_hp(profile_manager, target_id, hp_change_target)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏–∏
        action_message = f"{sender_name} {action_name} {target_name}!"
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ HP
        action_message += f" (HP: {sender_name}: {new_sender_hp}/{RPConfig.MAX_HP}, {target_name}: {new_target_hp}/{RPConfig.MAX_HP})"

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–æ–∫–∞—É—Ç–µ
        if target_knocked_out:
            action_message += f"\nüí• {target_name} –Ω–æ–∫–∞—É—Ç–∏—Ä–æ–≤–∞–Ω(–∞)! –û–Ω(–∞) –Ω–µ –º–æ–∂–µ—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è {RPConfig.HP_RECOVERY_TIME_SECONDS // 60} –º–∏–Ω—É—Ç."
        if sender_knocked_out:
            action_message += f"\nüò© {sender_name} –Ω–æ–∫–∞—É—Ç–∏—Ä–æ–≤–∞–Ω(–∞)! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è {RPConfig.HP_RECOVERY_TIME_SECONDS // 60} –º–∏–Ω—É—Ç."

        await message.answer(action_message)
        logger.info(f"RP Action '{action_name}' performed by {sender_id} on {target_id}. Sender HP: {new_sender_hp}, Target HP: {new_target_hp}.")
    else:
        # –î–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∑–∞—Å–º–µ—è—Ç—å—Å—è")
        action_message = f"{sender_name} {action_name}!"
        action_message += f" (HP: {sender_name}: {new_sender_hp}/{RPConfig.MAX_HP})"
        if sender_knocked_out:
            action_message += f"\nüò© {sender_name} –Ω–æ–∫–∞—É—Ç–∏—Ä–æ–≤–∞–Ω(–∞)! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è {RPConfig.HP_RECOVERY_TIME_SECONDS // 60} –º–∏–Ω—É—Ç."
        await message.answer(action_message)
        logger.info(f"RP Action '{action_name}' performed by {sender_id}. Sender HP: {new_sender_hp}.")

@rp_router.message(Command("hp", "—Ö–ø", "–º–æ–µ—Ö–ø", "–º–æ—ë—Ö–ø", "–∑–¥–æ—Ä–æ–≤—å–µ", "–º–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "–º–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ"))
async def cmd_check_self_hp(message: types.Message, bot: Bot, profile_manager: ProfileManager):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
    """
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested HP check.")
    
    stats = await db.get_user_rp_stats(user_id)
    current_hp = stats.get('hp', RPConfig.DEFAULT_HP)
    recovery_end_ts = stats.get('recovery_end_ts', 0.0)
    heal_cooldown_ts = stats.get('heal_cooldown_ts', 0.0)

    status_message = f"‚ù§Ô∏è –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ HP: {current_hp}/{RPConfig.MAX_HP}.\n"

    if current_hp <= RPConfig.MIN_HP:
        now = time.time()
        if recovery_end_ts > now:
            remaining_time = int(recovery_end_ts - now)
            status_message += f"–í—ã –Ω–æ–∫–∞—É—Ç–∏—Ä–æ–≤–∞–Ω—ã! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {format_timedelta(remaining_time)}.\n"
        else:
            status_message += "–í—ã –Ω–æ–∫–∞—É—Ç–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.\n"
    
    now = time.time()
    if heal_cooldown_ts > now:
        remaining_heal_cooldown = int(heal_cooldown_ts - now)
        status_message += f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä—É—á–Ω–æ–≥–æ –ª–µ—á–µ–Ω–∏—è: {format_timedelta(remaining_heal_cooldown)}."

    await message.reply(status_message)


@rp_router.message(Command("rpactions", "rp_actions", "—Å–ø–∏—Å–æ–∫–¥–µ–π—Å—Ç–≤–∏–π", "—Å–ø–∏—Å–æ–∫_–¥–µ–π—Å—Ç–≤–∏–π", "—Ä–ø–¥–µ–π—Å—Ç–≤–∏—è", "—Ä–ø_–¥–µ–π—Å—Ç–≤–∏—è", "–∫–æ–º–∞–Ω–¥—ã—Ä–ø", "–∫–æ–º–∞–Ω–¥—ã_—Ä–ø", "—Å–ø–∏—Å–æ–∫—Ä–ø", "—Å–ø–∏—Å–æ–∫_—Ä–ø"))
async def cmd_show_rp_actions_list(message: types.Message, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö RP-–¥–µ–π—Å—Ç–≤–∏–π.
    """
    logger.info(f"User {message.from_user.id} requested RP actions list.")
    
    response_text = hbold("–î–æ—Å—Ç—É–ø–Ω—ã–µ RP-–¥–µ–π—Å—Ç–≤–∏—è:\n")
    for category, actions in RPActions.INTIMATE_ACTIONS.items():
        response_text += f"\n{hbold(category.capitalize())}:\n"
        for action_name, data in actions.items():
            hp_target = data.get('hp_change_target', 0)
            hp_sender = data.get('hp_change_sender', 0)
            
            hp_info = []
            if hp_target != 0:
                hp_info.append(f"–¶–µ–ª—å: {hp_target:+d} HP")
            if hp_sender != 0:
                hp_info.append(f"–í—ã: {hp_sender:+d} HP")
            
            hp_str = f" ({', '.join(hp_info)})" if hp_info else ""
            
            response_text += f"  - /{action_name}{hp_str}\n" # –ü–æ–∫–∞ —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã

    response_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /<–¥–µ–π—Å—Ç–≤–∏–µ> –∏–ª–∏ <–¥–µ–π—Å—Ç–≤–∏–µ> <@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å>"
    
    await message.answer(response_text, parse_mode=ParseMode.HTML)


@rp_router.message(F.text)
async def handle_rp_action_via_text(message: types.Message, bot: Bot, profile_manager: ProfileManager, command_text_payload: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç RP-–¥–µ–π—Å—Ç–≤–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–º (–±–µ–∑ —Å–ª–µ—à–∞),
    –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ –∏–∑ censor_module.
    command_text_payload —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    logger.debug(f"handle_rp_action_via_text: Received text message: '{command_text_payload}' from user {message.from_user.id}.")

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –∏, –≤–æ–∑–º–æ–∂–Ω–æ, —Ü–µ–ª—å –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    parts = command_text_payload.lower().split()
    
    # –ò—â–µ–º –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ—Ñ–∏–∫—Å–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    action_name = None
    target_mention = None

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –¥–ª–∏–Ω–µ –≤ —É–±—ã–≤–∞—é—â–µ–º –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ–±—ã –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ü–µ–ª—É–π")
    # –∏–º–µ–ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–¥ –∫–æ—Ä–æ—Ç–∫–∏–º–∏ ("–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å").
    sorted_actions = sorted(RPActions.ALL_ACTION_DATA.keys(), key=len, reverse=True)

    for action_key in sorted_actions:
        if command_text_payload.startswith(action_key):
            action_name = action_key
            # –û—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            remaining_text = command_text_payload[len(action_key):].strip()
            if remaining_text:
                # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                match = re.search(r'@(\w+)', remaining_text)
                if match:
                    target_mention = match.group(1)
            break # –ù–∞—à–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –≤—ã—Ö–æ–¥–∏–º

    if not action_name:
        logger.debug(f"handle_rp_action_via_text: No RP action found in text: '{command_text_payload}'.")
        return # –≠—Ç–æ –Ω–µ RP-–¥–µ–π—Å—Ç–≤–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    target_user = None
    if target_mention:
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id –ø–æ username
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–∞, –º—ã –ø–æ–∫–∞ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º target_user –∏ –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ
        # –¥–µ–π—Å—Ç–≤–∏–µ –≤—Å–µ–≥–¥–∞ –±–µ–∑ —Ü–µ–ª–∏, –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è.
        # –í –≤–∞—à–µ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –±–æ—Ç —É–º–µ–µ—Ç —Ä–µ–∑–æ–ª–≤–∏—Ç—å @username –≤ user_id, —ç—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–¥–µ—Å—å.
        # –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ API Telegram, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–∏—Å–∞–ª –±–æ—Ç—É.
        
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ü–µ–ª—å —É–ø–æ–º—è–Ω—É—Ç–∞, –Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ü–µ–ª—å –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ –Ω–µ–µ.
        # –ü–æ–∫–∞ —á—Ç–æ, –º—ã –ø—Ä–æ—Å—Ç–æ –Ω–µ –±—É–¥–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å target_user, –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –µ–≥–æ –Ω–∞–π—Ç–∏.
        logger.warning(f"handle_rp_action_via_text: Target user mention '{target_mention}' found, but resolution to user object is not implemented.")
        # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ:
        # target_user = await get_user_by_username(target_mention) 
        pass # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ target_user, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –µ–≥–æ –Ω–∞–π—Ç–∏

    logger.info(f"handle_rp_action_via_text: Processing RP action '{action_name}' (via text) for user {message.from_user.id}.")
    await handle_rp_action(message, bot, profile_manager, action_name, target_user)


@rp_router.message(F.text.regexp(r"^/(\w+)(?:\s+@(\w+))?"))
async def handle_rp_action_via_slash_command(message: types.Message, bot: Bot, profile_manager: ProfileManager):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç RP-–¥–µ–π—Å—Ç–≤–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å @username).
    """
    logger.debug(f"handle_rp_action_via_slash_command: Received slash command: '{message.text}' from user {message.from_user.id}.")
    
    match = re.match(r"^/(\w+)(?:\s+@(\w+))?", message.text)
    if not match:
        logger.warning(f"handle_rp_action_via_slash_command: Regex did not match for message: '{message.text}'. Skipping.")
        return

    action_name = match.group(1).lower()
    target_mention = match.group(2)

    if action_name not in RPActions.ALL_ACTION_DATA:
        logger.debug(f"handle_rp_action_via_slash_command: Action '{action_name}' not a recognized RP action. Skipping.")
        return # –≠—Ç–æ –Ω–µ RP-–¥–µ–π—Å—Ç–≤–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    target_user = None
    if target_mention:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username.
        # –í Aiogram —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–¥–µ–ª–∞–Ω–æ —á–µ—Ä–µ–∑ message.bot.get_chat_member –∏–ª–∏ –ø–æ—Ö–æ–∂–∏–µ –º–µ—Ç–æ–¥—ã,
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ –∏ –±–æ—Ç –∏–º–µ–µ—Ç –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø.
        # –ò–ª–∏, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å user_id –ø–æ username.
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Telegram
            # –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –≤—Å–µ–≥–¥–∞ –≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å–ª–∏ –±–æ—Ç –Ω–µ –≤–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            # –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É –≤ –ª–∏—á–∫—É.
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –º—ã –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å mock-–æ–±—ä–µ–∫—Ç –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞.
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –∏ –∏—â–µ–º –ø–æ username
            chat_members = await bot.get_chat_administrators(message.chat.id) # –≠—Ç–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã, –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö
            # –ë–æ–ª–µ–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ –Ω–µ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞–ø—Ä—è–º—É—é –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –±–æ—Ç–æ–≤.
            # –õ—É—á—à–∏–π —Å–ø–æ—Å–æ–± - —ç—Ç–æ –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–≤–æ—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—É—é –≤—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ.
            
            # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –ø–æ–∫–∞ —á—Ç–æ, –º—ã –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ target_user - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±—ä–µ–∫—Ç —Å id –∏ first_name
            # –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–ø–æ—Å–æ–± –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç types.User, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ.
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ target_mention - —ç—Ç–æ username, —Ç–æ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç User
            # –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –æ–Ω–∞ —É –≤–∞—Å –µ—Å—Ç—å.
            
            # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ "–≤–∏–¥–µ—Ç—å" –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ,
            # –µ–º—É –Ω—É–∂–Ω–æ –±—ã—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø—Ä–∞–≤–∞–º–∏.
            # –ò–ª–∏ –∂–µ, –µ—Å–ª–∏ –≤—ã —Ö—Ä–∞–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–≤–æ–µ–π –ë–î, —Ç–æ –∏–∑–≤–ª–µ–∫–∞—Ç—å –æ—Ç—Ç—É–¥–∞.
            
            # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –º—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `message.reply_to_message`
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ —á—å–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
            if message.reply_to_message and message.reply_to_message.from_user:
                target_user = message.reply_to_message.from_user
                logger.debug(f"RP action: Target user resolved from reply_to_message: {target_user.id}")
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞, –∏—â–µ–º –ø–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—é. –≠—Ç–æ —Å–ª–æ–∂–Ω–µ–µ –±–µ–∑ –ë–î –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
                # –ü–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–∏–º target_user –∫–∞–∫ None, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ reply_to_message.
                logger.warning(f"RP action: Could not resolve target user '{target_mention}' from reply or internal database.")
                await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_mention}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω(–∞) –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –µ–≥–æ(–µ—ë) —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ü–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        except Exception as e:
            logger.error(f"Error resolving target user '{target_mention}': {e}", exc_info=True)
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{target_mention}.")
            return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–µ–ª–∏

    logger.info(f"handle_rp_action_via_slash_command: Processing RP action '{action_name}' (via slash command) for user {message.from_user.id}.")
    await handle_rp_action(message, bot, profile_manager, action_name, target_user)


@rp_router.message(Command("heal", "–ª–µ—á–∏—Ç—å"))
async def cmd_heal(message: types.Message, bot: Bot, profile_manager: ProfileManager):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HP –≤—Ä—É—á–Ω—É—é –∑–∞ Lumcoins.
    """
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested to heal.")

    stats = await db.get_user_rp_stats(user_id)
    current_hp = stats.get('hp', RPConfig.DEFAULT_HP)
    heal_cooldown_ts = stats.get('heal_cooldown_ts', 0.0)
    
    now = time.time()

    if current_hp >= RPConfig.MAX_HP:
        await message.reply("üòå –í–∞—à–µ HP —É–∂–µ –ø–æ–ª–Ω–æ–µ!")
        return

    if heal_cooldown_ts > now:
        remaining_time = int(heal_cooldown_ts - now)
        await message.reply(f"‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –ª–µ—á–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {format_timedelta(remaining_time)}.")
        return

    user_profile = await profile_manager.get_user_profile(message.from_user)
    if not user_profile:
        logger.error(f"Failed to get user profile for {user_id} during heal attempt.")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª–µ—á–µ–Ω–∏—è.")
        return

    lumcoins = user_profile.get('lumcoins', 0)

    if lumcoins < RPConfig.HEAL_COST:
        await message.reply(f"üí∞ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Lumcoins –¥–ª—è –ª–µ—á–µ–Ω–∏—è. –ù—É–∂–Ω–æ {RPConfig.HEAL_COST}, —É –≤–∞—Å {lumcoins}.")
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ª–µ—á–µ–Ω–∏–µ
    new_hp, _ = await _update_user_hp(profile_manager, user_id, RPConfig.HEAL_AMOUNT)
    
    # –°–Ω–∏–º–∞–µ–º Lumcoins
    await profile_manager.update_user_profile(user_id, lumcoins=lumcoins - RPConfig.HEAL_COST)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ –ª–µ—á–µ–Ω–∏–µ
    new_cooldown_ts = now + RPConfig.HEAL_COOLDOWN_SECONDS
    await profile_manager.update_user_rp_stats(user_id, heal_cooldown_ts=new_cooldown_ts)

    await message.reply(f"üíä –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ª–µ—á–∏–ª–∏—Å—å –Ω–∞ {RPConfig.HEAL_AMOUNT} HP! –í–∞—à–µ HP: {new_hp}/{RPConfig.MAX_HP}. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {RPConfig.HEAL_COST} Lumcoins.")
    logger.info(f"User {user_id} healed for {RPConfig.HEAL_AMOUNT} HP. New HP: {new_hp}. Lumcoins spent: {RPConfig.HEAL_COST}.")


async def periodic_hp_recovery_task(bot: Bot, profile_manager: ProfileManager, db_module: Any):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è HP –Ω–æ–∫–∞—É—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    logger.info("Periodic HP recovery task started.")
    while True:
        try:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ HP_RECOVERY_TIME_SECONDS –≤–º–µ—Å—Ç–æ HP_RECOVERY_INTERVAL_SECONDS
            await asyncio.sleep(RPConfig.HP_RECOVERY_TIME_SECONDS) 
            logger.debug("Periodic recovery: Checking for users to recover HP.")
            
            now = time.time()
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö HP <= MIN_HP –∏ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º db_module –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if not hasattr(db_module, 'get_users_for_hp_recovery'):
                logger.error("Database module does not have 'get_users_for_hp_recovery' function. Aborting periodic recovery.")
                continue
            
            users_to_recover: List[Tuple[int, int]] = await db_module.get_users_for_hp_recovery(now, RPConfig.MIN_HP)

            if users_to_recover:
                logger.info(f"Periodic recovery: Found {len(users_to_recover)} users for HP recovery.")
                for user_id, current_hp_val in users_to_recover:
                    new_hp, _ = await _update_user_hp(profile_manager, user_id, RPConfig.HP_RECOVERY_AMOUNT)
                    logger.info(f"Periodic recovery: User {user_id} HP auto-recovered from {current_hp_val} to {new_hp}.")
                    try:
                        await bot.send_message(
                            user_id,
                            f"‚úÖ –í–∞—à–µ HP –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {new_hp}/{RPConfig.MAX_HP}! –í—ã —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é."
                        )
                    except TelegramAPIError as e:
                        logger.warning(f"Periodic recovery: Could not send PM to user {user_id}: {e.message}")
        except Exception as e:
            logger.error(f"Error in periodic_hp_recovery_task: {e}", exc_info=True)

def setup_rp_handlers(main_dp: Router, bot_instance: Bot, profile_manager_instance: ProfileManager, database_module: Any):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç RP-–º–æ–¥—É–ª—å: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
    """
    if not HAS_PROFILE_MANAGER:
        logging.error("Not setting up RP handlers because ProfileManager is missing.")
        return

    # –£–¥–∞–ª–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ rp_router.message.bind_arg(...), —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –≤—ã–∑—ã–≤–∞–ª–∏ AttributeError.
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏–ª–∏ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    main_dp.include_router(rp_router)
    logger.info("RP router included and configured.")
