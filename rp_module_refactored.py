import re
from aiogram.utils.markdown import hbold
from aiogram import Router, types, F, Bot
from aiogram.enums import ChatType, ParseMode, MessageEntityType
from aiogram.filters import Command
from aiogram.exceptions import TelegramAPIError
from contextlib import suppress
import time
from typing import Optional, Tuple, Any, List
import asyncio 
import logging # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç logging

# –ò–º–ø–æ—Ä—Ç –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
import database as db

# –ò–º–ø–æ—Ä—Ç ProfileManager (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ group_stat.manager)
try:
    from core.group.stat.manager import ProfileManager as RealProfileManager
    HAS_PROFILE_MANAGER = True
except ImportError:
    # import logging # –≠—Ç–æ—Ç –∏–º–ø–æ—Ä—Ç –±—ã–ª –∑–¥–µ—Å—å, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞.
    logging.critical("CRITICAL: Module 'core.group.stat.manager' or 'ProfileManager' not found. RP functionality will be severely impaired or non-functional.")
    HAS_PROFILE_MANAGER = False
    class RealProfileManager:
        async def get_user_rp_stats(self, user_id: int) -> dict:
            return {'hp': 100, 'recovery_end_ts': 0.0, 'heal_cooldown_ts': 0.0}
        async def update_user_rp_stats(self, user_id: int, **kwargs: Any) -> None:
            pass
        async def get_user_profile(self, user: types.User) -> Optional[dict]:
            return None
        async def connect(self) -> None:
            pass
        async def close(self) -> None:
            pass

ProfileManager = RealProfileManager

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ RP
from core.group.RP.config import RPConfig
from core.group.RP.actions import RPActions

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ more.py
from core.group.RP.more import (
    get_user_display_name, 
    _update_user_hp, 
    _parse_rp_message, # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø–∞—Ä—Å–∏–Ω–≥–∞
    format_timedelta, 
    is_user_knocked_out
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

rp_router = Router(name="rp_module")
rp_router.message.filter(F.chat.type.in_({ChatType.GROUP, ChatType.SUPERGROUP}))

async def handle_rp_action(
    message: types.Message, 
    bot: Bot, 
    profile_manager: ProfileManager,
    action_name: str,
    target_user: Optional[types.User] = None,
    custom_text: Optional[str] = None # –ù–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç RP-–¥–µ–π—Å—Ç–≤–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ—Ç HP —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    sender_id = message.from_user.id
    sender_name = get_user_display_name(message.from_user)
    action_data = RPActions.ALL_ACTION_DATA.get(action_name.lower())

    if not action_data:
        logger.warning(f"RP Action '{action_name}' not found in ALL_ACTION_DATA.")
        await message.reply("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ RP-–¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    hp_change_sender = action_data.get("hp_change_sender", 0)
    hp_change_target = action_data.get("hp_change_target", 0)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–∫–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    if await is_user_knocked_out(profile_manager, sender_id, bot, message):
        logger.info(f"Sender {sender_id} is knocked out. Cannot perform RP action.")
        return

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    new_sender_hp, sender_knocked_out = await _update_user_hp(profile_manager, sender_id, hp_change_sender)

    if target_user:
        # =================================================================
        # –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–ø—Ä–µ—Ç –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –†–ü –∫–æ–º–∞–Ω–¥ –Ω–∞ –±–æ—Ç–æ–≤
        # =================================================================
        if target_user.is_bot:
            await message.reply("ü§ñ –†–ü-–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ –±–æ—Ç–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.")
            return
        # =================================================================

        if target_user.id == sender_id:
            await message.reply("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å RP-–¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —Å–∞–º–æ–≥–æ —Å–µ–±—è.")
            return

        target_id = target_user.id
        target_name = get_user_display_name(target_user)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–∫–∞—É—Ç —Ü–µ–ª–∏ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ —Å–µ–±—è)
        if await is_user_knocked_out(profile_manager, target_id, bot, message):
            logger.info(f"Target {target_id} is knocked out. Cannot perform RP action on them.")
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HP —Ü–µ–ª–∏
        new_target_hp, target_knocked_out = await _update_user_hp(profile_manager, target_id, hp_change_target)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–µ–π—Å—Ç–≤–∏–∏ —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        action_message = f"{sender_name} {action_name} {target_name}"
        if custom_text: # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            action_message += f" {custom_text}"
        
        action_message += f"\n({target_name} {hp_change_target:+d} HP, {sender_name} {hp_change_sender:+d} HP)"
        action_message += f"\n\nHP {target_name}: {new_target_hp}/{RPConfig.MAX_HP}"
        action_message += f"\nHP {sender_name}: {new_sender_hp}/{RPConfig.MAX_HP}"

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –Ω–æ–∫–∞—É—Ç–µ
        if target_knocked_out:
            action_message += f"\nüí• {target_name} –Ω–æ–∫–∞—É—Ç–∏—Ä–æ–≤–∞–Ω(–∞)! –û–Ω(–∞) –Ω–µ –º–æ–∂–µ—Ç —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è {RPConfig.HP_RECOVERY_TIME_SECONDS // 60} –º–∏–Ω—É—Ç."
        if sender_knocked_out:
            action_message += f"\nüò© {sender_name} –Ω–æ–∫–∞—É—Ç–∏—Ä–æ–≤–∞–Ω(–∞)! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è {RPConfig.HP_RECOVERY_TIME_SECONDS // 60} –º–∏–Ω—É—Ç."

        await message.answer(action_message)
        logger.info(f"RP Action '{action_name}' performed by {sender_id} on {target_id}. Sender HP: {new_sender_hp}, Target HP: {new_target_hp}.")
    else:
        # –î–µ–π—Å—Ç–≤–∏–µ –±–µ–∑ —Ü–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–∑–∞—Å–º–µ—è—Ç—å—Å—è")
        action_message = f"{sender_name} {action_name}"
        if custom_text: # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            action_message += f" {custom_text}"
        action_message += f"\n(HP {sender_name}: {new_sender_hp}/{RPConfig.MAX_HP})"
        if sender_knocked_out:
            action_message += f"\nüò© {sender_name} –Ω–æ–∫–∞—É—Ç–∏—Ä–æ–≤–∞–Ω(–∞)! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏—è {RPConfig.HP_RECOVERY_TIME_SECONDS // 60} –º–∏–Ω—É—Ç."
        await message.answer(action_message)
        logger.info(f"RP Action '{action_name}' performed by {sender_id}. Sender HP: {new_sender_hp}.")

    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –±—ã–ª–æ –∫–æ–º–∞–Ω–¥–æ–π —Å–æ —Å–ª—ç—à–µ–º
    if message.text and not message.text.startswith('/'):
        with suppress(TelegramAPIError):
            await message.delete()
            logger.info(f"Original message {message.message_id} deleted after RP action.")


@rp_router.message(Command("hp", "—Ö–ø", "–º–æ–µ—Ö–ø", "–º–æ—ë—Ö–ø", "–∑–¥–æ—Ä–æ–≤—å–µ", "–º–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ", "–º–æ—ë –∑–¥–æ—Ä–æ–≤—å–µ"))
async def cmd_check_self_hp(message: types.Message, bot: Bot, profile_manager: ProfileManager):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ HP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞—Ç—É—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.
    """
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested HP check.")
    
    stats = await db.get_user_rp_stats(user_id)
    current_hp = stats.get('hp', RPConfig.DEFAULT_HP)
    recovery_end_ts = stats.get('recovery_end_ts', 0.0)
    heal_cooldown_ts = stats.get('heal_cooldown_ts', 0.0)

    status_message = f"‚ù§Ô∏è –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ HP: {current_hp}/{RPConfig.MAX_HP}.\n"

    if current_hp <= RPConfig.MIN_HP:
        now = time.time()
        if recovery_end_ts > now:
            remaining_time = int(recovery_end_ts - now)
            status_message += f"–í—ã –Ω–æ–∫–∞—É—Ç–∏—Ä–æ–≤–∞–Ω—ã! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {format_timedelta(remaining_time)}.\n"
        else:
            status_message += "–í—ã –Ω–æ–∫–∞—É—Ç–∏—Ä–æ–≤–∞–Ω—ã, –Ω–æ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ, —á—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.\n"
    
    now = time.time()
    if heal_cooldown_ts > now:
        remaining_heal_cooldown = int(heal_cooldown_ts - now)
        status_message += f"–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä—É—á–Ω–æ–≥–æ –ª–µ—á–µ–Ω–∏—è: {format_timedelta(remaining_heal_cooldown)}."

    await message.reply(status_message)


@rp_router.message(Command("rpactions", "rp_actions", "—Å–ø–∏—Å–æ–∫–¥–µ–π—Å—Ç–≤–∏–π", "—Å–ø–∏—Å–æ–∫_–¥–µ–π—Å—Ç–≤–∏–π", "—Ä–ø–¥–µ–π—Å—Ç–≤–∏—è", "—Ä–ø_–¥–µ–π—Å—Ç–≤–∏—è", "–∫–æ–º–∞–Ω–¥—ã—Ä–ø", "–∫–æ–º–∞–Ω–¥—ã_—Ä–ø", "—Å–ø–∏—Å–æ–∫—Ä–ø", "—Å–ø–∏—Å–æ–∫_—Ä–ø"))
async def cmd_show_rp_actions_list(message: types.Message, bot: Bot):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö RP-–¥–µ–π—Å—Ç–≤–∏–π.
    """
    logger.info(f"User {message.from_user.id} requested RP actions list.")
    
    response_text = hbold("–î–æ—Å—Ç—É–ø–Ω—ã–µ RP-–¥–µ–π—Å—Ç–≤–∏—è:\n")
    for category, actions in RPActions.INTIMATE_ACTIONS.items():
        response_text += f"\n{hbold(category.capitalize())}:\n"
        for action_name, data in actions.items():
            hp_target = data.get('hp_change_target', 0)
            hp_sender = data.get('hp_change_sender', 0)
            
            hp_info = []
            if hp_target != 0:
                hp_info.append(f"–¶–µ–ª—å: {hp_target:+d} HP")
            if hp_sender != 0:
                hp_info.append(f"–í—ã: {hp_sender:+d} HP")
            
            hp_str = f" ({', '.join(hp_info)})" if hp_info else ""
            
            response_text += f"  - /{action_name}{hp_str}\n" # –ü–æ–∫–∞ —á—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã

    response_text += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /<–¥–µ–π—Å—Ç–≤–∏–µ> –∏–ª–∏ <–¥–µ–π—Å—Ç–≤–∏–µ> <@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> [–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç]"
    
    await message.answer(response_text, parse_mode=ParseMode.HTML)


@rp_router.message(F.text)
async def handle_rp_action_via_text(message: types.Message, bot: Bot, profile_manager: ProfileManager):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç RP-–¥–µ–π—Å—Ç–≤–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç–æ–º (–±–µ–∑ —Å–ª–µ—à–∞).
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç message.text –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    logger.debug(f"handle_rp_action_via_text: Received text message: '{message.text}' from user {message.from_user.id}.")

    action_name, target_user, custom_text = await _parse_rp_message(message, bot)

    if not action_name:
        logger.debug(f"handle_rp_action_via_text: No RP action found in text: '{message.text}'. Skipping.")
        return # –≠—Ç–æ –Ω–µ RP-–¥–µ–π—Å—Ç–≤–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    logger.info(f"handle_rp_action_via_text: Processing RP action '{action_name}' (via text) for user {message.from_user.id}. Target: {target_user.id if target_user else 'None'}. Custom text: '{custom_text}'")
    await handle_rp_action(message, bot, profile_manager, action_name, target_user, custom_text)


@rp_router.message(F.text.regexp(r"^/(\w+)(?:\s+(.*?))?$")) # –û–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ custom_text
async def handle_rp_action_via_slash_command(message: types.Message, bot: Bot, profile_manager: ProfileManager):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç RP-–¥–µ–π—Å—Ç–≤–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–∫ —Å–ª–µ—à-–∫–æ–º–∞–Ω–¥—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, /–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å @username).
    """
    logger.debug(f"handle_rp_action_via_slash_command: Received slash command: '{message.text}' from user {message.from_user.id}.")
    
    action_name, target_user, custom_text = await _parse_rp_message(message, bot)

    if not action_name:
        logger.debug(f"handle_rp_action_via_slash_command: No RP action found in command: '{message.text}'. Skipping.")
        return # –≠—Ç–æ –Ω–µ RP-–¥–µ–π—Å—Ç–≤–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

    logger.info(f"handle_rp_action_via_slash_command: Processing RP action '{action_name}' (via slash command) for user {message.from_user.id}. Target: {target_user.id if target_user else 'None'}. Custom text: '{custom_text}'")
    await handle_rp_action(message, bot, profile_manager, action_name, target_user, custom_text)


@rp_router.message(Command("heal", "–ª–µ—á–∏—Ç—å"))
async def cmd_heal(message: types.Message, bot: Bot, profile_manager: ProfileManager):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å HP –≤—Ä—É—á–Ω—É—é –∑–∞ Lumcoins.
    """
    user_id = message.from_user.id
    logger.info(f"User {user_id} requested to heal.")

    stats = await db.get_user_rp_stats(user_id)
    current_hp = stats.get('hp', RPConfig.DEFAULT_HP)
    heal_cooldown_ts = stats.get('heal_cooldown_ts', 0.0)
    
    now = time.time()

    if current_hp >= RPConfig.MAX_HP:
        await message.reply("üòå –í–∞—à–µ HP —É–∂–µ –ø–æ–ª–Ω–æ–µ!")
        return

    if heal_cooldown_ts > now:
        remaining_time = int(heal_cooldown_ts - now)
        await message.reply(f"‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –ª–µ—á–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {format_timedelta(remaining_time)}.")
        return

    user_profile = await profile_manager.get_user_profile(message.from_user)
    if not user_profile:
        logger.error(f"Failed to get user profile for {user_id} during heal attempt.")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –ª–µ—á–µ–Ω–∏—è.")
        return

    lumcoins = user_profile.get('lumcoins', 0)

    if lumcoins < RPConfig.HEAL_COST:
        await message.reply(f"üí∞ –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ Lumcoins –¥–ª—è –ª–µ—á–µ–Ω–∏—è. –ù—É–∂–Ω–æ {RPConfig.HEAL_COST}, —É –≤–∞—Å {lumcoins}.")
        return

    # –í—ã–ø–æ–ª–Ω—è–µ–º –ª–µ—á–µ–Ω–∏–µ
    new_hp, _ = await _update_user_hp(profile_manager, user_id, RPConfig.HEAL_AMOUNT)
    
    # –°–Ω–∏–º–∞–µ–º Lumcoins
    await profile_manager.update_lumcoins(user_id, -RPConfig.HEAL_COST)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É–ª–¥–∞—É–Ω –Ω–∞ –ª–µ—á–µ–Ω–∏–µ
    new_cooldown_ts = now + RPConfig.HEAL_COOLDOWN_SECONDS
    await profile_manager.update_user_rp_stats(user_id, heal_cooldown_ts=new_cooldown_ts)

    await message.reply(f"üíä –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ª–µ—á–∏–ª–∏—Å—å –Ω–∞ {RPConfig.HEAL_AMOUNT} HP! –í–∞—à–µ HP: {new_hp}/{RPConfig.MAX_HP}. –ü–æ—Ç—Ä–∞—á–µ–Ω–æ {RPConfig.HEAL_COST} Lumcoins.")
    logger.info(f"User {user_id} healed for {RPConfig.HEAL_AMOUNT} HP. New HP: {new_hp}. Lumcoins spent: {RPConfig.HEAL_COST}.")


async def periodic_hp_recovery_task(bot: Bot, profile_manager: ProfileManager, db_module: Any):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è HP –Ω–æ–∫–∞—É—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    logger.info("Periodic HP recovery task started.")
    while True:
        try:
            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ HP_RECOVERY_TIME_SECONDS –≤–º–µ—Å—Ç–æ HP_RECOVERY_INTERVAL_SECONDS
            await asyncio.sleep(RPConfig.HP_RECOVERY_TIME_SECONDS) 
            logger.debug("Periodic recovery: Checking for users to recover HP.")
            
            now = time.time()
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö HP <= MIN_HP –∏ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º db_module –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if not hasattr(db_module, 'get_users_for_hp_recovery'):
                logger.error("Database module does not have 'get_users_for_hp_recovery' function. Aborting periodic recovery.")
                continue
            
            users_to_recover: List[Tuple[int, int]] = await db_module.get_users_for_hp_recovery(now, RPConfig.MIN_HP)

            if users_to_recover:
                logger.info(f"Periodic recovery: Found {len(users_to_recover)} users for HP recovery.")
                for user_id, current_hp_val in users_to_recover:
                    new_hp, _ = await _update_user_hp(profile_manager, user_id, RPConfig.HP_RECOVERY_AMOUNT)
                    logger.info(f"Periodic recovery: User {user_id} HP auto-recovered from {current_hp_val} to {new_hp}.")
                    try:
                        await bot.send_message(
                            user_id,
                            f"‚úÖ –í–∞—à–µ HP –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–æ {new_hp}/{RPConfig.MAX_HP}! –í—ã —Å–Ω–æ–≤–∞ –≤ —Å—Ç—Ä–æ—é."
                        )
                    except TelegramAPIError as e:
                        logger.warning(f"Periodic recovery: Could not send PM to user {user_id}: {e.message}")
        except Exception as e:
            logger.error(f"Error in periodic_hp_recovery_task: {e}", exc_info=True)

def setup_rp_handlers(main_dp: Router, bot_instance: Bot, profile_manager_instance: ProfileManager, database_module: Any):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç RP-–º–æ–¥—É–ª—å: —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
    """
    if not HAS_PROFILE_MANAGER:
        logging.error("Not setting up RP handlers because ProfileManager is missing.")
        return

    # –£–¥–∞–ª–µ–Ω—ã —Å—Ç—Ä–æ–∫–∏ rp_router.message.bind_arg(...), —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –≤—ã–∑—ã–≤–∞–ª–∏ AttributeError.
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏–ª–∏ —è–≤–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏.

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    main_dp.include_router(rp_router)
    logger.info("RP router included and configured.")