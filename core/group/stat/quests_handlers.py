import logging

# –û—Ç–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç aiosqlite
logging.getLogger('aiosqlite').setLevel(logging.WARNING)
from typing import List, Dict, Any, Optional
import json
from datetime import datetime, timedelta
import aiosqlite
from aiogram import Router, types, F, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from aiogram.utils.markdown import hbold, hcode
from aiogram.enums import ParseMode

from core.group.stat.manager import ProfileManager
from core.group.stat.quests_config import QuestsConfig

logger = logging.getLogger(__name__)

# –†–æ—É—Ç–µ—Ä –¥–ª—è –∫–≤–µ—Å—Ç–æ–≤
quests_router = Router(name="quests_router")

async def ensure_quests_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–¥–∞–Ω–∏–π"""
    async with aiosqlite.connect('profiles.db') as db:
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.execute('''
            CREATE TABLE IF NOT EXISTS user_quests (
                user_id INTEGER,
                quest_id TEXT,
                quest_type TEXT,  -- 'daily' –∏–ª–∏ 'weekly'
                quest_data TEXT,  -- JSON —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞–Ω–∏—è
                progress INTEGER DEFAULT 0,
                completed BOOLEAN DEFAULT FALSE,
                reward_claimed BOOLEAN DEFAULT FALSE,
                expires_at TIMESTAMP,
                PRIMARY KEY (user_id, quest_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
        await db.execute('''
            CREATE TABLE IF NOT EXISTS quest_refresh_times (
                user_id INTEGER PRIMARY KEY,
                last_daily_refresh TIMESTAMP,
                last_weekly_refresh TIMESTAMP
            )
        ''')
        
        await db.commit()

async def get_user_quests(user_id: int) -> Dict[str, List[Dict[str, Any]]]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect('profiles.db') as db:
        db.row_factory = aiosqlite.Row
        
        now = datetime.now()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        cursor = await db.execute('''
            SELECT * FROM user_quests 
            WHERE user_id = ? AND expires_at > ?
        ''', (user_id, now))
        
        rows = await cursor.fetchall()
        
        quests = {"daily": [], "weekly": []}
        for row in rows:
            quest_data = json.loads(row['quest_data'])
            quest_data.update({
                'progress': row['progress'],
                'completed': bool(row['completed']),
                'reward_claimed': bool(row['reward_claimed']),
                'expires_at': row['expires_at']
            })
            quests[row['quest_type']].append(quest_data)
            
        return quests

async def refresh_user_quests(user_id: int, profile_manager: ProfileManager) -> None:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ –≤—Ä–µ–º—è"""
    async with aiosqlite.connect('profiles.db') as db:
        db.row_factory = aiosqlite.Row
        now = datetime.now()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        cursor = await db.execute('''
            SELECT * FROM quest_refresh_times WHERE user_id = ?
        ''', (user_id,))
        refresh_times = await cursor.fetchone()
        
        if not refresh_times:
            # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ - —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å–∏
            last_daily = (now - timedelta(days=1)).isoformat()
            last_weekly = (now - timedelta(days=7)).isoformat()
            await db.execute('''
                INSERT INTO quest_refresh_times (user_id, last_daily_refresh, last_weekly_refresh)
                VALUES (?, ?, ?)
            ''', (user_id, last_daily, last_weekly))
            refresh_times = {
                'last_daily_refresh': last_daily,
                'last_weekly_refresh': last_weekly
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        last_daily = datetime.fromisoformat(refresh_times['last_daily_refresh'])
        if (now - last_daily).days >= 1:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            await db.execute('''
                DELETE FROM user_quests 
                WHERE user_id = ? AND quest_type = 'daily'
            ''', (user_id,))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            daily_quests = QuestsConfig.get_daily_quests()
            for quest in daily_quests:
                await db.execute('''
                    INSERT INTO user_quests 
                    (user_id, quest_id, quest_type, quest_data, expires_at)
                    VALUES (?, ?, 'daily', ?, ?)
                ''', (
                    user_id,
                    quest['id'],
                    json.dumps(quest),
                    (now + timedelta(days=1)).isoformat()
                ))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await db.execute('''
                UPDATE quest_refresh_times 
                SET last_daily_refresh = ?
                WHERE user_id = ?
            ''', (now.isoformat(), user_id))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
        last_weekly = datetime.fromisoformat(refresh_times['last_weekly_refresh'])
        if (now - last_weekly).days >= 7:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            await db.execute('''
                DELETE FROM user_quests 
                WHERE user_id = ? AND quest_type = 'weekly'
            ''', (user_id,))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
            weekly_quests = QuestsConfig.get_weekly_quests()
            for quest in weekly_quests:
                await db.execute('''
                    INSERT INTO user_quests 
                    (user_id, quest_id, quest_type, quest_data, expires_at)
                    VALUES (?, ?, 'weekly', ?, ?)
                ''', (
                    user_id,
                    quest['id'],
                    json.dumps(quest),
                    (now + timedelta(days=7)).isoformat()
                ))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            await db.execute('''
                UPDATE quest_refresh_times 
                SET last_weekly_refresh = ?
                WHERE user_id = ?
            ''', (now.isoformat(), user_id))
        
        await db.commit()

async def notify_quest_progress(bot: Bot, user_id: int, quest_data: dict, progress: int, completed: bool = False):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        text = f"üìã **–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è**\n\n"
        text += f"üéØ {quest_data['name']}\n"
        text += f"‚îî –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{quest_data['required']['count']}\n"
        
        if completed:
            text += f"\n‚ú® **–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!**\n"
            text += f"üí∞ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `–∑–∞–¥–∞–Ω–∏—è` —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É!"
        
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –õ–°
            await bot.send_message(user_id, text, parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–° {user_id}: {e}")
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
            async with aiosqlite.connect('profiles.db') as db:
                cursor = await db.execute(
                    'SELECT last_group_chat_id FROM user_profiles WHERE user_id = ?', 
                    (user_id,)
                )
                result = await cursor.fetchone()
                if result and result[0]:
                    await bot.send_message(
                        result[0],
                        f"@{user_id}\n" + text,
                        parse_mode=ParseMode.MARKDOWN
                    )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –∑–∞–¥–∞–Ω–∏—è: {e}")

async def update_quest_progress(
    user_id: int,
    quest_type: str,
    quest_id: str,
    progress: int,
    bot: Bot = None
) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è"""
    async with aiosqlite.connect('profiles.db') as db:
        cursor = await db.execute('''
            SELECT quest_data, progress, completed
            FROM user_quests
            WHERE user_id = ? AND quest_id = ? AND quest_type = ?
        ''', (user_id, quest_id, quest_type))
        
        quest = await cursor.fetchone()
        if not quest:
            return False
            
        quest_data = json.loads(quest[0])
        required = quest_data['required']['count']
        old_progress = quest[1]
        was_completed = quest[2]
        
        new_progress = min(progress, required)
        completed = new_progress >= required
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if new_progress > old_progress or (completed and not was_completed):
            await db.execute('''
                UPDATE user_quests
                SET progress = ?, completed = ?
                WHERE user_id = ? AND quest_id = ? AND quest_type = ?
            ''', (new_progress, completed, user_id, quest_id, quest_type))
            
            await db.commit()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –±–æ—Ç
            if bot and (completed != was_completed or new_progress > old_progress):
                await notify_quest_progress(bot, user_id, quest_data, new_progress, completed)
        
        return completed

async def claim_quest_reward(
    user_id: int,
    quest_type: str,
    quest_id: str,
    profile_manager: ProfileManager
) -> Optional[Dict[str, int]]:
    """–ó–∞–±–∏—Ä–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ"""
    async with aiosqlite.connect('profiles.db') as db:
        cursor = await db.execute('''
            SELECT quest_data, completed, reward_claimed
            FROM user_quests
            WHERE user_id = ? AND quest_id = ? AND quest_type = ?
        ''', (user_id, quest_id, quest_type))
        
        quest = await cursor.fetchone()
        if not quest:
            return None
            
        quest_data = json.loads(quest[0])
        completed = quest[1]
        reward_claimed = quest[2]
        
        if not completed or reward_claimed:
            return None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        rewards = {}
        if quest_type == 'daily':
            rewards = QuestsConfig.DAILY_QUEST_REWARDS[quest_data['difficulty']]
            await profile_manager.update_lumcoins(user_id, rewards['lumcoins'])
            await profile_manager.update_exp(user_id, rewards['exp'])
        else:  # weekly
            plum_reward = QuestsConfig.WEEKLY_QUEST_PLUM_REWARDS[quest_data['difficulty']]
            await profile_manager.update_plumcoins(user_id, plum_reward)
            rewards = {'plumcoins': plum_reward}
        
        # –û—Ç–º–µ—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω—É—é
        await db.execute('''
            UPDATE user_quests
            SET reward_claimed = TRUE
            WHERE user_id = ? AND quest_id = ? AND quest_type = ?
        ''', (user_id, quest_id, quest_type))
        
        await db.commit()
        return rewards

def format_time_left(expires_at: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è"""
    expiry = datetime.fromisoformat(expires_at)
    now = datetime.now()
    diff = expiry - now
    
    hours = diff.seconds // 3600
    minutes = (diff.seconds % 3600) // 60
    
    if diff.days > 0:
        return f"{diff.days}–¥ {hours}—á"
    return f"{hours}—á {minutes}–º"

@quests_router.message(F.text.lower().in_(["–∑–∞–¥–∞–Ω–∏—è", "–∫–≤–µ—Å—Ç—ã", "/quests"]))
async def cmd_show_quests(message: types.Message, profile_manager: ProfileManager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await refresh_user_quests(user_id, profile_manager)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
    quests = await get_user_quests(user_id)
    
    builder = InlineKeyboardBuilder()
    
    text = f"üìã {hbold('–ó–∞–¥–∞–Ω–∏—è')}\n\n"
    
    # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    text += f"üåû {hbold('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:')}\n"
    if quests['daily']:
        for quest in quests['daily']:
            progress = min(quest['progress'], quest['required']['count'])
            status = "‚úÖ" if quest['completed'] else "‚è≥"
            reward = QuestsConfig.DAILY_QUEST_REWARDS[quest['difficulty']]
            
            text += (
                f"{status} {quest['name']}\n"
                f"‚îî {quest['description']}\n"
                f"‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{quest['required']['count']}\n"
                f"‚îú –ù–∞–≥—Ä–∞–¥–∞: {reward['lumcoins']}üí∞ {reward['exp']}‚ú®\n"
                f"‚îî –û—Å—Ç–∞–ª–æ—Å—å: {format_time_left(quest['expires_at'])}\n\n"
            )
            
            if quest['completed'] and not quest['reward_claimed']:
                builder.row(InlineKeyboardButton(
                    text=f"üí∞ –ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É: {quest['name']}",
                    callback_data=f"claim_quest:daily:{quest['id']}"
                ))
    else:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n\n"
    
    # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    text += f"\nüéØ {hbold('–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:')}\n"
    if quests['weekly']:
        for quest in quests['weekly']:
            progress = min(quest['progress'], quest['required']['count'])
            status = "‚úÖ" if quest['completed'] else "‚è≥"
            reward = QuestsConfig.WEEKLY_QUEST_PLUM_REWARDS[quest['difficulty']]
            
            text += (
                f"{status} {quest['name']}\n"
                f"‚îî {quest['description']}\n"
                f"‚îú –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}/{quest['required']['count']}\n"
                f"‚îú –ù–∞–≥—Ä–∞–¥–∞: {reward}üîÆ\n"
                f"‚îî –û—Å—Ç–∞–ª–æ—Å—å: {format_time_left(quest['expires_at'])}\n\n"
            )
            
            if quest['completed'] and not quest['reward_claimed']:
                builder.row(InlineKeyboardButton(
                    text=f"üîÆ –ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É: {quest['name']}",
                    callback_data=f"claim_quest:weekly:{quest['id']}"
                ))
    else:
        text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π\n\n"
    
    builder.row(InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_quests"))
    
    await message.answer(
        text,
        reply_markup=builder.as_markup(),
        parse_mode=ParseMode.MARKDOWN
    )

@quests_router.callback_query(F.data == "refresh_quests")
async def refresh_quests_callback(callback: types.CallbackQuery, profile_manager: ProfileManager):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π"""
    await cmd_show_quests(callback.message, profile_manager)
    await callback.answer()

@quests_router.callback_query(F.data.startswith("claim_quest:"))
async def claim_quest_callback(callback: types.CallbackQuery, profile_manager: ProfileManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ"""
    user_id = callback.from_user.id
    _, quest_type, quest_id = callback.data.split(":")
    
    rewards = await claim_quest_reward(user_id, quest_type, quest_id, profile_manager)
    if not rewards:
        await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É", show_alert=True)
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–≥—Ä–∞–¥–µ
    reward_text = []
    if 'lumcoins' in rewards:
        reward_text.append(f"{rewards['lumcoins']}üí∞")
    if 'exp' in rewards:
        reward_text.append(f"{rewards['exp']}‚ú®")
    if 'plumcoins' in rewards:
        reward_text.append(f"{rewards['plumcoins']}üîÆ")
    
    await callback.answer(
        f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞: {' '.join(reward_text)}",
        show_alert=True
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
    await cmd_show_quests(callback.message, profile_manager)