from core.group.stat.smain import *
from core.group.stat.manager import ProfileManager # –ò—Å–ø–æ–ª—å–∑—É–µ–º ProfileManager
from core.group.stat.plum_shop_config import PlumShopConfig, RARITY_ICONS
from database import add_item_to_inventory # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.filters import Command  # <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±—Ä–∞–Ω 'Text'
from aiogram.utils.markdown import hbold, hcode

import logging
logger = logging.getLogger(__name__)

# –†–æ—É—Ç–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ö–ù–û–ü–û–ö
plum_shop_router = Router(name="plum_shop_router")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–∑ main.py
async def cmd_plum_shop(message: types.Message, profile_manager: ProfileManager):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ü-–ú–∞–≥–∞–∑–∏–Ω —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∑–∞ PLUMcoins."""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å PLUMcoins –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    plumcoins = await profile_manager.get_plumcoins(user_id) 

    text = (
        f"üåü **–ü-–ú–∞–≥–∞–∑–∏–Ω (PLUM-Shop)** üåü\n\n"
        f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {hbold(plumcoins)} PLUMcoins\n\n"
        f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:**\n"
    )

    builder = InlineKeyboardBuilder()
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –≤ –º–∞–≥–∞–∑–∏–Ω–µ
    for item_key, item_info in PlumShopConfig.PLUM_SHOP_ITEMS.items():
        rarity_icon = RARITY_ICONS.get(item_info['rarity'], 'üîπ')
        button_text = f"{item_info['icon']} {item_info['name']} ({item_info['price']} PLUM) {rarity_icon}"
        callback_data = f"{PlumShopConfig.BUY_ITEM_CALLBACK_DATA}:{item_key}"
        builder.row(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_shop"))

    await message.reply(
        text, 
        reply_markup=builder.as_markup(), 
        parse_mode=ParseMode.MARKDOWN
    )

# <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: (–±—ã–ª–æ Text(startswith=...))
@plum_shop_router.callback_query(F.data.startswith(f"{PlumShopConfig.BUY_ITEM_CALLBACK_DATA}:"))
async def plum_shop_buy_callback(call: CallbackQuery, profile_manager: ProfileManager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –∑–∞ PLUMcoins."""
    user_id = call.from_user.id
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ callback_data
        item_key = call.data.split(":")[1]
        item = PlumShopConfig.get_item_by_key(item_key)
        
        if not item:
            await call.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç.", show_alert=True)
            return

        price = item['price']
        inventory_key = item['inventory_key']
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_plumcoins = await profile_manager.get_plumcoins(user_id) 

        if current_plumcoins < price:
            await call.answer(
                f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ PLUMcoins! –ù—É–∂–Ω–æ {price}, —É –≤–∞—Å {current_plumcoins}.", 
                show_alert=True
            )
            return
            
        # 1. –°–Ω–∏–º–∞–µ–º PLUMcoins
        await profile_manager.update_plumcoins(user_id, -price) 
        
        # 2. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (item_type=rpg_item)
        # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ `add_item_to_inventory` –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑ `database.py` –∏–ª–∏ `core/group/RPG/inventory.py`
        # –°—É–¥—è –ø–æ –≤–∞—à–∏–º —Ñ–∞–π–ª–∞–º, –æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ `core/group/RPG/inventory.py`
        from core.group.RPG.inventory import add_item_to_inventory_db
        await add_item_to_inventory_db(user_id, item, 1) # item - —ç—Ç–æ dict, quantity=1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
        new_plumcoins = await profile_manager.get_plumcoins(user_id) 
        
        purchase_info = (
            f"üéâ **–ü–æ–∫—É–ø–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞!** üéâ\n\n"
            f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏: {hbold(item['name'])}.\n"
            f"üî∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} PLUMcoins.\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {hbold(new_plumcoins)} PLUMcoins.\n\n"
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å: {hcode('–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å')}"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        builder = InlineKeyboardBuilder()
        builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ / –ó–∞–∫—Ä—ã—Ç—å", callback_data="close_shop"))

        await call.message.edit_text(
            purchase_info, 
            reply_markup=builder.as_markup(), 
            parse_mode=ParseMode.MARKDOWN
        )
        await call.answer(f"–í—ã –∫—É–ø–∏–ª–∏ {item['name']} –∑–∞ {price} PLUMcoins!", show_alert=False)

    except Exception as e:
        logger.error(f"Error in plum_shop_buy_callback for user {user_id}: {e}", exc_info=True)
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫—É–ø–∫–∏.", show_alert=True)

# <<< –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: (–±—ã–ª–æ Text("close_shop"))
@plum_shop_router.callback_query(F.data == "close_shop")
async def process_close_shop(call: CallbackQuery):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –º–∞–≥–∞–∑–∏–Ω–∞."""
    await call.message.delete()
    await call.answer("–ú–∞–≥–∞–∑–∏–Ω –∑–∞–∫—Ä—ã—Ç.")