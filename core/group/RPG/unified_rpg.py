from aiogram import Router, types, F
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import logging
from typing import Dict, List
import random
import time
import json
import aiosqlite
from core.group.stat.shop_config import ShopConfig

logger = logging.getLogger(__name__)
rpg_router = Router(name="rpg_router")

quick_purchase_cache = {}
shop_pages_cache = {}

class ItemSystem:
    SHOP_ITEMS = {
        "wood": {"name": "ü™µ –î–µ—Ä–µ–≤–æ", "type": "material", "rarity": "common", "cost": 10, "description": "–û–±—ã—á–Ω–∞—è –¥—Ä–µ–≤–µ—Å–∏–Ω–∞ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞"},
        "iron_ore": {"name": "‚õèÔ∏è –ñ–µ–ª–µ–∑–Ω–∞—è —Ä—É–¥–∞", "type": "material", "rarity": "common", "cost": 25, "description": "–†—É–¥–∞ –¥–ª—è –≤—ã–ø–ª–∞–≤–∫–∏ –∂–µ–ª–µ–∑–∞"},
        "health_potion": {"name": "üß™ –ó–µ–ª—å–µ –∑–¥–æ—Ä–æ–≤—å—è", "type": "consumable", "rarity": "uncommon", "cost": 50, "description": "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç 30 HP", "effect": {"heal": 30}},
        "magic_crystal": {"name": "üíé –ú–∞–≥–∏—á–µ—Å–∫–∏–π –∫—Ä–∏—Å—Ç–∞–ª–ª", "type": "material", "rarity": "rare", "cost": 150, "description": "–†–µ–¥–∫–∏–π –º–∞–≥–∏—á–µ—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç"},
        "energy_drink": {"name": "‚ö° –≠–Ω–µ—Ä–≥–µ—Ç–∏–∫", "type": "consumable", "rarity": "common", "cost": 30, "description": "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —ç–Ω–µ—Ä–≥–∏—é", "effect": {"energy": 20}},
        "gold_ingot": {"name": "ü•á –ó–æ–ª–æ—Ç–æ–π —Å–ª–∏—Ç–æ–∫", "type": "material", "rarity": "rare", "cost": 200, "description": "–¶–µ–Ω–Ω—ã–π –º–µ—Ç–∞–ª–ª –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞"},
        "lucky_charm": {"name": "üçÄ –¢–∞–ª–∏—Å–º–∞–Ω —É–¥–∞—á–∏", "type": "equipment", "rarity": "epic", "cost": 500, "description": "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —É–¥–∞—á—É", "stats": {"luck": 10}},
        "dragon_scale": {"name": "üêâ –ß–µ—à—É—è –¥—Ä–∞–∫–æ–Ω–∞", "type": "material", "rarity": "legendary", "cost": 1000, "description": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"}
    }

    CRAFT_RECIPES = {
        "iron_ingot": {"name": "üî© –ñ–µ–ª–µ–∑–Ω—ã–π —Å–ª–∏—Ç–æ–∫", "result": "iron_ingot", "result_name": "üî© –ñ–µ–ª–µ–∑–Ω—ã–π —Å–ª–∏—Ç–æ–∫", "cost": 25, "materials": {"iron_ore": 3}, "description": "–í—ã–ø–ª–∞–≤–ª–µ–Ω–Ω—ã–π –∂–µ–ª–µ–∑–Ω—ã–π —Å–ª–∏—Ç–æ–∫"},
        "basic_sword": {"name": "‚öîÔ∏è –û–±—ã—á–Ω—ã–π –º–µ—á", "result": "basic_sword", "result_name": "‚öîÔ∏è –û–±—ã—á–Ω—ã–π –º–µ—á", "cost": 50, "materials": {"wood": 2, "iron_ingot": 1}, "description": "–ù–∞–¥—ë–∂–Ω—ã–π –∂–µ–ª–µ–∑–Ω—ã–π –º–µ—á", "stats": {"attack": 5}}
    }

    @classmethod
    def get_sorted_shop_items(cls) -> List[tuple]:
        return sorted(cls.SHOP_ITEMS.items(), key=lambda x: x[1]['cost'])

async def get_user_lumcoins(profile_manager, user_id: int) -> int:
    try:
        return await profile_manager.get_lumcoins(user_id)
    except Exception as e:
        logger.error(f"Error getting lumcoins for user {user_id}: {e}")
        return 0

async def update_user_lumcoins(profile_manager, user_id: int, amount: int) -> bool:
    try:
        await profile_manager.update_lumcoins(user_id, amount)
        return True
    except Exception as e:
        logger.error(f"Error updating lumcoins for user {user_id}: {e}")
        return False

async def add_item_to_inventory_db(user_id: int, item_data: dict):
    try:
        async with aiosqlite.connect('profiles.db') as conn:
            await conn.execute('''
                INSERT OR REPLACE INTO user_inventory 
                (user_id, item_key, item_type, item_data) 
                VALUES (?, ?, ?, ?)
            ''', (
                user_id, 
                item_data.get('item_key', 'unknown'),
                item_data.get('type', 'material'),
                json.dumps(item_data, ensure_ascii=False) if isinstance(item_data, dict) else str(item_data)
            ))
            await conn.commit()
            logger.info(f"Item added to inventory for user {user_id}: {item_data.get('item_key')}")
            return True
    except Exception as e:
        logger.error(f"Error adding item to inventory for user {user_id}: {e}")
        return False

async def get_user_inventory_db(user_id: int) -> List[dict]:
    try:
        async with aiosqlite.connect('profiles.db') as conn:
            cursor = await conn.execute(
                'SELECT item_data FROM user_inventory WHERE user_id = ?',
                (user_id,)
            )
            rows = await cursor.fetchall()
            
            inventory = []
            for row in rows:
                try:
                    item_data = json.loads(row[0])
                    inventory.append(item_data)
                except Exception as e:
                    logger.error(f"Error parsing item data for user {user_id}: {e}")
                    inventory.append({'name': str(row[0])})
            
            return inventory
    except Exception as e:
        logger.error(f"Error getting inventory for user {user_id}: {e}")
        return []

async def get_user_backgrounds_inventory(user_id: int) -> List[dict]:
    try:
        inventory = await get_user_inventory_db(user_id)
        return [item for item in inventory if item.get('type') == 'background']
    except Exception as e:
        logger.error(f"Error getting backgrounds for user {user_id}: {e}")
        return []

@rpg_router.message(F.text.lower() == "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
async def show_inventory(message: types.Message, profile_manager):
    try:
        user_id = message.from_user.id
        
        builder = InlineKeyboardBuilder()
        
        builder.row(InlineKeyboardButton(
            text="üñºÔ∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è —Ñ–æ–Ω–æ–≤", 
            callback_data="rpg_show_backgrounds_f"
        ))
        builder.row(InlineKeyboardButton(
            text="üéí –ü—Ä–µ–¥–º–µ—Ç—ã –∏ —Ä–µ—Å—É—Ä—Å—ã", 
            callback_data="rpg_section:items"
        ))
        builder.row(InlineKeyboardButton(
            text="üõ†Ô∏è –í–µ—Ä—Å—Ç–∞–∫ –∫—Ä–∞—Ñ—Ç–∞", 
            callback_data="rpg_section:workbench"
        ))
        
        user_profile = await profile_manager.get_user_profile(message.from_user)
        active_bg = user_profile.get('active_background', 'default') if user_profile else 'default'
        
        text = (
            "üéí **–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å** üéí\n\n"
            f"üíº –ê–∫—Ç–∏–≤–Ω—ã–π —Ñ–æ–Ω: {active_bg}\n"
            "üíé –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
        )
        
        await message.answer(text, reply_markup=builder.as_markup())
    except Exception as e:
        logger.error(f"Error in show_inventory: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")

@rpg_router.message(F.text.lower() == "–≤–µ—Ä—Å—Ç–∞–∫")
async def show_workbench_cmd(message: types.Message, profile_manager):
    try:
        user_id = message.from_user.id
        lumcoins = await get_user_lumcoins(profile_manager, user_id)
        
        builder = InlineKeyboardBuilder()
        text = f"üõ†Ô∏è **–í–µ—Ä—Å—Ç–∞–∫ –∫—Ä–∞—Ñ—Ç–∞** | üí∞ –ë–∞–ª–∞–Ω—Å: {lumcoins} LUM\n\n"
        text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n\n"
        
        for recipe_key, recipe in ItemSystem.CRAFT_RECIPES.items():
            builder.row(InlineKeyboardButton(
                text=f"{recipe['name']} - üí∞{recipe['cost']}",
                callback_data=f"rpg_craft_info:{recipe_key}"
            ))
        
        builder.row(InlineKeyboardButton(
            text="üé® –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç - üí∞5000",
            callback_data="rpg_craft_info:custom_item"
        ))
        
        await message.answer(text, reply_markup=builder.as_markup())
    except Exception as e:
        logger.error(f"Error in show_workbench_cmd: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–µ—Ä—Å—Ç–∞–∫–∞")

@rpg_router.message(F.text.lower() == "–º–∞–≥–∞–∑–∏–Ω")
async def show_shop_main(message: types.Message, profile_manager):
    try:
        user_id = message.from_user.id
        lumcoins = await get_user_lumcoins(profile_manager, user_id)
        
        builder = InlineKeyboardBuilder()
        
        builder.row(InlineKeyboardButton(
            text="üñºÔ∏è –ú–∞–≥–∞–∑–∏–Ω —Ñ–æ–Ω–æ–≤", 
            callback_data="shop_type:backgrounds"
        ))
        builder.row(InlineKeyboardButton(
            text="üì¶ –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤", 
            callback_data="shop_type:items"
        ))
        
        text = (
            "üõí **–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω** üõí\n\n"
            f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {lumcoins} LUM\n\n"
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–æ–≤–∞—Ä–æ–≤:"
        )
        
        await message.answer(text, reply_markup=builder.as_markup())
    except Exception as e:
        logger.error(f"Error in show_shop_main: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞")

@rpg_router.callback_query(F.data.startswith("rpg_section:"))
async def handle_rpg_section(callback: types.CallbackQuery, profile_manager):
    try:
        section = callback.data.split(":")[1]
        
        if section == "backgrounds":
            await show_backgrounds_section(callback, profile_manager)
        elif section == "items":
            await show_items_section(callback, profile_manager)
        elif section == "workbench":
            await show_workbench_section(callback, profile_manager)
    except Exception as e:
        logger.error(f"Error in handle_rpg_section: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞–∑–¥–µ–ª–∞")

async def show_backgrounds_section(callback: types.CallbackQuery, profile_manager):
    try:
        user_id = callback.from_user.id
        user_profile = await profile_manager.get_user_profile(callback.from_user)
        active_background = user_profile.get('active_background', 'default') if user_profile else 'default'
        
        user_backgrounds = await get_user_backgrounds_inventory(user_id)
        
        builder = InlineKeyboardBuilder()
        text = "üñºÔ∏è **–ö–æ–ª–ª–µ–∫—Ü–∏—è —Ñ–æ–Ω–æ–≤**\n\n"
        
        if user_backgrounds:
            for bg_item in user_backgrounds:
                bg_key = bg_item.get('item_key', bg_item.get('name', 'unknown'))
                bg_name = bg_item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ–Ω')
                
                if bg_key.startswith("custom:"):
                    bg_display_name = "üé® –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω"
                else:
                    bg_display_name = bg_name
                
                status = " ‚úÖ (–ê–∫—Ç–∏–≤–Ω–æ)" if bg_key == active_background else ""
                
                builder.row(InlineKeyboardButton(
                    text=f"{bg_display_name}{status}", 
                    callback_data=f"activate_bg:{bg_key}"
                ))
        else:
            text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ–Ω–æ–≤.\n"
            text += "üõí –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω —Ñ–æ–Ω–æ–≤!\n\n"
        
        default_status = " ‚úÖ (–ê–∫—Ç–∏–≤–Ω–æ)" if active_background == 'default' else ""
        builder.row(InlineKeyboardButton(
            text=f"üîô –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ–Ω{default_status}", 
            callback_data="reset_bg_to_default"
        ))
        
        builder.row(InlineKeyboardButton(
            text="üõí –ú–∞–≥–∞–∑–∏–Ω —Ñ–æ–Ω–æ–≤", 
            callback_data="shop_type:backgrounds"
        ))
        
        builder.row(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é", 
            callback_data="rpg_back_to_main"
        ))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    except Exception as e:
        logger.error(f"Error in show_backgrounds_section: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–æ–≤")

async def show_items_section(callback: types.CallbackQuery, profile_manager):
    try:
        user_id = callback.from_user.id
        
        builder = InlineKeyboardBuilder()
        text = "üéí **–ü—Ä–µ–¥–º–µ—Ç—ã –∏ —Ä–µ—Å—É—Ä—Å—ã**\n\n"
        
        user_inventory = await get_user_inventory_db(user_id)
        
        if user_inventory:
            non_background_items = [item for item in user_inventory if item.get('type') != 'background']
            
            if non_background_items:
                for item in non_background_items:
                    item_name = item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç')
                    item_rarity = item.get('rarity', 'common')
                    
                    rarity_emoji = {
                        'common': '‚ö™',
                        'uncommon': 'üü¢', 
                        'rare': 'üîµ',
                        'epic': 'üü£',
                        'legendary': 'üü†'
                    }.get(item_rarity, '‚ö™')
                    
                    text += f"{rarity_emoji} {item_name}\n"
            else:
                text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤.\n"
                text += "üõí –ü–æ—Å–µ—Ç–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–ª–∏ –≤–µ—Ä—Å—Ç–∞–∫\n\n"
        else:
            text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤.\n"
            text += "üõí –ü–æ—Å–µ—Ç–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–ª–∏ –≤–µ—Ä—Å—Ç–∞–∫\n\n"
        
        builder.row(InlineKeyboardButton(
            text="üõí –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤", 
            callback_data="shop_type:items"
        ))
        
        builder.row(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é", 
            callback_data="rpg_back_to_main"
        ))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    except Exception as e:
        logger.error(f"Error in show_items_section: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤")

async def show_workbench_section(callback: types.CallbackQuery, profile_manager):
    try:
        user_id = callback.from_user.id
        lumcoins = await get_user_lumcoins(profile_manager, user_id)
        
        builder = InlineKeyboardBuilder()
        text = f"üõ†Ô∏è **–í–µ—Ä—Å—Ç–∞–∫ –∫—Ä–∞—Ñ—Ç–∞** | üí∞ –ë–∞–ª–∞–Ω—Å: {lumcoins} LUM\n\n"
        text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n\n"
        
        for recipe_key, recipe in ItemSystem.CRAFT_RECIPES.items():
            builder.row(InlineKeyboardButton(
                text=f"{recipe['name']} - üí∞{recipe['cost']}",
                callback_data=f"rpg_craft_info:{recipe_key}"
            ))
        
        builder.row(InlineKeyboardButton(
            text="üé® –°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç - üí∞5000",
            callback_data="rpg_craft_info:custom_item"
        ))
        
        builder.row(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é", 
            callback_data="rpg_back_to_main"
        ))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    except Exception as e:
        logger.error(f"Error in show_workbench_section: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–µ—Ä—Å—Ç–∞–∫–∞")

@rpg_router.callback_query(F.data == "rpg_show_backgrounds_f")
async def handle_show_backgrounds_f(callback: types.CallbackQuery, profile_manager):
    try:
        user_id = callback.from_user.id
        user_profile = await profile_manager.get_user_profile(callback.from_user)
        active_background_key = user_profile.get('active_background', 'default') if user_profile else 'default'

        user_backgrounds = await get_user_backgrounds_inventory(user_id)
        
        builder = InlineKeyboardBuilder()
        text = "üñºÔ∏è **–ö–æ–ª–ª–µ–∫—Ü–∏—è —Ñ–æ–Ω–æ–≤**\n\n"
        
        if user_backgrounds:
            for bg_item in user_backgrounds:
                bg_key = bg_item.get('item_key', 'unknown')
                if bg_key.startswith("custom:"):
                    bg_name = "üé® –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω"
                else:
                    bg_info = ShopConfig.SHOP_BACKGROUNDS.get(bg_key)
                    bg_name = bg_info['name'] if bg_info else bg_key
                
                status = " ‚úÖ (–ê–∫—Ç–∏–≤–Ω–æ)" if bg_key == active_background_key else ""
                builder.row(InlineKeyboardButton(
                    text=f"{bg_name}{status}", 
                    callback_data=f"activate_bg:{bg_key}"
                ))
        else:
            text += "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ñ–æ–Ω–æ–≤.\n"
            text += "üõí –ó–∞–≥–ª—è–Ω–∏—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω —Ñ–æ–Ω–æ–≤!\n\n"
        
        default_status = " ‚úÖ (–ê–∫—Ç–∏–≤–Ω–æ)" if active_background_key == 'default' else ""
        builder.row(InlineKeyboardButton(
            text=f"üîô –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ–Ω{default_status}", 
            callback_data="reset_bg_to_default"
        ))
        
        builder.row(InlineKeyboardButton(
            text="üõí –ú–∞–≥–∞–∑–∏–Ω —Ñ–æ–Ω–æ–≤", 
            callback_data="shop_type:backgrounds"
        ))
        
        builder.row(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—é", 
            callback_data="rpg_back_to_main"
        ))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in handle_show_backgrounds_f: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–æ–≤")

@rpg_router.callback_query(F.data.startswith("shop_type:"))
async def handle_shop_type(callback: types.CallbackQuery, profile_manager):
    try:
        shop_type = callback.data.split(":")[1]
        
        if shop_type == "backgrounds":
            await show_shop_backgrounds(callback, profile_manager)
        elif shop_type == "items":
            await show_shop_items_page(callback, profile_manager, page=0)
    except Exception as e:
        logger.error(f"Error in handle_shop_type: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞")

async def show_shop_backgrounds(callback: types.CallbackQuery, profile_manager):
    try:
        user_id = callback.from_user.id
        lumcoins = await get_user_lumcoins(profile_manager, user_id)
        
        builder = InlineKeyboardBuilder()
        text = f"üñºÔ∏è **–ú–∞–≥–∞–∑–∏–Ω —Ñ–æ–Ω–æ–≤** | üí∞ –ë–∞–ª–∞–Ω—Å: {lumcoins} LUM\n\n"
        
        available_backgrounds = ShopConfig.SHOP_BACKGROUNDS
        user_backgrounds = await get_user_backgrounds_inventory(user_id)
        user_bg_keys = [bg.get('item_key') for bg in user_backgrounds]
        
        for bg_key, bg_info in available_backgrounds.items():
            bg_name = bg_info['name']
            bg_price = bg_info.get('price', 0)
            
            if bg_key in user_bg_keys:
                status = " ‚úÖ (–ö—É–ø–ª–µ–Ω–æ)"
                builder.row(InlineKeyboardButton(
                    text=f"‚úÖ {bg_name}{status}",
                    callback_data=f"bg_already_owned:{bg_key}"
                ))
            else:
                builder.row(InlineKeyboardButton(
                    text=f"üñºÔ∏è {bg_name} - üí∞{bg_price}",
                    callback_data=f"buy_bg:{bg_key}"
                ))
        
        custom_bg_info = available_backgrounds.get("custom")
        if custom_bg_info:
            custom_price = custom_bg_info.get('price', 10000)
            has_custom = any(bg.get('item_key', '').startswith('custom:') for bg in user_backgrounds)
            
            if has_custom:
                builder.row(InlineKeyboardButton(
                    text=f"‚úÖ –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω (–ö—É–ø–ª–µ–Ω–æ)",
                    callback_data="bg_already_owned:custom"
                ))
            else:
                builder.row(InlineKeyboardButton(
                    text=f"üé® –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω - üí∞{custom_price}",
                    callback_data="buy_bg:custom"
                ))
        
        builder.row(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω",
            callback_data="shop_back_to_main"
        ))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    except Exception as e:
        logger.error(f"Error in show_shop_backgrounds: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ–Ω–æ–≤")

async def show_shop_items_page(callback: types.CallbackQuery, profile_manager, page: int = 0):
    try:
        user_id = callback.from_user.id
        lumcoins = await get_user_lumcoins(profile_manager, user_id)
        
        sorted_items = ItemSystem.get_sorted_shop_items()
        
        items_per_page = 4
        total_pages = (len(sorted_items) + items_per_page - 1) // items_per_page
        start_idx = page * items_per_page
        end_idx = min(start_idx + items_per_page, len(sorted_items))
        
        builder = InlineKeyboardBuilder()
        text = f"üì¶ **–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–º–µ—Ç–æ–≤** | üí∞ –ë–∞–ª–∞–Ω—Å: {lumcoins} LUM\n\n"
        text += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{total_pages}\n\n"
        
        for i in range(start_idx, end_idx):
            item_key, item_info = sorted_items[i]
            item_name = item_info['name']
            item_cost = item_info['cost']
            item_rarity = item_info.get('rarity', 'common')
            
            rarity_emoji = {
                'common': '‚ö™',
                'uncommon': 'üü¢',
                'rare': 'üîµ', 
                'epic': 'üü£',
                'legendary': 'üü†'
            }.get(item_rarity, '‚ö™')
            
            builder.row(InlineKeyboardButton(
                text=f"{rarity_emoji} {item_name} - üí∞{item_cost}",
                callback_data=f"shop_item_info:{item_key}:{page}"
            ))
        
        pagination_buttons = []
        if page > 0:
            pagination_buttons.append(InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
                callback_data=f"shop_items_page:{page-1}"
            ))
        
        if page < total_pages - 1:
            pagination_buttons.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", 
                callback_data=f"shop_items_page:{page+1}"
            ))
        
        if pagination_buttons:
            builder.row(*pagination_buttons)
        
        builder.row(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω",
            callback_data="shop_back_to_main"
        ))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
    except Exception as e:
        logger.error(f"Error in show_shop_items_page: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤")

@rpg_router.callback_query(F.data.startswith("shop_items_page:"))
async def handle_shop_items_page(callback: types.CallbackQuery, profile_manager):
    try:
        page = int(callback.data.split(":")[1])
        await show_shop_items_page(callback, profile_manager, page)
    except Exception as e:
        logger.error(f"Error in handle_shop_items_page: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

@rpg_router.callback_query(F.data.startswith("buy_bg:"))
async def handle_buy_background(callback: types.CallbackQuery, profile_manager):
    try:
        user_id = callback.from_user.id
        bg_key = callback.data.split(":")[1]
        
        available_backgrounds = ShopConfig.SHOP_BACKGROUNDS
        bg_info = available_backgrounds.get(bg_key)
        
        if not bg_info:
            await callback.answer("‚ùå –§–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        bg_price = bg_info.get('price', 0)
        lumcoins = await get_user_lumcoins(profile_manager, user_id)
        
        if lumcoins < bg_price:
            await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ LUM. –ù—É–∂–Ω–æ: {bg_price}")
            return
        
        user_backgrounds = await get_user_backgrounds_inventory(user_id)
        user_bg_keys = [bg.get('item_key') for bg in user_backgrounds]
        
        if bg_key in user_bg_keys:
            await callback.answer("‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç —Ñ–æ–Ω")
            return
        
        success = await update_user_lumcoins(profile_manager, user_id, -bg_price)
        if not success:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤")
            return
        
        bg_item_data = {
            'item_key': bg_key,
            'name': bg_info['name'],
            'type': 'background',
            'price': bg_price,
            'purchased_at': time.time()
        }
        
        success = await add_item_to_inventory_db(user_id, bg_item_data)
        if not success:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
            return
        
        await profile_manager.set_user_background(user_id, bg_key)
        
        await callback.answer(f"‚úÖ –§–æ–Ω '{bg_info['name']}' –∫—É–ø–ª–µ–Ω –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        await show_shop_backgrounds(callback, profile_manager)
        
    except Exception as e:
        logger.error(f"Error in handle_buy_background: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ñ–æ–Ω–∞")

@rpg_router.callback_query(F.data.startswith("shop_item_info:"))
async def handle_shop_item_info(callback: types.CallbackQuery, profile_manager):
    try:
        user_id = callback.from_user.id
        parts = callback.data.split(":")
        item_key = parts[1]
        page = int(parts[2]) if len(parts) > 2 else 0
        
        item_info = ItemSystem.SHOP_ITEMS.get(item_key)
        
        if not item_info:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        quick_purchase = quick_purchase_cache.get(user_id)
        if (quick_purchase and 
            quick_purchase['item_key'] == item_key and 
            time.time() - quick_purchase['timestamp'] <= 5):
            
            lumcoins = await get_user_lumcoins(profile_manager, user_id)

            if lumcoins < item_info['cost']:
                await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ LUM. –ù—É–∂–Ω–æ: {item_info['cost']}")
                return
            
            success = await update_user_lumcoins(profile_manager, user_id, -item_info['cost'])
            if not success:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤")
                return
            
            item_data = {
                'item_key': item_key,
                'name': item_info['name'],
                'type': item_info['type'],
                'rarity': item_info.get('rarity', 'common'),
                'description': item_info['description'],
                'cost': item_info['cost'],
                'effect': item_info.get('effect'),
                'purchased_at': time.time()
            }
            
            success = await add_item_to_inventory_db(user_id, item_data)
            if not success:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
                return
            
            del quick_purchase_cache[user_id]
            
            await callback.answer(f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: {item_info['name']}!")
            await show_shop_items_page(callback, profile_manager, page)
            
        else:
            lumcoins = await get_user_lumcoins(profile_manager, user_id)
            
            quick_purchase_cache[user_id] = {
                'item_key': item_key,
                'timestamp': time.time(),
                'page': page
            }
            
            rarity_display = {
                'common': '‚ö™ –û–±—ã—á–Ω—ã–π',
                'uncommon': 'üü¢ –ù–µ–æ–±—ã—á–Ω—ã–π', 
                'rare': 'üîµ –†–µ–¥–∫–∏–π',
                'epic': 'üü£ –≠–ø–∏—á–µ—Å–∫–∏–π',
                'legendary': 'üü† –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π'
            }.get(item_info.get('rarity', 'common'), '‚ö™ –û–±—ã—á–Ω—ã–π')
            
            info_text = (
                f"üõí {item_info['name']}\n"
                f"üìñ {item_info['description']}\n"
                f"üí∞ –¶–µ–Ω–∞: {item_info['cost']} LUM\n"
                f"üíé –†–µ–¥–∫–æ—Å—Ç—å: {rarity_display}\n"
                f"üíº –¢–∏–ø: {item_info['type']}\n\n"
                f"‚úÖ –ù–∞–∂–º–∏—Ç–µ –ï–©–Å –†–ê–ó –¥–ª—è –ø–æ–∫—É–ø–∫–∏!"
            )
            
            await callback.answer(info_text, show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in handle_shop_item_info: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ")

@rpg_router.callback_query(F.data.startswith("rpg_craft_info:"))
async def show_craft_info(callback: types.CallbackQuery, profile_manager):
    try:
        recipe_key = callback.data.split(":")[1]
        
        if recipe_key == "custom_item":
            user_id = callback.from_user.id
            lumcoins = await get_user_lumcoins(profile_manager, user_id)
            
            if lumcoins < 5000:
                await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ LUM. –ù—É–∂–Ω–æ 5000.")
                return
            
            custom_names = ["–ö–∞—Å—Ç–æ–º–Ω—ã–π –º–µ—á", "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç", "–õ–∏—á–Ω—ã–π —Ç–∞–ª–∏—Å–º–∞–Ω", "–ú–∞–≥–∏—á–µ—Å–∫–∏–π –∂–µ–∑–ª", "–î—Ä–µ–≤–Ω–∏–π –∞–º—É–ª–µ—Ç"]
            custom_descriptions = [
                "–ü—Ä–µ–¥–º–µ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å",
                "–£–Ω–∏–∫–∞–ª—å–Ω–æ–µ —Ç–≤–æ—Ä–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞",
                "–ù–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –º–∞–≥–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–µ–π", 
                "–ò–∑–≥–æ—Ç–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–¥–∫–∏—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤"
            ]
            
            custom_item = {
                "item_key": f"custom_{random.randint(1000, 9999)}",
                "name": f"üé® {random.choice(custom_names)}",
                "type": "equipment",
                "rarity": random.choice(["common", "uncommon", "rare"]),
                "description": random.choice(custom_descriptions),
                "stats": {"attack": random.randint(1, 5), "defense": random.randint(1, 3)},
                "crafted_at": time.time()
            }
            
            success = await update_user_lumcoins(profile_manager, user_id, -5000)
            if not success:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤")
                return
            
            success = await add_item_to_inventory_db(user_id, custom_item)
            if not success:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞")
                return
            
            await callback.message.edit_text(
                f"üé® **–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç!**\n\n"
                f"üì¶ {custom_item['name']}\n"
                f"üìñ {custom_item['description']}\n"
                f"üíé –†–µ–¥–∫–æ—Å—Ç—å: {custom_item['rarity']}\n"
                f"üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: 5000 LUM\n\n"
                f"‚öîÔ∏è –ê—Ç–∞–∫–∞: +{custom_item['stats']['attack']}\n"
                f"üõ°Ô∏è –ó–∞—â–∏—Ç–∞: +{custom_item['stats']['defense']}",
                reply_markup=InlineKeyboardBuilder().add(
                    InlineKeyboardButton(
                        text="‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ –≤–µ—Ä—Å—Ç–∞–∫—É",
                        callback_data="rpg_section:workbench"
                    )
                ).as_markup()
            )
            return
        
        recipe = ItemSystem.CRAFT_RECIPES.get(recipe_key)
        if not recipe:
            await callback.answer("‚ùå –†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        requirements_text = "–¢—Ä–µ–±—É–µ—Ç—Å—è: "
        if recipe.get('materials'):
            for material_key, quantity in recipe['materials'].items():
                material_info = ItemSystem.SHOP_ITEMS.get(material_key, {'name': material_key})
                requirements_text += f"{material_info['name']} x{quantity}, "
            requirements_text = requirements_text.rstrip(", ")
        else:
            requirements_text = "–ù–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"
        
        await callback.answer(f"üìã {recipe['name']}\n{requirements_text}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {recipe['cost']} LUM")
        
    except Exception as e:
        logger.error(f"Error in show_craft_info: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞")

@rpg_router.callback_query(F.data == "rpg_back_to_main")
async def back_to_rpg_main(callback: types.CallbackQuery, profile_manager):
    await show_inventory(callback.message, profile_manager)

@rpg_router.callback_query(F.data == "shop_back_to_main")
async def back_to_shop_main(callback: types.CallbackQuery, profile_manager):
    await show_shop_main(callback.message, profile_manager)

@rpg_router.callback_query(F.data.startswith("activate_bg:"))
async def process_activate_background(callback: types.CallbackQuery, profile_manager):
    try:
        user_id = callback.from_user.id
        background_key_to_activate = callback.data.split(":")[1]

        user_backgrounds = await get_user_backgrounds_inventory(user_id)
        user_bg_keys = [bg.get('item_key') for bg in user_backgrounds]
        
        if background_key_to_activate in user_bg_keys or background_key_to_activate == 'default':
            await profile_manager.set_user_background(user_id, background_key_to_activate)
            
            if background_key_to_activate == 'default':
                bg_name = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ–Ω"
            elif background_key_to_activate.startswith("custom:"):
                bg_name = "–ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω"
            else:
                bg_info = ShopConfig.SHOP_BACKGROUNDS.get(background_key_to_activate)
                bg_name = bg_info['name'] if bg_info else background_key_to_activate

            await callback.answer(f"‚úÖ –§–æ–Ω '{bg_name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
            await show_backgrounds_section(callback, profile_manager)
        else:
            await callback.answer("‚ùå –≠—Ç–æ–≥–æ —Ñ–æ–Ω–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏")
            
    except Exception as e:
        logger.error(f"Error in process_activate_background: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ñ–æ–Ω–∞")

@rpg_router.callback_query(F.data == "reset_bg_to_default")
async def process_reset_background_to_default(callback: types.CallbackQuery, profile_manager):
    try:
        user_id = callback.from_user.id
        await profile_manager.set_user_background(user_id, 'default')
        await callback.answer("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ–Ω –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        await show_backgrounds_section(callback, profile_manager)
    except Exception as e:
        logger.error(f"Error in process_reset_background_to_default: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–æ–Ω–∞")

@rpg_router.callback_query(F.data.startswith("bg_already_owned:"))
async def process_bg_already_owned(callback: types.CallbackQuery):
    bg_key = callback.data.split(":")[1]
    if bg_key == "custom":
        await callback.answer("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ–Ω!")
    else:
        bg_info = ShopConfig.SHOP_BACKGROUNDS.get(bg_key)
        bg_name = bg_info['name'] if bg_info else bg_key
        await callback.answer(f"‚úÖ –§–æ–Ω '{bg_name}' —É–∂–µ –≤ –≤–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏!")

def setup_rpg_handlers(main_dp: Router):
    main_dp.include_router(rpg_router)
    logger.info("RPG router included in Dispatcher.")