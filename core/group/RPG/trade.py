from core.group.RPG.MAINrpg import rpg_router
from core.group.RPG.rpg_utils import ensure_db_initialized
from .rpg_utils import trade_sessions
from aiogram import Router, types, F, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import logging
from aiogram import Router, types, F, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import logging
from typing import Dict, List, Tuple
import random
import time
import json
import aiosqlite
import asyncio
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from core.group.stat.shop_config import ShopConfig
from core.group.RPG.auction import *
from core.group.RPG.crafttable import *
from core.group.RPG.inventory import *
from core.group.RPG.investment import *
from core.group.RPG.item import *
from core.group.RPG.market import *
from core.group.RPG.trade import *
@rpg_router.message(F.text.lower() == "–æ–±–º–µ–Ω")
async def start_trade(message: types.Message, profile_manager):
    try:
        user_id = message.from_user.id
        user_inventory = await get_user_inventory_db(user_id)
        
        tradable_items = [item for item in user_inventory if item.get('type') != 'background' and item.get('quantity', 0) > 0]
        
        if not tradable_items:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞.")
            return
        
        builder = InlineKeyboardBuilder()
        text = "ü§ù **–û–±–º–µ–Ω**\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ–±–º–µ–Ω–∞:\n\n"
        
        for item in tradable_items:
            item_key = item.get('item_key', 'unknown')
            item_name = item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç')
            quantity = item.get('quantity', 1)
            
            builder.row(InlineKeyboardButton(
                text=f"{item_name} √ó{quantity}",
                callback_data=f"trade_select:{item_key}"
            ))
        
        builder.row(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞", 
            callback_data="trade_cancel"
        ))
        
        await message.answer(text, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"‚ùå Error in start_trade: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ–±–º–µ–Ω–∞")

@rpg_router.callback_query(F.data.startswith("trade_select:"))
async def handle_trade_select(callback: types.CallbackQuery, profile_manager):
    try:
        user_id = callback.from_user.id
        item_key = callback.data.split(":")[1]
        
        user_inventory = await get_user_inventory_db(user_id)
        item_data = None
        for item in user_inventory:
            if item.get('item_key') == item_key:
                item_data = item
                break
        
        if not item_data:
            await callback.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        item_info = ItemSystem.SHOP_ITEMS.get(item_key) or ItemSystem.CRAFTED_ITEMS.get(item_key)
        if not item_info:
            item_info = item_data
        
        trade_sessions[user_id] = {
            'my_item': item_key,
            'timestamp': time.time()
        }
        
        item_name = item_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç')
        
        info_text = f"üì¶ {item_name}\n"
        info_text += f"üìñ {item_info.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
        
        if 'stats' in item_info:
            stats_text = ""
            for stat, value in item_info['stats'].items():
                stats_text += f"   {stat}: +{value}\n"
            if stats_text:
                info_text += f"üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n{stats_text}"
        
        info_text += f"\n‚úÖ –í—ã–±—Ä–∞–Ω –¥–ª—è –æ–±–º–µ–Ω–∞!\n\n"
        info_text += f"–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π:\n\n`–æ–±–º–µ–Ω—è—Ç—å`"
        
        await callback.answer(info_text, show_alert=True)
        await callback.message.edit_text(f"ü§ù **–û–±–º–µ–Ω: –®–∞–≥ 1/2**\n\nüì¶ –í–∞—à –ø—Ä–µ–¥–º–µ—Ç: {item_name}\n\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π:\n\n`–æ–±–º–µ–Ω—è—Ç—å`")
        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_trade_select: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–µ–¥–º–µ—Ç–∞")

@rpg_router.message(F.text.lower() == "–æ–±–º–µ–Ω—è—Ç—å")
async def handle_trade_with_user(message: types.Message, profile_manager):
    try:
        user_id = message.from_user.id
        
        if not message.reply_to_message:
            await message.answer("‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
        
        target_user_id = message.reply_to_message.from_user.id
        
        if target_user_id not in trade_sessions:
            await message.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.")
            return
        
        trade_offer = trade_sessions[target_user_id]
        offer_item_key = trade_offer['my_item']
        offer_item_info = ItemSystem.SHOP_ITEMS.get(offer_item_key) or ItemSystem.CRAFTED_ITEMS.get(offer_item_key)
        if not offer_item_info:
            offer_item_info = {'name': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'}
        
        offer_item_name = offer_item_info['name']
        
        user_inventory = await get_user_inventory_db(user_id)
        tradable_items = [item for item in user_inventory if item.get('type') != 'background' and item.get('quantity', 0) > 0]
        
        if not tradable_items:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –æ–±–º–µ–Ω–∞.")
            return
        
        builder = InlineKeyboardBuilder()
        text = (
            f"ü§ù **–û–±–º–µ–Ω: –®–∞–≥ 2/2**\n\n"
            f"üì¶ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: {offer_item_name}\n"
            f"üë§ –û—Ç: {message.reply_to_message.from_user.first_name}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–µ–¥–º–µ—Ç:\n\n"
        )
        
        for item in tradable_items:
            item_key = item.get('item_key', 'unknown')
            item_name = item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç')
            quantity = item.get('quantity', 1)
            
            builder.row(InlineKeyboardButton(
                text=f"{item_name} √ó{quantity}",
                callback_data=f"trade_confirm:{target_user_id}:{item_key}"
            ))
        
        builder.row(InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞", 
            callback_data="trade_cancel"
        ))
        
        await message.answer(text, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_trade_with_user: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ")

@rpg_router.callback_query(F.data.startswith("trade_confirm:"))
async def handle_trade_confirm(callback: types.CallbackQuery, profile_manager):
    try:
        user_id = callback.from_user.id
        parts = callback.data.split(":")
        target_user_id = int(parts[1])
        my_item_key = parts[2]
        
        if target_user_id not in trade_sessions:
            await callback.answer("‚ùå –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–ª–æ")
            return
        
        trade_offer = trade_sessions[target_user_id]
        offer_item_key = trade_offer['my_item']
        
        user1_inventory = await get_user_inventory_db(target_user_id)
        user2_inventory = await get_user_inventory_db(user_id)
        
        user1_has_item = any(item.get('item_key') == offer_item_key and item.get('quantity', 0) > 0 for item in user1_inventory)
        user2_has_item = any(item.get('item_key') == my_item_key and item.get('quantity', 0) > 0 for item in user2_inventory)
        
        if not user1_has_item:
            await callback.answer("‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞")
            del trade_sessions[target_user_id]
            return
        
        if not user2_has_item:
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–∞")
            return
        
        success1 = await remove_item_from_inventory(target_user_id, offer_item_key, 1)
        success2 = await remove_item_from_inventory(user_id, my_item_key, 1)
        
        if not success1 or not success2:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ")
            return
        
        offer_item_info = ItemSystem.SHOP_ITEMS.get(offer_item_key) or ItemSystem.CRAFTED_ITEMS.get(offer_item_key)
        my_item_info = ItemSystem.SHOP_ITEMS.get(my_item_key) or ItemSystem.CRAFTED_ITEMS.get(my_item_key)
        
        offer_item_data = {
            'item_key': offer_item_key,
            'name': offer_item_info['name'] if offer_item_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç",
            'type': offer_item_info.get('type', 'material') if offer_item_info else 'material',
            'rarity': offer_item_info.get('rarity', 'common') if offer_item_info else 'common',
            'description': offer_item_info.get('description', '') if offer_item_info else '',
            'traded_at': time.time()
        }
        
        my_item_data = {
            'item_key': my_item_key,
            'name': my_item_info['name'] if my_item_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç",
            'type': my_item_info.get('type', 'material') if my_item_info else 'material',
            'rarity': my_item_info.get('rarity', 'common') if my_item_info else 'common',
            'description': my_item_info.get('description', '') if my_item_info else '',
            'traded_at': time.time()
        }
        
        success3 = await add_item_to_inventory_db(user_id, offer_item_data)
        success4 = await add_item_to_inventory_db(target_user_id, my_item_data)
        
        if not success3 or not success4:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏")
            return
        
        del trade_sessions[target_user_id]
        
        offer_item_name = offer_item_info['name'] if offer_item_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
        my_item_name = my_item_info['name'] if my_item_info else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç"
        
        success_text = (
            f"ü§ù **–û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
            f"üì¶ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {offer_item_name}\n"
            f"üì¶ –í—ã –æ—Ç–¥–∞–ª–∏: {my_item_name}\n\n"
            f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã –æ–±–º–µ–Ω—è–Ω—ã!"
        )
        
        await callback.message.edit_text(success_text)
        await callback.answer()
        
        try:
            target_user_name = callback.from_user.first_name
            notification_text = (
                f"ü§ù **–û–±–º–µ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                f"üì¶ –í—ã –ø–æ–ª—É—á–∏–ª–∏: {my_item_name}\n"
                f"üì¶ –í—ã –æ—Ç–¥–∞–ª–∏: {offer_item_name}\n\n"
                f"‚úÖ –û–±–º–µ–Ω —Å {target_user_name} –∑–∞–≤–µ—Ä—à–µ–Ω!"
            )
            await callback.bot.send_message(target_user_id, notification_text)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {target_user_id}: {e}")
        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_trade_confirm: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏")

@rpg_router.callback_query(F.data == "trade_cancel")
async def handle_trade_cancel(callback: types.CallbackQuery):
    try:
        user_id = callback.from_user.id
        if user_id in trade_sessions:
            del trade_sessions[user_id]
        
        await callback.message.edit_text("‚ùå –û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.")
        await callback.answer()
        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_trade_cancel: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ–±–º–µ–Ω–∞")

@rpg_router.callback_query(F.data == "sell_back_to_main")
async def back_from_sell(callback: types.CallbackQuery, profile_manager):
    await show_inventory(callback.message, profile_manager)
