from core.group.RPG.MAINrpg import rpg_router
from core.group.RPG.rpg_utils import ensure_db_initialized
from .rpg_utils import investment_amounts, quick_purchase_cache

from aiogram import Router, types, F, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import logging
from aiogram import Router, types, F, Bot
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import logging
from typing import Dict, List, Tuple
import random
import time
import json
import aiosqlite
import asyncio
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from core.group.stat.shop_config import ShopConfig
from core.group.RPG.auction import *
from core.group.RPG.crafttable import *
from core.group.RPG.inventory import *
from core.group.RPG.investment import *
from core.group.RPG.item import *
from core.group.RPG.market import *
from core.group.RPG.trade import *

async def add_investment(user_id: int, amount: int, term_days: int, interest_rate: float, risk: float = 0) -> bool:
    try:
        await ensure_db_initialized()
        
        async with aiosqlite.connect('profiles.db') as conn:
            await conn.execute('''
                INSERT INTO user_investments (user_id, amount, term_days, interest_rate, risk, invested_at, status)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (user_id, amount, term_days, interest_rate, risk, time.time(), 'active'))
            
            await conn.commit()
            return True
    except Exception as e:
        logger.error(f"‚ùå Error adding investment: {e}")
        return False

async def get_user_active_investments(user_id: int) -> List[dict]:
    try:
        await ensure_db_initialized()
        
        async with aiosqlite.connect('profiles.db') as conn:
            cursor = await conn.execute('''
                SELECT * FROM user_investments 
                WHERE user_id = ? AND status = 'active'
            ''', (user_id,))
            
            rows = await cursor.fetchall()
            columns = [description[0] for description in cursor.description]
            
            investments = []
            for row in rows:
                investment_dict = dict(zip(columns, row))
                investments.append(investment_dict)
            
            return investments
    except Exception as e:
        logger.error(f"‚ùå Error getting user investments: {e}")
        return []

@rpg_router.message(F.text.lower() == "–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def show_investment(message: types.Message, profile_manager):
    try:
        user_id = message.from_user.id
        lumcoins = await get_user_lumcoins(profile_manager, user_id)
        
        active_investments = await get_user_active_investments(user_id)
        
        builder = InlineKeyboardBuilder()
        text = f"üíº **–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏** | üí∞ –ë–∞–ª–∞–Ω—Å: {lumcoins} LUM\n\n"
        
        if active_investments:
            # –°—á–∏—Ç–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
            ready_count = 0
            total_invested = 0
            total_profit = 0
            
            for investment in active_investments:
                days_passed = (time.time() - investment['invested_at']) / 86400
                if days_passed >= investment['term_days']:
                    ready_count += 1
                total_invested += investment['amount']
                total_profit += int(investment['amount'] * investment['interest_rate'])
            
            text += f"üìä **–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:** {len(active_investments)}\n"
            text += f"üí∞ **–í—Å–µ–≥–æ –≤–ª–æ–∂–µ–Ω–æ:** {total_invested} LUM\n"
            text += f"üí∏ **–û–∂–∏–¥–∞–µ–º–∞—è –ø—Ä–∏–±—ã–ª—å:** +{total_profit} LUM\n"
            
            if ready_count > 0:
                text += f"‚úÖ **–ì–æ—Ç–æ–≤—ã –∫ –ø–æ–ª—É—á–µ–Ω–∏—é:** {ready_count}\n\n"
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é
                nearest = min(active_investments, 
                            key=lambda x: x['term_days'] - (time.time() - x['invested_at']) / 86400)
                days_left = nearest['term_days'] - (time.time() - nearest['invested_at']) / 86400
                text += f"‚è∞ **–ë–ª–∏–∂–∞–π—à–∞—è –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è —á–µ—Ä–µ–∑:** {int(days_left)} –¥–Ω–µ–π\n\n"
            
            # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –∫–Ω–æ–ø–∫–∏
            builder.row(InlineKeyboardButton(
                text="üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                callback_data="invest_start_new"
            ))
            
            builder.row(InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                callback_data="invest_refresh"
            ))
            
            if ready_count > 0:
                builder.row(InlineKeyboardButton(
                    text="üí∏ –ó–∞–±—Ä–∞—Ç—å –ø—Ä–∏–±—ã–ª—å", 
                    callback_data="invest_claim_all"
                ))
                
        else:
            text += "üí° **–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ LUM –ø–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç—ã!**\n\n"
            text += "üîí **–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:**\n"
            text += "‚Ä¢ 7 –¥–Ω–µ–π - 15% –ø—Ä–∏–±—ã–ª–∏\n"
            text += "‚Ä¢ 30 –¥–Ω–µ–π - 50% –ø—Ä–∏–±—ã–ª–∏\n\n"
            text += "üéØ **–†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:**\n" 
            text += "‚Ä¢ 3 –¥–Ω—è - 30% –ø—Ä–∏–±—ã–ª–∏ (—Ä–∏—Å–∫ 20%)\n"
            text += "‚Ä¢ 14 –¥–Ω–µ–π - 80% –ø—Ä–∏–±—ã–ª–∏ (—Ä–∏—Å–∫ 40%)\n\n"
            
            builder.row(InlineKeyboardButton(
                text="üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", 
                callback_data="invest_start_new"
            ))
            
            builder.row(InlineKeyboardButton(
                text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                callback_data="invest_refresh"
            ))
        
        await message.answer(text, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"‚ùå Error in show_investment: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")

@rpg_router.callback_query(F.data == "invest_new")
async def handle_invest_new(callback: types.CallbackQuery, profile_manager):
    """–ü—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
    await show_investment(callback.message, profile_manager)

@rpg_router.callback_query(F.data == "invest_start_new")
async def handle_invest_start_new(callback: types.CallbackQuery, profile_manager):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫—É–ª–¥–∞—É–Ω–∞"""
    try:
        user_id = callback.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É–ª–¥–∞—É–Ω - –º–∞–∫—Å–∏–º—É–º 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        active_investments = await get_user_active_investments(user_id)
        if len(active_investments) >= 5:
            await callback.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç: –º–∞–∫—Å–∏–º—É–º 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ")
            return
        
        lumcoins = await get_user_lumcoins(profile_manager, user_id)
        
        builder = InlineKeyboardBuilder()
        text = f"üíº **–ù–æ–≤–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è** | üí∞ –ë–∞–ª–∞–Ω—Å: {lumcoins} LUM\n\n"
        text += "üí∏ **–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:**\n\n"
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—É–º–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∞–ª–∞–Ω—Å–∞
        amounts = [1000, 5000, 10000, 50000]
        available_amounts = [amt for amt in amounts if amt <= lumcoins]
        
        if not available_amounts:
            await callback.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ LUM –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
            
        for amount in available_amounts:
            builder.row(InlineKeyboardButton(
                text=f"üí∞ {amount:,} LUM", 
                callback_data=f"invest_amount:{amount}"
            ))
        
        builder.row(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", 
            callback_data="invest_new"
        ))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_invest_start_new: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")

@rpg_router.callback_query(F.data == "invest_refresh")
async def handle_invest_refresh(callback: types.CallbackQuery, profile_manager):
    """–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö"""
    await show_investment(callback.message, profile_manager)

@rpg_router.callback_query(F.data.startswith("invest_amount:"))
async def handle_invest_amount(callback: types.CallbackQuery, profile_manager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"""
    try:
        user_id = callback.from_user.id
        amount = int(callback.data.split(":")[1])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        lumcoins = await get_user_lumcoins(profile_manager, user_id)
        if lumcoins < amount:
            await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ LUM. –ù—É–∂–Ω–æ: {amount}")
            return
        
        investment_amounts[user_id] = amount
        
        builder = InlineKeyboardBuilder()
        text = f"üíº **–í—ã–±–æ—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏** | üí∞ –°—É–º–º–∞: {amount:,} LUM\n\n"
        text += "üîí **–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:**\n"
        
        safe_investments = [
            ("üõ°Ô∏è 7 –¥–Ω–µ–π, 15%", "invest_safe:7:0.15"),
            ("üõ°Ô∏è 30 –¥–Ω–µ–π, 50%", "invest_safe:30:0.5")
        ]
        
        for name, data in safe_investments:
            parts = data.split(":")
            term_days = int(parts[1])
            interest_rate = float(parts[2])
            expected_return = int(amount * (1 + interest_rate))
            profit = expected_return - amount
            
            builder.row(InlineKeyboardButton(
                text=f"{name} | +{profit:,} LUM", 
                callback_data=f"{data}:{amount}"
            ))
        
        text += "\nüéØ **–†–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:**\n"
        
        risky_investments = [
            ("üéØ 3 –¥–Ω—è, 30%", "invest_risky:3:0.3:0.2"),
            ("üéØ 14 –¥–Ω–µ–π, 80%", "invest_risky:14:0.8:0.4")
        ]
        
        for name, data in risky_investments:
            parts = data.split(":")
            term_days = int(parts[1])
            interest_rate = float(parts[2])
            risk = float(parts[3])
            expected_return = int(amount * (1 + interest_rate))
            profit = expected_return - amount
            
            builder.row(InlineKeyboardButton(
                text=f"{name} | +{profit:,} LUM", 
                callback_data=f"{data}:{amount}"
            ))
        
        builder.row(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", 
            callback_data="invest_start_new"
        ))
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_invest_amount: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—É–º–º—ã")

@rpg_router.callback_query(F.data.startswith("invest_"))
async def handle_investment_actions(callback: types.CallbackQuery, profile_manager):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π"""
    try:
        user_id = callback.from_user.id
        data = callback.data
        
        if data == "invest_back":
            await show_investment(callback.message, profile_manager)
            return
            
        if data.startswith("invest_safe:") or data.startswith("invest_risky:"):
            parts = data.split(":")
            
            if data.startswith("invest_safe:"):
                term_days = int(parts[1])
                interest_rate = float(parts[2])
                amount = int(parts[3])
                risk = 0
                investment_type = "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è"
            else:
                term_days = int(parts[1])
                interest_rate = float(parts[2])
                risk = float(parts[3])
                amount = int(parts[4])
                investment_type = "üéØ –†–∏—Å–∫–æ–≤–∞–Ω–Ω–∞—è"
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            lumcoins = await get_user_lumcoins(profile_manager, user_id)
            if lumcoins < amount:
                await callback.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ LUM. –ù—É–∂–Ω–æ {amount}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É–ª–¥–∞—É–Ω–∞
            active_investments = await get_user_active_investments(user_id)
            if len(active_investments) >= 5:
                await callback.answer("‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç: –º–∞–∫—Å–∏–º—É–º 5 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
                return
            
            expected_return = int(amount * (1 + interest_rate))
            profit = expected_return - amount
            
            quick_invest = quick_purchase_cache.get(user_id)
            if (quick_invest and 
                quick_invest['data'] == data and 
                time.time() - quick_invest['timestamp'] <= 10):
                
                # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
                success = await update_user_lumcoins(profile_manager, user_id, -amount)
                if not success:
                    await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏")
                    return
                
                # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                await add_investment(user_id, amount, term_days, interest_rate, risk)
                
                if risk > 0 and random.random() < risk:
                    await callback.answer(f"‚ùå –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å! –ü–æ—Ç–µ—Ä—è–Ω–æ {amount} LUM")
                else:
                    await callback.answer(f"‚úÖ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {amount:,} LUM –Ω–∞ {term_days} –¥–Ω–µ–π!")
                
                del quick_purchase_cache[user_id]
                await show_investment(callback.message, profile_manager)
                
            else:
                quick_purchase_cache[user_id] = {
                    'data': data,
                    'timestamp': time.time()
                }
                
                # –°–û–ö–†–ê–©–ï–ù–ù–´–ô –¢–ï–ö–°–¢ –î–õ–Ø –ò–ó–ë–ï–ñ–ê–ù–ò–Ø –û–®–ò–ë–ö–ò
                info_text = (
                    f"{investment_type} –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è\n\n"
                    f"üí∞ –°—É–º–º–∞: {amount:,} LUM\n"
                    f"üìÖ –°—Ä–æ–∫: {term_days} –¥–Ω–µ–π\n"
                    f"üìà –î–æ—Ö–æ–¥: {expected_return:,} LUM\n"
                    f"üí∏ –ü—Ä–∏–±—ã–ª—å: +{profit:,} LUM\n"
                )
                
                if risk > 0:
                    info_text += f"‚ö†Ô∏è –†–∏—Å–∫: {risk*100}%\n\n"
                else:
                    info_text += "\n"
                
                info_text += "‚úÖ –ù–∞–∂–º–∏—Ç–µ –ï–©–Å –†–ê–ó –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!"
                
                await callback.answer(info_text, show_alert=True)
                
        elif data == "invest_claim_all":
            await handle_invest_claim_all(callback, profile_manager)
            
    except Exception as e:
        logger.error(f"‚ùå Error in handle_investment_actions: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏")

@rpg_router.callback_query(F.data == "invest_claim_all")
async def handle_invest_claim_all(callback: types.CallbackQuery, profile_manager):
    """–ó–∞–±—Ä–∞—Ç—å –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"""
    try:
        user_id = callback.from_user.id
        active_investments = await get_user_active_investments(user_id)
        
        total_profit = 0
        claimed_count = 0
        failed_count = 0
        
        for investment in active_investments:
            days_passed = (time.time() - investment['invested_at']) / 86400
            if days_passed >= investment['term_days']:
                expected_return = int(investment['amount'] * (1 + investment['interest_rate']))
                profit = expected_return - investment['amount']
                
                if investment['risk'] > 0 and random.random() < investment['risk']:
                    # –ü—Ä–æ–≤–∞–ª
                    await ensure_db_initialized()
                    async with aiosqlite.connect('profiles.db') as conn:
                        await conn.execute('''
                            UPDATE user_investments SET status = 'failed' 
                            WHERE user_id = ? AND invested_at = ?
                        ''', (user_id, investment['invested_at']))
                        await conn.commit()
                    failed_count += 1
                else:
                    # –£—Å–ø–µ—Ö
                    success = await update_user_lumcoins(profile_manager, user_id, expected_return)
                    if success:
                        total_profit += profit
                        await ensure_db_initialized()
                        async with aiosqlite.connect('profiles.db') as conn:
                            await conn.execute('''
                                UPDATE user_investments SET status = 'completed' 
                                WHERE user_id = ? AND invested_at = ?
                            ''', (user_id, investment['invested_at']))
                            await conn.commit()
                        claimed_count += 1
        
        if claimed_count == 0 and failed_count == 0:
            await callback.answer("üì≠ –ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")
        else:
            result_text = ""
            if claimed_count > 0:
                result_text += f"‚úÖ –ó–∞–±—Ä–∞–Ω–æ {claimed_count} –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n"
                result_text += f"üí∏ –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: +{total_profit:,} LUM\n"
            if failed_count > 0:
                result_text += f"‚ùå –ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å {failed_count} –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π\n"
            
            await callback.answer(result_text)
        
        await show_investment(callback.message, profile_manager)
        
    except Exception as e:
        logger.error(f"‚ùå Error in handle_invest_claim_all: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")

@rpg_router.message(F.text.lower() == "–º–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
async def show_my_investments(message: types.Message, profile_manager):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
    try:
        user_id = message.from_user.id
        lumcoins = await get_user_lumcoins(profile_manager, user_id)
        
        active_investments = await get_user_active_investments(user_id)
        
        builder = InlineKeyboardBuilder()
        text = f"üíº **–ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏** | üí∞ –ë–∞–ª–∞–Ω—Å: {lumcoins} LUM\n\n"
        
        if not active_investments:
            text += "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.\n\n"
            text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É '–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!"
        else:
            text += f"üìä **–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ ({len(active_investments)}/5):**\n\n"
            
            for i, investment in enumerate(active_investments, 1):
                days_passed = (time.time() - investment['invested_at']) / 86400
                days_left = max(0, investment['term_days'] - days_passed)
                hours_left = int((days_left - int(days_left)) * 24)
                expected_return = int(investment['amount'] * (1 + investment['interest_rate']))
                profit = expected_return - investment['amount']
                
                # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                progress_percent = min(100, int((days_passed / investment['term_days']) * 100))
                progress_bar = "üü¢" * (progress_percent // 20) + "‚ö™" * (5 - progress_percent // 20)
                
                text += f"**#{i}** | {progress_bar} {progress_percent}%\n"
                text += f"üí∞ **–°—É–º–º–∞:** {investment['amount']:,} LUM\n"
                text += f"üìÖ **–°—Ä–æ–∫:** {investment['term_days']} –¥–Ω–µ–π\n"
                text += f"üìà **–ü—Ä–æ—Ü–µ–Ω—Ç:** {investment['interest_rate']*100}%\n"
                text += f"üíµ **–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥:** {expected_return:,} LUM\n"
                text += f"üí∏ **–ü—Ä–∏–±—ã–ª—å:** +{profit:,} LUM\n"
                
                if days_left <= 0:
                    text += f"‚úÖ **–ì–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é!**\n"
                else:
                    text += f"‚è∞ **–û—Å—Ç–∞–ª–æ—Å—å:** {int(days_left)}–¥ {hours_left}—á\n"
                
                if investment['risk'] > 0:
                    text += f"‚ö†Ô∏è **–†–∏—Å–∫:** {investment['risk']*100}%\n"
                
                text += "‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\n\n"
        
        builder.row(InlineKeyboardButton(
            text="üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", 
            callback_data="invest_new"
        ))
        
        builder.row(InlineKeyboardButton(
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
            callback_data="my_investments_refresh"
        ))
        
        if any(inv['term_days'] <= (time.time() - inv['invested_at']) / 86400 for inv in active_investments):
            builder.row(InlineKeyboardButton(
                text="üí∏ –ó–∞–±—Ä–∞—Ç—å –≤—Å–µ –≥–æ—Ç–æ–≤—ã–µ", 
                callback_data="invest_claim_all"
            ))
        
        await message.answer(text, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"‚ùå Error in show_my_investments_detailed: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π")

@rpg_router.callback_query(F.data == "my_investments_refresh")
async def handle_my_investments_refresh(callback: types.CallbackQuery, profile_manager):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π"""
    await show_my_investments(callback.message, profile_manager)

@rpg_router.message(F.text.lower() == "–ø—Ä–æ–¥–∞—Ç—å")
async def show_sell_menu(message: types.Message, profile_manager):
    try:
        user_id = message.from_user.id
        user_inventory = await get_user_inventory_db(user_id)
        
        sellable_items = [item for item in user_inventory if item.get('type') != 'background' and item.get('quantity', 0) > 0]
        
        if not sellable_items:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏.")
            return
        
        builder = InlineKeyboardBuilder()
        text = "üí∞ **–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤**\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏:\n\n"
        
        for item in sellable_items:
            item_key = item.get('item_key', 'unknown')
            item_name = item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç')
            quantity = item.get('quantity', 1)
            sell_price = ItemSystem.get_item_sell_price(item_key)
            
            builder.row(InlineKeyboardButton(
                text=f"{item_name} √ó{quantity} - üí∞{sell_price}",
                callback_data=f"sell_item_info:{item_key}"
            ))
        
        builder.row(InlineKeyboardButton(
            text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", 
            callback_data="sell_back_to_main"
        ))
        
        await message.answer(text, reply_markup=builder.as_markup())
        
    except Exception as e:
        logger.error(f"‚ùå Error in show_sell_menu: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –ø—Ä–æ–¥–∞–∂–∏")

@rpg_router.callback_query(F.data.startswith("sell_item_info:"))
async def handle_sell_item_info(callback: types.CallbackQuery, profile_manager):
    try:
        user_id = callback.from_user.id
        item_key = callback.data.split(":")[1]
        
        user_inventory = await get_user_inventory_db(user_id)
        item_data = None
        for item in user_inventory:
            if item.get('item_key') == item_key:
                item_data = item
                break
        
        if not item_data:
            await callback.answer("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        item_info = ItemSystem.SHOP_ITEMS.get(item_key) or ItemSystem.CRAFTED_ITEMS.get(item_key)
        if not item_info:
            item_info = item_data
        
        sell_price = ItemSystem.get_item_sell_price(item_key)
        
        quick_sell = quick_sell_cache.get(user_id)
        if (quick_sell and 
            quick_sell['item_key'] == item_key and 
            time.time() - quick_sell['timestamp'] <= 5):
            
            item_quantity = item_data.get('quantity', 0)
            
            if item_quantity <= 0:
                await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞")
                return
            
            success = await remove_item_from_inventory(user_id, item_key, 1)
            if not success:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞")
                return
            
            success = await update_user_lumcoins(profile_manager, user_id, sell_price)
            if not success:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤")
                return
            
            del quick_sell_cache[user_id]
            
            await callback.answer(f"‚úÖ –ü—Ä–æ–¥–∞–Ω–æ: {item_info['name']} –∑–∞ {sell_price} LUM!")
            await show_sell_menu(callback.message, profile_manager)
            
        else:
            quick_sell_cache[user_id] = {
                'item_key': item_key,
                'timestamp': time.time()
            }
            
            info_text = f"üí∞ **–ü—Ä–æ–¥–∞–∂–∞ –ø—Ä–µ–¥–º–µ—Ç–∞**\n\n"
            info_text += f"üì¶ {item_info['name']}\n"
            info_text += f"üìñ {item_info.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}\n"
            
            if 'stats' in item_info:
                stats_text = ""
                for stat, value in item_info['stats'].items():
                    stats_text += f"   {stat}: +{value}\n"
                if stats_text:
                    info_text += f"üìä –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n{stats_text}"
            
            info_text += f"üíé –¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–∂–∏: {sell_price} LUM (50% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏)\n\n"
            info_text += f"‚úÖ –ù–∞–∂–º–∏—Ç–µ –ï–©–Å –†–ê–ó –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏!"
            
            await callback.answer(info_text, show_alert=True)
            
    except Exception as e:
        logger.error(f"‚ùå Error in handle_sell_item_info: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ –ø—Ä–µ–¥–º–µ—Ç–∞")

