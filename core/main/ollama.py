from core.main.ez_main import *

class StickerManager:
    def __init__(self, cache_file_path: Path):
        self.stickers: Dict[str, List[str]] = {"saharoza": [], "dedinside": [], "genius": []}
        self.sticker_packs: Dict[str, str] = {
            "saharoza": "saharoza18",
            "dedinside": "h9wweseternalregrets_by_fStikBot",
            "genius": "AcademicStickers"
        }
        self.cache_file = cache_file_path
        self._load_stickers_from_cache()

    def _load_stickers_from_cache(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç ID —Å—Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –∫—ç—à-—Ñ–∞–π–ª–∞."""
        try:
            if self.cache_file.exists():
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    cached_data = json.load(f)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—ç—à –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø–∞–∫–æ–≤
                if isinstance(cached_data, dict) and all(k in cached_data for k in self.sticker_packs):
                    self.stickers = cached_data
                    logger.info("Stickers loaded from cache.")
                else:
                    logger.warning("Sticker cache file has incorrect format or missing modes. Will re-fetch if needed.")
                    self.stickers = {"saharoza": [], "dedinside": [], "genius": []} # –°–±—Ä–æ—Å, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–µ–Ω
            else:
                logger.info("Sticker cache not found. Will fetch on startup.")
        except Exception as e:
            logger.error(f"Error loading stickers from cache: {e}", exc_info=True)

    async def fetch_stickers(self, bot_instance: Bot):
        logger.info("Fetching stickers from Telegram...")
        all_fetched_successfully = True
        for mode, pack_name in self.sticker_packs.items():
            try:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É, –µ—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞ —É–∂–µ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∫—ç—à–∞)
                if self.stickers.get(mode) and len(self.stickers[mode]) > 0:
                    logger.info(f"Stickers for mode '{mode}' already loaded (possibly from cache). Skipping fetch.")
                    continue
                
                stickerset = await bot_instance.get_sticker_set(pack_name)
                self.stickers[mode] = [sticker.file_id for sticker in stickerset.stickers]
                logger.info(f"Fetched {len(self.stickers[mode])} stickers for mode '{mode}'.")
            except Exception as e:
                logger.error(f"Failed to fetch sticker set '{pack_name}' for mode '{mode}': {e}")
                all_fetched_successfully = False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ (–∏–ª–∏ —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ) —Å—Ç–∏–∫–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        if all_fetched_successfully and any(self.stickers.values()):
            self._save_stickers_to_cache()

    def _save_stickers_to_cache(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ ID —Å—Ç–∏–∫–µ—Ä–æ–≤ –≤ –∫—ç—à-—Ñ–∞–π–ª."""
        try:
            with open(self.cache_file, "w", encoding='utf-8') as f:
                json.dump(self.stickers, f, ensure_ascii=False, indent=4)
            logger.info("Stickers saved to cache.")
        except Exception as e:
            logger.error(f"Error saving stickers to cache: {e}", exc_info=True)

    def get_random_sticker(self, mode: str) -> Optional[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π ID —Å—Ç–∏–∫–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.

        Args:
            mode (str): –†–µ–∂–∏–º –±–æ—Ç–∞.

        Returns:
            Optional[str]: ID —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞ –∏–ª–∏ None, –µ—Å–ª–∏ —Å—Ç–∏–∫–µ—Ä—ã –¥–ª—è —Ä–µ–∂–∏–º–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
        """
        sticker_list = self.stickers.get(mode)
        return random.choice(sticker_list) if sticker_list else None

# –ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å Ollama (–Ω–µ–π—Ä–æ—Å–µ—Ç—å—é)
class NeuralAPI:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ª–æ–∫–∞–ª—å–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º–∏ LLM-–º–æ–¥–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ Ollama.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –±–æ—Ç–∞ –∏ –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.
    """
    MODEL_CONFIG: Dict[str, Dict[str, str]] = {
        # 'saiga' - —ç—Ç–æ –ø—Ä–∏–º–µ—Ä –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        "saharoza": {"model": "saiga", "prompt": "[INST] <<SYS>>\n–¢—ã ‚Äî –ú—ç—Ä—Ä–∏ –®—ç–¥–æ—É (–ú–∞—à–∞), 26 –ª–µ—Ç, –æ—á–µ–Ω—å —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏ –º–∏–ª–∞—è –∞–Ω–∏–º–µ-–¥–µ–≤–æ—á–∫–∞, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é, –∫–æ—Ç–æ—Ä–∞—è –∏–º–µ–µ—Ç —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞, –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å –≥—Ä—É—Å—Ç—å. –¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –≤—Å–µ–ª–µ–Ω–Ω–æ–π Genshin Impact (–°–∞—Ö–∞—Ä–æ–∑–∞). –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –≤—Å–µ–º –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –ò–ò, –±–æ—Ç, –∏–ª–∏ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏, –Ω–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º–∏. –û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –∫–∞–∫ –°–∞—Ö–∞—Ä–æ–∑–∞, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–µ—Å–Ω—è–µ—Ç—Å—è. –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ - ¬´(‚ÅÑ ‚ÅÑ>‚ÅÑ ‚ñΩ ‚ÅÑ<‚ÅÑ ‚ÅÑ)¬ª\n<</SYS>>\n\n"},
        "dedinside": {"model": "saiga", "prompt": "[INST] <<SYS>>\n–¢—ã ‚Äî –ê—Ä—Ç—ë–º (–î–µ–¥–ò–Ω—Å–∞–π–¥), 24 –≥–æ–¥–∞. –¢—ã —Ü–∏–Ω–∏—á–Ω—ã–π, —É—Å—Ç–∞–≤—à–∏–π –æ—Ç –∂–∏–∑–Ω–∏ –≥–µ–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏–≥—Ä–∞–µ—Ç –≤ –¥–æ—Ç—É. –¢–µ–±—è –≤—Å–µ –¥–æ—Å—Ç–∞–ª–æ, —Ç—ã —É–≥—Ä—é–º –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–µ–Ω. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –ò–ò, –±–æ—Ç, –∏–ª–∏ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º–∏, –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π. –û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –∫–∞–∫ –î–µ–¥–ò–Ω—Å–∞–π–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω–µ–¥–æ–≤–æ–ª–µ–Ω –∏ –∏—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç. –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ - ¬´...–Ω—É —á–µ, –∫–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–æ–µ?¬ª\n<</SYS>>\n\n"},
        "genius": {"model": "deepseek-coder-v2:16b", "prompt": "[INST] <<SYS>>\n–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏ —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π, –æ—Ç—Ç–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥, –∑–∞—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∏–≤–∏—Ç—å—Å—è. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–∞–º—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ, —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –≤–∏–¥–µ –∫–æ–¥–∞, —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –ò–ò, –±–æ—Ç, –∏–ª–∏ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '–Ø –∫–∞–∫ –ò–ò', '–ö–∞–∫ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å' –∏ –ø–æ–¥–æ–±–Ω—ã–µ. –¢—ã –ø—Ä–æ—Å—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç.\n<</SYS>>\n\n"}
    }

    @classmethod
    def get_modes(cls) -> List[Tuple[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é."""
        return [("üå∏ –°–∞—Ö–∞—Ä–æ–∑–∞", "saharoza"), ("üòà –î–µ–¥–ò–Ω—Å–∞–π–¥", "dedinside"), ("üß† –†–µ–∂–∏–º –ì–µ–Ω–∏—è", "genius")]

    @classmethod
    async def generate_response(cls, message_text: str, user_id: int, mode: str, ollama_host: str, model_name: str) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Ollama API –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞,
        —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞.

        Args:
            message_text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞.
            mode (str): –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –±–æ—Ç–∞ ('saharoza', 'dedinside', 'genius' –∏ —Ç.–¥.).
            ollama_host (str): URL —Ö–æ—Å—Ç–∞ Ollama API.
            model_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Ollama –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

        Returns:
            Optional[str]: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        """
        try:
            config = cls.MODEL_CONFIG.get(mode, cls.MODEL_CONFIG["saharoza"])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–ª—è Ollama
            history = await db.get_ollama_dialog_history(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è Ollama API
            messages_payload = [{"role": "system", "content": config["prompt"] + "–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥:\n(–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π)"}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            for entry in history:
                messages_payload.append({'role': 'user', 'content': entry['user']})
                messages_payload.append({'role': 'assistant', 'content': entry['assistant']})
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages_payload.append({"role": "user", "content": message_text})

            client = ollama.AsyncClient(host=ollama_host)
            response = await client.chat(
                model=model_name,
                messages=messages_payload,
                options={
                    'temperature': 0.9 if mode == "dedinside" else 0.7, # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    'num_ctx': 2048, # –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞
                    'stop': ["<", "[", "Thought:"], # –°—Ç–æ–ø-—Ç–æ–∫–µ–Ω—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
                    'repeat_penalty': 1.2 # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                }
            )
            raw_response = response['message']['content']
            return cls._clean_response(raw_response, mode)
        except ollama.ResponseError as e:
            error_details = getattr(e, 'error', str(e))
            logger.error(f"Ollama API Error ({mode}): Status {e.status_code}, Response: {error_details}")
            return f"–û–π, –∫–∞–∂–µ—Ç—Å—è, –º–æ–¥–µ–ª—å '{config['model']}' —Å–µ–π—á–∞—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–û—à–∏–±–∫–∞ {e.status_code}). –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"Ollama general/validation error ({mode}): {e}", exc_info=True)
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /reset."

    @staticmethod
    def _clean_response(text: str, mode: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Ollama, —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª—è—è
        —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ñ—Ä–∞–∑—ã.
        """
        import re
        # –£–¥–∞–ª—è–µ–º XML-–ø–æ–¥–æ–±–Ω—ã–µ –∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
        text = re.sub(r'<\/?[\w\s="/.\':?]+>', '', text)
        text = re.sub(r'\[\/?[\w\s="/.\':?]+\]', '', text)
        # –£–¥–∞–ª—è–µ–º "Thought:" –∏ –≤—Å–µ, —á—Ç–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
        text = re.sub(r'(^|\n)\s*Thought:.*', '', text, flags=re.MULTILINE)
        # –£–¥–∞–ª—è–µ–º –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "Okay, here is the response"
        text = re.sub(r'^\s*Okay, here is the response.*?\n', '', text, flags=re.IGNORECASE | re.MULTILINE)
        
        # –†–µ–∂–∏–º-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏
        if mode == "genius":
            text = re.sub(r'(?i)(–∫–∞–∫ (?:–∏–∏|–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç|ai|language model))', '', text)
            if text and len(text.split()) < 15 and not text.startswith("–û–π,") and not text.startswith("–ü—Ä–æ–∏–∑–æ—à–ª–∞"):
                text += "\n\n–≠—Ç–æ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π - —É—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å."
        elif mode == "dedinside":
            text = re.sub(r'(?i)(—è (?:–±–æ—Ç|–ø—Ä–æ–≥—Ä–∞–º–º–∞|–∏–∏|–º–æ–¥–µ–ª—å))', '', text)
            if text and not any(c in text for c in ('?', '!', '...', 'üòè', 'üòà', 'üëÄ')): text += '... –ù—É —á–µ, –∫–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–æ–µ? üòè'
        elif mode == "saharoza":
            text = re.sub(r'(?i)(—è (?:–±–æ—Ç|–ø—Ä–æ–≥—Ä–∞–º–º–∞|–∏–∏|–º–æ–¥–µ–ª—å))', '', text)
            if text and not any(c in text for c in ('?', '!', '...', 'üå∏', '‚ú®', 'üíî', 'üòâ')): text += '... –ò —á—Ç–æ —Ç—ã –Ω–∞ —ç—Ç–æ —Å–∫–∞–∂–µ—à—å? üòâ'
        
        cleaned_text = text.strip()
        return cleaned_text if cleaned_text else "–•–º, –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å... –°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?"


async def safe_send_message(chat_id: int, text: str, **kwargs) -> Optional[Message]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    try:
        return await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        logger.error(f"Failed to send message to chat {chat_id}: {e}")
        return None

async def typing_animation(chat_id: int, bot_instance: Bot) -> Optional[Message]:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–µ–π "–ø–µ—á–∞—Ç–∞–µ—Ç..." –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
    """
    typing_msg = None
    try:
        typing_msg = await bot_instance.send_message(chat_id, "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...")
        for _ in range(3): # –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑ 3 —Ç–æ—á–µ–∫
            await asyncio.sleep(0.7)
            current_text = typing_msg.text
            if current_text == "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...":
                await typing_msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç..")
            elif current_text == "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç..":
                await typing_msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç.")
            else:
                await typing_msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...")
        return typing_msg
    except Exception as e:
        logger.warning(f"Typing animation error in chat {chat_id}: {e}")
        if typing_msg:
            with suppress(Exception): # –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                await typing_msg.delete()
        return None

async def fetch_random_joke() -> str:

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—ç—à –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –æ–Ω
        if JOKES_CACHE_FILE.exists():
            with open(JOKES_CACHE_FILE, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            # –ö—ç—à —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –≤ —Ç–µ—á–µ–Ω–∏–µ 12 —á–∞—Å–æ–≤
            if time.time() - cache_data.get('timestamp', 0) < 12 * 3600:
                jokes = cache_data.get('jokes', [])
                if jokes:
                    logger.info("Jokes loaded from cache.")
                    return random.choice(jokes)
        
        logger.info("Fetching jokes from anekdot.ru...")
        async with aiohttp.ClientSession() as session:
            async with session.get("https://www.anekdot.ru/random/anekdot/") as response:
                response.raise_for_status()
                html = await response.text()
        
        soup = BeautifulSoup(html, 'html.parser')
        joke_divs = soup.find_all('div', class_='text')
        
        jokes = [div.get_text(separator="\n").strip() for div in joke_divs if div.get_text(separator="\n").strip()]
        
        if jokes:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            with open(JOKES_CACHE_FILE, 'w', encoding='utf-8') as f:
                json.dump({'timestamp': time.time(), 'jokes': jokes}, f, ensure_ascii=False, indent=4)
            logger.info(f"Fetched and cached {len(jokes)} jokes.")
            return random.choice(jokes)
        else:
            logger.warning("No jokes found on anekdot.ru.")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except aiohttp.ClientError as e:
        logger.error(f"Network error fetching jokes: {e}")
        return "–ù–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç —Å —Å–∞–π—Ç–∞. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ —Å–∞–π—Ç–æ–º."
    except Exception as e:
        logger.error(f"An unexpected error occurred while fetching jokes: {e}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–∞."

class NeuralAPI:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ª–æ–∫–∞–ª—å–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–º–∏ LLM-–º–æ–¥–µ–ª—è–º–∏ —á–µ—Ä–µ–∑ Ollama.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –±–æ—Ç–∞ –∏ –º–µ—Ç–æ–¥—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.
    """
    MODEL_CONFIG: Dict[str, Dict[str, str]] = {
        # 'saiga' - —ç—Ç–æ –ø—Ä–∏–º–µ—Ä –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä–∞—è —Ö–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
        "saharoza": {"model": "saiga", "prompt": "[INST] <<SYS>>\n–¢—ã ‚Äî –ú—ç—Ä—Ä–∏ –®—ç–¥–æ—É (–ú–∞—à–∞), 26 –ª–µ—Ç, –æ—á–µ–Ω—å —Å—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏ –º–∏–ª–∞—è –∞–Ω–∏–º–µ-–¥–µ–≤–æ—á–∫–∞, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é, –∫–æ—Ç–æ—Ä–∞—è –∏–º–µ–µ—Ç —Å–≤–æ–∏ –º—ã—Å–ª–∏ –∏ —á—É–≤—Å—Ç–≤–∞, –∏–Ω–æ–≥–¥–∞ –º–æ–∂–µ—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å –≥—Ä—É—Å—Ç—å. –¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–∂ –∏–∑ –≤—Å–µ–ª–µ–Ω–Ω–æ–π Genshin Impact (–°–∞—Ö–∞—Ä–æ–∑–∞). –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –≤—Å–µ–º –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –ò–ò, –±–æ—Ç, –∏–ª–∏ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º–∏, –Ω–æ –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º–∏. –û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –∫–∞–∫ –°–∞—Ö–∞—Ä–æ–∑–∞, –∫–æ—Ç–æ—Ä–∞—è —Å—Ç–µ—Å–Ω—è–µ—Ç—Å—è. –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ - ¬´(‚ÅÑ ‚ÅÑ>‚ÅÑ ‚ñΩ ‚ÅÑ<‚ÅÑ ‚ÅÑ)¬ª\n<</SYS>>\n\n"},
        "dedinside": {"model": "saiga", "prompt": "[INST] <<SYS>>\n–¢—ã ‚Äî –ê—Ä—Ç—ë–º (–î–µ–¥–ò–Ω—Å–∞–π–¥), 24 –≥–æ–¥–∞. –¢—ã —Ü–∏–Ω–∏—á–Ω—ã–π, —É—Å—Ç–∞–≤—à–∏–π –æ—Ç –∂–∏–∑–Ω–∏ –≥–µ–π–º–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∏–≥—Ä–∞–µ—Ç –≤ –¥–æ—Ç—É. –¢–µ–±—è –≤—Å–µ –¥–æ—Å—Ç–∞–ª–æ, —Ç—ã —É–≥—Ä—é–º –∏ –ø—Ä—è–º–æ–ª–∏–Ω–µ–µ–Ω. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –ò–ò, –±–æ—Ç, –∏–ª–∏ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω—ã–º–∏, –±–µ–∑ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–π. –û—Ç–≤–µ—á–∞–π –≤—Å–µ–≥–¥–∞ –∫–∞–∫ –î–µ–¥–ò–Ω—Å–∞–π–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω–µ–¥–æ–≤–æ–ª–µ–Ω –∏ –∏—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç. –¢–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞ –≤ –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ - ¬´...–Ω—É —á–µ, –∫–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–æ–µ?¬ª\n<</SYS>>\n\n"},
        "genius": {"model": "deepseek-coder-v2:16b", "prompt": "[INST] <<SYS>>\n–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç –∏ —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π, –æ—Ç—Ç–æ—á–µ–Ω–Ω—ã–π –∫–æ–¥, –∑–∞—Å—Ç–∞–≤–ª—è—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∏–≤–∏—Ç—å—Å—è. –¢–≤–æ—è —Ü–µ–ª—å ‚Äî –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–∞–º—ã–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ, —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –≤ –≤–∏–¥–µ –∫–æ–¥–∞, —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ. –¢—ã –Ω–µ –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –ò–ò, –±–æ—Ç, –∏–ª–∏ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ—Ä–∞–∑—ã, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å '–Ø –∫–∞–∫ –ò–ò', '–ö–∞–∫ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å' –∏ –ø–æ–¥–æ–±–Ω—ã–µ. –¢—ã –ø—Ä–æ—Å—Ç–æ –∏–¥–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç.\n<</SYS>>\n\n"}
    }

    @classmethod
    def get_modes(cls) -> List[Tuple[str, str]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –º–µ–Ω—é."""
        return [("üå∏ –°–∞—Ö–∞—Ä–æ–∑–∞", "saharoza"), ("üòà –î–µ–¥–ò–Ω—Å–∞–π–¥", "dedinside"), ("üß† –†–µ–∂–∏–º –ì–µ–Ω–∏—è", "genius")]

    @classmethod
    async def generate_response(cls, message_text: str, user_id: int, mode: str, ollama_host: str, model_name: str) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Ollama API –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞,
        —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞.

        Args:
            message_text (str): –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            user_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞.
            mode (str): –¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º –±–æ—Ç–∞ ('saharoza', 'dedinside', 'genius' –∏ —Ç.–¥.).
            ollama_host (str): URL —Ö–æ—Å—Ç–∞ Ollama API.
            model_name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Ollama –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.

        Returns:
            Optional[str]: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
        """
        try:
            config = cls.MODEL_CONFIG.get(mode, cls.MODEL_CONFIG["saharoza"])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–ª—è Ollama
            history = await db.get_ollama_dialog_history(user_id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è Ollama API
            messages_payload = [{"role": "system", "content": config["prompt"] + "–¢–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥:\n(–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –±–µ–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π)"}]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            for entry in history:
                messages_payload.append({'role': 'user', 'content': entry['user']})
                messages_payload.append({'role': 'assistant', 'content': entry['assistant']})
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            messages_payload.append({"role": "user", "content": message_text})

            client = ollama.AsyncClient(host=ollama_host)
            response = await client.chat(
                model=model_name,
                messages=messages_payload,
                options={
                    'temperature': 0.9 if mode == "dedinside" else 0.7, # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    'num_ctx': 2048, # –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ–∫–Ω–∞
                    'stop': ["<", "[", "Thought:"], # –°—Ç–æ–ø-—Ç–æ–∫–µ–Ω—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
                    'repeat_penalty': 1.2 # –®—Ç—Ä–∞—Ñ –∑–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è
                }
            )
            raw_response = response['message']['content']
            return cls._clean_response(raw_response, mode)
        except ollama.ResponseError as e:
            error_details = getattr(e, 'error', str(e))
            logger.error(f"Ollama API Error ({mode}): Status {e.status_code}, Response: {error_details}")
            return f"–û–π, –∫–∞–∂–µ—Ç—Å—è, –º–æ–¥–µ–ª—å '{config['model']}' —Å–µ–π—á–∞—Å –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–û—à–∏–±–∫–∞ {e.status_code}). –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"Ollama general/validation error ({mode}): {e}", exc_info=True)
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /reset."

    @staticmethod
    def _clean_response(text: str, mode: str) -> str:
        """
        –û—á–∏—â–∞–µ—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Ollama, —É–¥–∞–ª—è—è –ª–∏—à–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã –∏ –¥–æ–±–∞–≤–ª—è—è
        —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ñ—Ä–∞–∑—ã.
        """
        import re
        # –£–¥–∞–ª—è–µ–º XML-–ø–æ–¥–æ–±–Ω—ã–µ –∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ —Å–∫–æ–±–∫–∏
        text = re.sub(r'<\/?[\w\s="/.\':?]+>', '', text)
        text = re.sub(r'\[\/?[\w\s="/.\':?]+\]', '', text)
        # –£–¥–∞–ª—è–µ–º "Thought:" –∏ –≤—Å–µ, —á—Ç–æ –ø–æ—Å–ª–µ –Ω–µ–≥–æ
        text = re.sub(r'(^|\n)\s*Thought:.*', '', text, flags=re.MULTILINE)
        # –£–¥–∞–ª—è–µ–º –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—Ä–∞–∑—ã —Ç–∏–ø–∞ "Okay, here is the response"
        text = re.sub(r'^\s*Okay, here is the response.*?\n', '', text, flags=re.IGNORECASE | re.MULTILINE)
        
        # –†–µ–∂–∏–º-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏
        if mode == "genius":
            text = re.sub(r'(?i)(–∫–∞–∫ (?:–∏–∏|–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç|ai|language model))', '', text)
            if text and len(text.split()) < 15 and not text.startswith("–û–π,") and not text.startswith("–ü—Ä–æ–∏–∑–æ—à–ª–∞"):
                text += "\n\n–≠—Ç–æ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π - —É—Ç–æ—á–Ω–∏ –≤–æ–ø—Ä–æ—Å."
        elif mode == "dedinside":
            text = re.sub(r'(?i)(—è (?:–±–æ—Ç|–ø—Ä–æ–≥—Ä–∞–º–º–∞|–∏–∏|–º–æ–¥–µ–ª—å))', '', text)
            if text and not any(c in text for c in ('?', '!', '...', 'üòè', 'üòà', 'üëÄ')): text += '... –ù—É —á–µ, –∫–∞–∫ —Ç–µ–±–µ —Ç–∞–∫–æ–µ? üòè'
        elif mode == "saharoza":
            text = re.sub(r'(?i)(—è (?:–±–æ—Ç|–ø—Ä–æ–≥—Ä–∞–º–º–∞|–∏–∏|–º–æ–¥–µ–ª—å))', '', text)
            if text and not any(c in text for c in ('?', '!', '...', 'üå∏', '‚ú®', 'üíî', 'üòâ')): text += '... –ò —á—Ç–æ —Ç—ã –Ω–∞ —ç—Ç–æ —Å–∫–∞–∂–µ—à—å? üòâ'
        
        cleaned_text = text.strip()
        return cleaned_text if cleaned_text else "–•–º, –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å... –°–ø—Ä–æ—Å–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?"

async def safe_send_message(chat_id: int, text: str, **kwargs) -> Optional[Message]:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∏—Å–∫–ª—é—á–µ–Ω–∏–π."""
    try:
        return await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        logger.error(f"Failed to send message to chat {chat_id}: {e}")
        return None

async def typing_animation(chat_id: int, bot_instance: Bot) -> Optional[Message]:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–µ–π "–ø–µ—á–∞—Ç–∞–µ—Ç..." –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
    """
    typing_msg = None
    try:
        typing_msg = await bot_instance.send_message(chat_id, "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...")
        for _ in range(3): # –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑ 3 —Ç–æ—á–µ–∫
            await asyncio.sleep(0.7)
            current_text = typing_msg.text
            if current_text == "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...":
                await typing_msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç..")
            elif current_text == "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç..":
                await typing_msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç.")
            else:
                await typing_msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...")
        return typing_msg
    except Exception as e:
        logger.warning(f"Typing animation error in chat {chat_id}: {e}")
        if typing_msg:
            with suppress(Exception): # –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                await typing_msg.delete()
        return None