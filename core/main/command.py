from core.main.ez_main import *

async def fetch_random_joke() -> str:
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—ç—à –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –æ–Ω
        if JOKES_CACHE_FILE.exists():
            with open(JOKES_CACHE_FILE, 'r', encoding='utf-8') as f:
                cache_data = json.load(f)
            # –ö—ç—à —Å—á–∏—Ç–∞–µ—Ç—Å—è –∞–∫—Ç—É–∞–ª—å–Ω—ã–º –≤ —Ç–µ—á–µ–Ω–∏–µ 12 —á–∞—Å–æ–≤
            if time.time() - cache_data.get('timestamp', 0) < 12 * 3600:
                jokes = cache_data.get('jokes', [])
                if jokes:
                    logger.info("Jokes loaded from cache.")
                    return random.choice(jokes)
        
        logger.info("Fetching jokes from anekdot.ru...")
        async with aiohttp.ClientSession() as session:
            async with session.get("https://www.anekdot.ru/random/anekdot/") as response:
                response.raise_for_status()
                html = await response.text()
        
        soup = BeautifulSoup(html, 'html.parser')
        joke_divs = soup.find_all('div', class_='text')
        
        jokes = [div.get_text(separator="\n").strip() for div in joke_divs if div.get_text(separator="\n").strip()]
        
        if jokes:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            with open(JOKES_CACHE_FILE, 'w', encoding='utf-8') as f:
                json.dump({'timestamp': time.time(), 'jokes': jokes}, f, ensure_ascii=False, indent=4)
            logger.info(f"Fetched and cached {len(jokes)} jokes.")
            return random.choice(jokes)
        else:
            logger.warning("No jokes found on anekdot.ru.")
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

    except aiohttp.ClientError as e:
        logger.error(f"Network error fetching jokes: {e}")
        return "–ù–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç —Å —Å–∞–π—Ç–∞. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ —Å–∞–π—Ç–æ–º."
    except Exception as e:
        logger.error(f"An unexpected error occurred while fetching jokes: {e}", exc_info=True)
        return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–∞."
    
async def cmd_start(message: Message, profile_manager: ProfileManager):
    user = message.from_user
    if not user:
        logger.warning("Received start command without user info.")
        return

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –ë–î –∏ –ª–æ–≥–∏—Ä—É–µ–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
    await db.ensure_user_exists(user.id, user.username, user.first_name)
    await db.log_user_interaction(user.id, "start_command", "command")

    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ group_stat –∞–∫—Ç–∏–≤–µ–Ω)
    profile = await profile_manager.get_user_profile(user)
    if not profile:
        logger.error(f"Failed to get profile for user {user.id} after start.")
        # –ù–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –æ—à–∏–±–∫—É –ø—Ä–æ—Ñ–∏–ª—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, —á—Ç–æ–±—ã –±–æ—Ç —Ö–æ—Ç—å –∫–∞–∫-—Ç–æ –æ—Ç–≤–µ—á–∞–ª
        pass

    response_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {hbold(user.first_name)}! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –∏ –º–Ω–æ–≥–æ–ª–∏–∫–∏–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. "
        "–Ø –º–æ–≥—É –≥–æ–≤–æ—Ä–∏—Ç—å —Å –≤–∞–º–∏ –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö. –ß—Ç–æ–±—ã —Å–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /mode.\n\n"
        "–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚ú® /mode - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã –∏ —Å–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π.\n"
        "üìä /stats - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n"
        "ü§£ /joke - –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç.\n"
        "üîç /check_value - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ).\n"
        "üîî /subscribe_value - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏—è.\n"
        "üîï /unsubscribe_value - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.\n"
        "üë§ /profile - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –∏–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–µ—Å–ª–∏ –µ—Å—Ç—å, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ group_stat).\n"
        "‚öíÔ∏è /rp_commands - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ RP-–¥–µ–π—Å—Ç–≤–∏–π (—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ rp_module_refactored).\n"
        "‚ù§Ô∏è /hp - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ HP (–≤ RP-–º–æ–¥—É–ª–µ, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è –≤ rp_module_refactored).\n"
        "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –º–Ω–µ, –∏ —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Ä–µ–∂–∏–º–µ!"
    )
    await message.answer(response_text, parse_mode=ParseMode.HTML)

async def safe_send_message(chat_id: int, text: str, **kwargs) -> Optional[Message]:
    try:
        return await bot.send_message(chat_id, text, **kwargs)
    except Exception as e:
        logger.error(f"Failed to send message to chat {chat_id}: {e}")
        return None

async def typing_animation(chat_id: int, bot_instance: Bot) -> Optional[Message]:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏–µ–π "–ø–µ—á–∞—Ç–∞–µ—Ç..." –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.
    """
    typing_msg = None
    try:
        typing_msg = await bot_instance.send_message(chat_id, "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...")
        for _ in range(3): # –ê–Ω–∏–º–∞—Ü–∏—è –∏–∑ 3 —Ç–æ—á–µ–∫
            await asyncio.sleep(0.7)
            current_text = typing_msg.text
            if current_text == "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...":
                await typing_msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç..")
            elif current_text == "‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç..":
                await typing_msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç.")
            else:
                await typing_msg.edit_text("‚úçÔ∏è –ü–µ—á–∞—Ç–∞–µ—Ç...")
        return typing_msg
    except Exception as e:
        logger.warning(f"Typing animation error in chat {chat_id}: {e}")
        if typing_msg:
            with suppress(Exception): # –ü–æ–¥–∞–≤–ª—è–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                await typing_msg.delete()
        return None

async def jokes_task(bot_instance: Bot):
    """
    –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª.
    """
    logger.info("Jokes task started.")
    if not CHANNEL_ID:
        logger.warning("Jokes task disabled: CHANNEL_ID is not set or invalid.")
        return
    
    while True:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç –∫–∞–∂–¥—ã–µ 1-2 —á–∞—Å–∞ (—Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
        await asyncio.sleep(random.randint(3500, 7200))
        logger.info("Starting periodic jokes cache update.")
        try:
            joke_text = await fetch_random_joke()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–Ω–µ–∫–¥–æ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
            if joke_text != "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ." and \
               joke_text != "–ù–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç —Å —Å–∞–π—Ç–∞. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é –∏–ª–∏ —Å–∞–π—Ç–æ–º." and \
               joke_text != "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∞–Ω–µ–∫–¥–æ—Ç–∞.":
                await safe_send_message(CHANNEL_ID, f"üé≠ {joke_text}")
                logger.info(f"Joke sent to channel {CHANNEL_ID}.")
            else:
                logger.warning(f"Failed to fetch joke for channel: {joke_text}")
            logger.info("Finished periodic jokes cache update.")
        except Exception as e:
            logger.error(f"Error during periodic jokes cache update: {e}", exc_info=True)